
Hung_DTG01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c0c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053dc  080053dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e4  080053e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  20000070  0800545c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  0800545c  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130ac  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d90  00000000  00000000  00033144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  00035ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  00036900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015023  00000000  00000000  000371f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001007f  00000000  00000000  0004c213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000737f5  00000000  00000000  0005c292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfa87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025c0  00000000  00000000  000cfadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004cb4 	.word	0x08004cb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004cb4 	.word	0x08004cb4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;
uint8_t data = 0;
extern RingBuffer_Types Rx_Buffer;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
//	m_rx_buff.data[m_rx_buff.index] = data ;
//	m_rx_buff.index++;

	RingBuffer_Push(&Rx_Buffer, data);
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <HAL_UART_RxCpltCallback+0x2c>)
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <HAL_UART_RxCpltCallback+0x30>)
 80004ce:	0011      	movs	r1, r2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 f87f 	bl	80015d4 <RingBuffer_Push>
	HAL_UART_Receive_IT(&huart1, &data, 1);
 80004d6:	4905      	ldr	r1, [pc, #20]	; (80004ec <HAL_UART_RxCpltCallback+0x2c>)
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_UART_RxCpltCallback+0x34>)
 80004da:	2201      	movs	r2, #1
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fc97 	bl	8002e10 <HAL_UART_Receive_IT>
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b002      	add	sp, #8
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	2000008c 	.word	0x2000008c
 80004f0:	20000438 	.word	0x20000438
 80004f4:	200003a0 	.word	0x200003a0

080004f8 <App_Main>:


void App_Main ()
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	// Note: Sửa NOPULL -> PULLUP:  GPIO_InitStruct.Pull = GPIO_PULLUP; de tranh loi nhan NULL truoc khi Power on EC200
	HAL_UART_Receive_IT(&huart1, &data, 1);
 80004fc:	4905      	ldr	r1, [pc, #20]	; (8000514 <App_Main+0x1c>)
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <App_Main+0x20>)
 8000500:	2201      	movs	r2, #1
 8000502:	0018      	movs	r0, r3
 8000504:	f002 fc84 	bl	8002e10 <HAL_UART_Receive_IT>

	GMS_Hardware_Init();
 8000508:	f000 fb4c 	bl	8000ba4 <GMS_Hardware_Init>
	//UART_SendData(USART1, bf_send, sizeof(bf_send));
	while(1)
	{
		GSM_mnr_task();
 800050c:	f000 fa8c 	bl	8000a28 <GSM_mnr_task>
 8000510:	e7fc      	b.n	800050c <App_Main+0x14>
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	2000008c 	.word	0x2000008c
 8000518:	200003a0 	.word	0x200003a0

0800051c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b08b      	sub	sp, #44	; 0x2c
 8000520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	2414      	movs	r4, #20
 8000524:	193b      	adds	r3, r7, r4
 8000526:	0018      	movs	r0, r3
 8000528:	2314      	movs	r3, #20
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f003 ff5a 	bl	80043e6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	4b42      	ldr	r3, [pc, #264]	; (800063c <MX_GPIO_Init+0x120>)
 8000534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000536:	4b41      	ldr	r3, [pc, #260]	; (800063c <MX_GPIO_Init+0x120>)
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	430a      	orrs	r2, r1
 800053c:	62da      	str	r2, [r3, #44]	; 0x2c
 800053e:	4b3f      	ldr	r3, [pc, #252]	; (800063c <MX_GPIO_Init+0x120>)
 8000540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	4013      	ands	r3, r2
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	4b3c      	ldr	r3, [pc, #240]	; (800063c <MX_GPIO_Init+0x120>)
 800054c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800054e:	4b3b      	ldr	r3, [pc, #236]	; (800063c <MX_GPIO_Init+0x120>)
 8000550:	2104      	movs	r1, #4
 8000552:	430a      	orrs	r2, r1
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
 8000556:	4b39      	ldr	r3, [pc, #228]	; (800063c <MX_GPIO_Init+0x120>)
 8000558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055a:	2204      	movs	r2, #4
 800055c:	4013      	ands	r3, r2
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b36      	ldr	r3, [pc, #216]	; (800063c <MX_GPIO_Init+0x120>)
 8000564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000566:	4b35      	ldr	r3, [pc, #212]	; (800063c <MX_GPIO_Init+0x120>)
 8000568:	2101      	movs	r1, #1
 800056a:	430a      	orrs	r2, r1
 800056c:	62da      	str	r2, [r3, #44]	; 0x2c
 800056e:	4b33      	ldr	r3, [pc, #204]	; (800063c <MX_GPIO_Init+0x120>)
 8000570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000572:	2201      	movs	r2, #1
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b30      	ldr	r3, [pc, #192]	; (800063c <MX_GPIO_Init+0x120>)
 800057c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800057e:	4b2f      	ldr	r3, [pc, #188]	; (800063c <MX_GPIO_Init+0x120>)
 8000580:	2102      	movs	r1, #2
 8000582:	430a      	orrs	r2, r1
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
 8000586:	4b2d      	ldr	r3, [pc, #180]	; (800063c <MX_GPIO_Init+0x120>)
 8000588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800058a:	2202      	movs	r2, #2
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GSM_GPIO_Port, EN_GSM_Pin, GPIO_PIN_RESET);
 8000592:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <MX_GPIO_Init+0x124>)
 8000594:	2200      	movs	r2, #0
 8000596:	2140      	movs	r1, #64	; 0x40
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fc39 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GSM_PWKEY_Pin|GSM_EN_Pin, GPIO_PIN_RESET);
 800059e:	2381      	movs	r3, #129	; 0x81
 80005a0:	0219      	lsls	r1, r3, #8
 80005a2:	23a0      	movs	r3, #160	; 0xa0
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	2200      	movs	r2, #0
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fc31 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, GPIO_PIN_RESET);
 80005ae:	2380      	movs	r3, #128	; 0x80
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	4824      	ldr	r0, [pc, #144]	; (8000644 <MX_GPIO_Init+0x128>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	0019      	movs	r1, r3
 80005b8:	f001 fc2a 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_GSM_Pin;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2240      	movs	r2, #64	; 0x40
 80005c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	2201      	movs	r2, #1
 80005c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	2200      	movs	r2, #0
 80005d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_GSM_GPIO_Port, &GPIO_InitStruct);
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	4a1a      	ldr	r2, [pc, #104]	; (8000640 <MX_GPIO_Init+0x124>)
 80005d8:	0019      	movs	r1, r3
 80005da:	0010      	movs	r0, r2
 80005dc:	f001 fa9a 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GSM_PWKEY_Pin|GSM_EN_Pin;
 80005e0:	0021      	movs	r1, r4
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2281      	movs	r2, #129	; 0x81
 80005e6:	0212      	lsls	r2, r2, #8
 80005e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	000c      	movs	r4, r1
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2201      	movs	r2, #1
 80005f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	193a      	adds	r2, r7, r4
 8000600:	23a0      	movs	r3, #160	; 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f001 fa84 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GSM_RESET_Pin;
 800060c:	0021      	movs	r1, r4
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	0092      	lsls	r2, r2, #2
 8000614:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2201      	movs	r2, #1
 800061a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GSM_RESET_GPIO_Port, &GPIO_InitStruct);
 8000628:	187b      	adds	r3, r7, r1
 800062a:	4a06      	ldr	r2, [pc, #24]	; (8000644 <MX_GPIO_Init+0x128>)
 800062c:	0019      	movs	r1, r3
 800062e:	0010      	movs	r0, r2
 8000630:	f001 fa70 	bl	8001b14 <HAL_GPIO_Init>

}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b00b      	add	sp, #44	; 0x2c
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	50000800 	.word	0x50000800
 8000644:	50000400 	.word	0x50000400

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f001 f88c 	bl	8001768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f808 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f7ff ff62 	bl	800051c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000658:	f000 f8f0 	bl	800083c <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  App_Main();
 800065c:	f7ff ff4c 	bl	80004f8 <App_Main>
 8000660:	e7fc      	b.n	800065c <main+0x14>
	...

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b09b      	sub	sp, #108	; 0x6c
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	2434      	movs	r4, #52	; 0x34
 800066c:	193b      	adds	r3, r7, r4
 800066e:	0018      	movs	r0, r3
 8000670:	2334      	movs	r3, #52	; 0x34
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f003 feb6 	bl	80043e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067a:	2320      	movs	r3, #32
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	0018      	movs	r0, r3
 8000680:	2314      	movs	r3, #20
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f003 feae 	bl	80043e6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800068a:	003b      	movs	r3, r7
 800068c:	0018      	movs	r0, r3
 800068e:	2320      	movs	r3, #32
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f003 fea7 	bl	80043e6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	4b29      	ldr	r3, [pc, #164]	; (8000740 <SystemClock_Config+0xdc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a29      	ldr	r2, [pc, #164]	; (8000744 <SystemClock_Config+0xe0>)
 800069e:	401a      	ands	r2, r3
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <SystemClock_Config+0xdc>)
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	0109      	lsls	r1, r1, #4
 80006a6:	430a      	orrs	r2, r1
 80006a8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006aa:	0021      	movs	r1, r4
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2202      	movs	r2, #2
 80006b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2201      	movs	r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2210      	movs	r2, #16
 80006bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2202      	movs	r2, #2
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	0412      	lsls	r2, r2, #16
 80006d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fbb6 	bl	8001e4c <HAL_RCC_OscConfig>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006e4:	f000 f830 	bl	8000748 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	2120      	movs	r1, #32
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	220f      	movs	r2, #15
 80006ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2203      	movs	r2, #3
 80006f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2100      	movs	r1, #0
 800070c:	0018      	movs	r0, r3
 800070e:	f001 ff19 	bl	8002544 <HAL_RCC_ClockConfig>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000716:	f000 f817 	bl	8000748 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800071a:	003b      	movs	r3, r7
 800071c:	2201      	movs	r2, #1
 800071e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000720:	003b      	movs	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000726:	003b      	movs	r3, r7
 8000728:	0018      	movs	r0, r3
 800072a:	f002 f92f 	bl	800298c <HAL_RCCEx_PeriphCLKConfig>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000732:	f000 f809 	bl	8000748 <Error_Handler>
  }
}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b01b      	add	sp, #108	; 0x6c
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	40007000 	.word	0x40007000
 8000744:	ffffe7ff 	.word	0xffffe7ff

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <HAL_MspInit+0x24>)
 800075a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_MspInit+0x24>)
 800075e:	2101      	movs	r1, #1
 8000760:	430a      	orrs	r2, r1
 8000762:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <HAL_MspInit+0x24>)
 8000766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <HAL_MspInit+0x24>)
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	0549      	lsls	r1, r1, #21
 800076e:	430a      	orrs	r2, r1
 8000770:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler+0x4>

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f001 f836 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	/* Check RXNE flag value in ISR register */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <USART1_IRQHandler+0x14>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f002 fb94 	bl	8002ee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	200003a0 	.word	0x200003a0

080007c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007cc:	4a14      	ldr	r2, [pc, #80]	; (8000820 <_sbrk+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <_sbrk+0x60>)
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <_sbrk+0x64>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <_sbrk+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	18d3      	adds	r3, r2, r3
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d207      	bcs.n	8000804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f4:	f003 fdac 	bl	8004350 <__errno>
 80007f8:	0003      	movs	r3, r0
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fe:	2301      	movs	r3, #1
 8000800:	425b      	negs	r3, r3
 8000802:	e009      	b.n	8000818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	18d2      	adds	r2, r2, r3
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <_sbrk+0x64>)
 8000814:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b006      	add	sp, #24
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20005000 	.word	0x20005000
 8000824:	00000400 	.word	0x00000400
 8000828:	20000090 	.word	0x20000090
 800082c:	200004b0 	.word	0x200004b0

08000830 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_USART1_UART_Init+0x58>)
 8000842:	4a15      	ldr	r2, [pc, #84]	; (8000898 <MX_USART1_UART_Init+0x5c>)
 8000844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_USART1_UART_Init+0x58>)
 8000848:	22e1      	movs	r2, #225	; 0xe1
 800084a:	0252      	lsls	r2, r2, #9
 800084c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART1_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_USART1_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART1_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USART1_UART_Init+0x58>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART1_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USART1_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART1_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART1_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <MX_USART1_UART_Init+0x58>)
 8000880:	0018      	movs	r0, r3
 8000882:	f002 f9c9 	bl	8002c18 <HAL_UART_Init>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800088a:	f7ff ff5d 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200003a0 	.word	0x200003a0
 8000898:	40013800 	.word	0x40013800

0800089c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	240c      	movs	r4, #12
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	0018      	movs	r0, r3
 80008aa:	2314      	movs	r3, #20
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f003 fd99 	bl	80043e6 <memset>
  if(uartHandle->Instance==USART1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a1c      	ldr	r2, [pc, #112]	; (800092c <HAL_UART_MspInit+0x90>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d132      	bne.n	8000924 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_UART_MspInit+0x94>)
 80008c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <HAL_UART_MspInit+0x94>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	01c9      	lsls	r1, r1, #7
 80008c8:	430a      	orrs	r2, r1
 80008ca:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_UART_MspInit+0x94>)
 80008ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <HAL_UART_MspInit+0x94>)
 80008d2:	2101      	movs	r1, #1
 80008d4:	430a      	orrs	r2, r1
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_UART_MspInit+0x94>)
 80008da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008dc:	2201      	movs	r2, #1
 80008de:	4013      	ands	r3, r2
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MCU_TX0_Pin|MCU_RX0_Pin;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	22c0      	movs	r2, #192	; 0xc0
 80008e8:	00d2      	lsls	r2, r2, #3
 80008ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	0021      	movs	r1, r4
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2202      	movs	r2, #2
 80008f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2201      	movs	r2, #1
 80008f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2203      	movs	r2, #3
 80008fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2204      	movs	r2, #4
 8000904:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	187a      	adds	r2, r7, r1
 8000908:	23a0      	movs	r3, #160	; 0xa0
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f001 f900 	bl	8001b14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2101      	movs	r1, #1
 8000918:	201b      	movs	r0, #27
 800091a:	f001 f841 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800091e:	201b      	movs	r0, #27
 8000920:	f001 f853 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b009      	add	sp, #36	; 0x24
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	40013800 	.word	0x40013800
 8000930:	40021000 	.word	0x40021000

08000934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000936:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490e      	ldr	r1, [pc, #56]	; (8000974 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0b      	ldr	r4, [pc, #44]	; (8000980 <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800095e:	f7ff ff67 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000962:	f003 fcfb 	bl	800435c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000966:	f7ff fe6f 	bl	8000648 <main>

0800096a <LoopForever>:

LoopForever:
    b LoopForever
 800096a:	e7fe      	b.n	800096a <LoopForever>
   ldr   r0, =_estack
 800096c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000978:	080053ec 	.word	0x080053ec
  ldr r2, =_sbss
 800097c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000980:	200004ac 	.word	0x200004ac

08000984 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_COMP_IRQHandler>
	...

08000988 <GSM_Config_Module>:
    {"AT\r\n", "OK\r\n", "", "ERROR", "", 3000, 5, GSM_Config_Module}, // AT Test

};

void GSM_Config_Module (GSM_Response_Event_TypDef event, void *Resp_Buffer)
{
 8000988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af04      	add	r7, sp, #16
 800098e:	0002      	movs	r2, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	701a      	strb	r2, [r3, #0]
    uint8_t TableIndex = GSM_Manager.step;
 8000996:	210f      	movs	r1, #15
 8000998:	187b      	adds	r3, r7, r1
 800099a:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <GSM_Config_Module+0x90>)
 800099c:	7852      	ldrb	r2, [r2, #1]
 800099e:	701a      	strb	r2, [r3, #0]
    uint8_t TableSize = sizeof(atc_table_config_module)/sizeof(atc_table_config_module[0]);
 80009a0:	200e      	movs	r0, #14
 80009a2:	183b      	adds	r3, r7, r0
 80009a4:	2218      	movs	r2, #24
 80009a6:	701a      	strb	r2, [r3, #0]
    if(TableIndex >= TableSize)
 80009a8:	187a      	adds	r2, r7, r1
 80009aa:	183b      	adds	r3, r7, r0
 80009ac:	7812      	ldrb	r2, [r2, #0]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d22d      	bcs.n	8000a10 <GSM_Config_Module+0x88>
    {
        return;
    }
    DEBUG_PrintResult_ATC(atc_table_config_module[TableIndex-1].cmd, (event == GSM_EVENT_OK)?"[OK]":"[FAIL]");
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	1e5a      	subs	r2, r3, #1
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <GSM_Config_Module+0x94>)
 80009bc:	0152      	lsls	r2, r2, #5
 80009be:	58d2      	ldr	r2, [r2, r3]
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d101      	bne.n	80009cc <GSM_Config_Module+0x44>
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <GSM_Config_Module+0x98>)
 80009ca:	e000      	b.n	80009ce <GSM_Config_Module+0x46>
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <GSM_Config_Module+0x9c>)
 80009ce:	0019      	movs	r1, r3
 80009d0:	0010      	movs	r0, r2
 80009d2:	f000 fbe3 	bl	800119c <DEBUG_PrintResult_ATC>
    GSM_SendCommand_AT(atc_table_config_module[TableIndex]);
 80009d6:	230f      	movs	r3, #15
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4c0f      	ldr	r4, [pc, #60]	; (8000a1c <GSM_Config_Module+0x94>)
 80009de:	015b      	lsls	r3, r3, #5
 80009e0:	2110      	movs	r1, #16
 80009e2:	18e2      	adds	r2, r4, r3
 80009e4:	1851      	adds	r1, r2, r1
 80009e6:	466a      	mov	r2, sp
 80009e8:	c961      	ldmia	r1!, {r0, r5, r6}
 80009ea:	c261      	stmia	r2!, {r0, r5, r6}
 80009ec:	6809      	ldr	r1, [r1, #0]
 80009ee:	6011      	str	r1, [r2, #0]
 80009f0:	5918      	ldr	r0, [r3, r4]
 80009f2:	18e2      	adds	r2, r4, r3
 80009f4:	6851      	ldr	r1, [r2, #4]
 80009f6:	18e2      	adds	r2, r4, r3
 80009f8:	6892      	ldr	r2, [r2, #8]
 80009fa:	18e3      	adds	r3, r4, r3
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	f000 fb09 	bl	8001014 <GSM_SendCommand_AT>
    GSM_Manager.step++;
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <GSM_Config_Module+0x90>)
 8000a04:	785b      	ldrb	r3, [r3, #1]
 8000a06:	3301      	adds	r3, #1
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <GSM_Config_Module+0x90>)
 8000a0c:	705a      	strb	r2, [r3, #1]
 8000a0e:	e000      	b.n	8000a12 <GSM_Config_Module+0x8a>
        return;
 8000a10:	46c0      	nop			; (mov r8, r8)
}
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b005      	add	sp, #20
 8000a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a18:	20000424 	.word	0x20000424
 8000a1c:	08005040 	.word	0x08005040
 8000a20:	08004e1c 	.word	0x08004e1c
 8000a24:	08004e24 	.word	0x08004e24

08000a28 <GSM_mnr_task>:
void GSM_mnr_task(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    GSM_Hardware_Layer_Run();
 8000a2c:	f000 f8cc 	bl	8000bc8 <GSM_Hardware_Layer_Run>
    Polling_GSM_StateMachine();
 8000a30:	f000 f852 	bl	8000ad8 <Polling_GSM_StateMachine>
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <GSM_GET_IMEI_Buffer>:
void GSM_GET_IMEI_Buffer(GSM_Response_Event_TypDef event, void *Resp_Buffer)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	0002      	movs	r2, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	701a      	strb	r2, [r3, #0]
    if(event != GSM_EVENT_OK)
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d007      	beq.n	8000a62 <GSM_GET_IMEI_Buffer+0x26>
    {
        GSM_Config_Module(event, &Resp_Buffer);
 8000a52:	003a      	movs	r2, r7
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff ff94 	bl	8000988 <GSM_Config_Module>
 8000a60:	e02e      	b.n	8000ac0 <GSM_GET_IMEI_Buffer+0x84>
    }
    else
    {
        if(strlen((char*)GSM_IMEI_Buffer) < 14)
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <GSM_GET_IMEI_Buffer+0x8c>)
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff fb4f 	bl	8000108 <strlen>
 8000a6a:	0003      	movs	r3, r0
 8000a6c:	2b0d      	cmp	r3, #13
 8000a6e:	d820      	bhi.n	8000ab2 <GSM_GET_IMEI_Buffer+0x76>
        {
            GSM_Utilities_Get_IMEI(Resp_Buffer, GSM_IMEI_Buffer, 16);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	4915      	ldr	r1, [pc, #84]	; (8000ac8 <GSM_GET_IMEI_Buffer+0x8c>)
 8000a74:	2210      	movs	r2, #16
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 fb4c 	bl	8001114 <GSM_Utilities_Get_IMEI>
            if(strlen((char*)GSM_IMEI_Buffer) < 15)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <GSM_GET_IMEI_Buffer+0x8c>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fb42 	bl	8000108 <strlen>
 8000a84:	0003      	movs	r3, r0
 8000a86:	2b0e      	cmp	r3, #14
 8000a88:	d80b      	bhi.n	8000aa2 <GSM_GET_IMEI_Buffer+0x66>
            {
                DEBUG_WARN("IMEI's invalid!\r\n");
 8000a8a:	f000 fb3b 	bl	8001104 <sys_get_tick_ms>
 8000a8e:	0001      	movs	r1, r0
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <GSM_GET_IMEI_Buffer+0x90>)
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <GSM_GET_IMEI_Buffer+0x94>)
 8000a94:	0018      	movs	r0, r3
 8000a96:	f000 fd51 	bl	800153c <app_debug_rtt_raw>
                GSM_Manager_ChangeState(GSM_STATE_RESET); // Cant get GSM imei, maybe gsm module error =>> Restart module
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 f86e 	bl	8000b7c <GSM_Manager_ChangeState>
                return;
 8000aa0:	e00e      	b.n	8000ac0 <GSM_GET_IMEI_Buffer+0x84>
            }
            else
            {
                DEBUG_INFO("GSM IMEI: %s\r\n", GSM_IMEI_Buffer);
 8000aa2:	f000 fb2f 	bl	8001104 <sys_get_tick_ms>
 8000aa6:	0001      	movs	r1, r0
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <GSM_GET_IMEI_Buffer+0x8c>)
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <GSM_GET_IMEI_Buffer+0x90>)
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <GSM_GET_IMEI_Buffer+0x98>)
 8000aae:	f000 fd45 	bl	800153c <app_debug_rtt_raw>
            }
        }
        GSM_Config_Module(event, &Resp_Buffer);
 8000ab2:	003a      	movs	r2, r7
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f7ff ff64 	bl	8000988 <GSM_Config_Module>
    }
}
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	20000094 	.word	0x20000094
 8000acc:	08004cdc 	.word	0x08004cdc
 8000ad0:	08004e2c 	.word	0x08004e2c
 8000ad4:	08004e58 	.word	0x08004e58

08000ad8 <Polling_GSM_StateMachine>:
void Polling_GSM_StateMachine (void)
{
 8000ad8:	b5b0      	push	{r4, r5, r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af04      	add	r7, sp, #16
    static uint32_t last_tick = 0;
    uint32_t current_tick = sys_get_tick_ms();
 8000ade:	f000 fb11 	bl	8001104 <sys_get_tick_ms>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	607b      	str	r3, [r7, #4]
    if(current_tick - last_tick >= (uint32_t)1000)
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <Polling_GSM_StateMachine+0x90>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	1ad2      	subs	r2, r2, r3
 8000aee:	23fa      	movs	r3, #250	; 0xfa
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d32f      	bcc.n	8000b56 <Polling_GSM_StateMachine+0x7e>
    {
        last_tick = current_tick;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <Polling_GSM_StateMachine+0x90>)
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	601a      	str	r2, [r3, #0]
        switch (GSM_Manager.state)
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <Polling_GSM_StateMachine+0x94>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d02a      	beq.n	8000b5a <Polling_GSM_StateMachine+0x82>
 8000b04:	dc1d      	bgt.n	8000b42 <Polling_GSM_StateMachine+0x6a>
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d004      	beq.n	8000b14 <Polling_GSM_StateMachine+0x3c>
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d119      	bne.n	8000b42 <Polling_GSM_StateMachine+0x6a>
        {
            case GSM_STATE_RESET:
                GSM_Turn_on_Power();
 8000b0e:	f000 f9cb 	bl	8000ea8 <GSM_Turn_on_Power>
                break;
 8000b12:	e025      	b.n	8000b60 <Polling_GSM_StateMachine+0x88>
            case GSM_STATE_POWER_ON:
                if(GSM_Manager.step == 0)
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <Polling_GSM_StateMachine+0x94>)
 8000b16:	785b      	ldrb	r3, [r3, #1]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d120      	bne.n	8000b5e <Polling_GSM_StateMachine+0x86>
                {
                    GSM_Manager.step = 1;
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <Polling_GSM_StateMachine+0x94>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	705a      	strb	r2, [r3, #1]
                    GSM_SendCommand_AT(atc_table_config_module[0]);
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <Polling_GSM_StateMachine+0x98>)
 8000b24:	466a      	mov	r2, sp
 8000b26:	0011      	movs	r1, r2
 8000b28:	001a      	movs	r2, r3
 8000b2a:	3210      	adds	r2, #16
 8000b2c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000b2e:	c131      	stmia	r1!, {r0, r4, r5}
 8000b30:	6812      	ldr	r2, [r2, #0]
 8000b32:	600a      	str	r2, [r1, #0]
 8000b34:	6818      	ldr	r0, [r3, #0]
 8000b36:	6859      	ldr	r1, [r3, #4]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	f000 fa6a 	bl	8001014 <GSM_SendCommand_AT>
                }
                break;
 8000b40:	e00d      	b.n	8000b5e <Polling_GSM_StateMachine+0x86>
            case GSM_STATE_OK:

                break;
            default:
                DEBUG_WARN("Unhandled state %d.\r\n", GSM_Manager.state);
 8000b42:	f000 fadf 	bl	8001104 <sys_get_tick_ms>
 8000b46:	0001      	movs	r1, r0
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <Polling_GSM_StateMachine+0x94>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <Polling_GSM_StateMachine+0x9c>)
 8000b4e:	480a      	ldr	r0, [pc, #40]	; (8000b78 <Polling_GSM_StateMachine+0xa0>)
 8000b50:	f000 fcf4 	bl	800153c <app_debug_rtt_raw>
                break;
 8000b54:	e004      	b.n	8000b60 <Polling_GSM_StateMachine+0x88>
        }
    }
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	e002      	b.n	8000b60 <Polling_GSM_StateMachine+0x88>
                break;
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	e000      	b.n	8000b60 <Polling_GSM_StateMachine+0x88>
                break;
 8000b5e:	46c0      	nop			; (mov r8, r8)
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bdb0      	pop	{r4, r5, r7, pc}
 8000b68:	200000a8 	.word	0x200000a8
 8000b6c:	20000424 	.word	0x20000424
 8000b70:	08005040 	.word	0x08005040
 8000b74:	08004cdc 	.word	0x08004cdc
 8000b78:	08004e80 	.word	0x08004e80

08000b7c <GSM_Manager_ChangeState>:
void GSM_Manager_ChangeState(uint8_t state)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	0002      	movs	r2, r0
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	701a      	strb	r2, [r3, #0]
    GSM_Manager.state = state;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <GSM_Manager_ChangeState+0x24>)
 8000b8a:	1dfa      	adds	r2, r7, #7
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	701a      	strb	r2, [r3, #0]
    GSM_Manager.step = 0;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <GSM_Manager_ChangeState+0x24>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	705a      	strb	r2, [r3, #1]
}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	20000424 	.word	0x20000424

08000ba4 <GMS_Hardware_Init>:
uint8_t *p_compare_end_str_error_handle;

static GSM_Hardware_atc_TypDef m_gsm_atc;

void GMS_Hardware_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	//Init SEGGER RTT Debug
	SEGGER_RTT_Init();
 8000ba8:	f000 fcc0 	bl	800152c <SEGGER_RTT_Init>
	// Cap phat bo nho cho RxRingBuffer
	RingBuffer_Init(&Rx_Buffer, 100);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <GMS_Hardware_Init+0x20>)
 8000bae:	2164      	movs	r1, #100	; 0x64
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fcf5 	bl	80015a0 <RingBuffer_Init>
	// Set default GMS State to GMS_STATE_RESET
	GSM_Manager_ChangeState(GSM_STATE_RESET);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff ffe0 	bl	8000b7c <GSM_Manager_ChangeState>
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	20000438 	.word	0x20000438

08000bc8 <GSM_Hardware_Layer_Run>:
void GSM_Hardware_Layer_Run(void)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
	static uint32_t LastTick = 0;
	uint32_t Current_Tick = sys_get_tick_ms();
 8000bce:	f000 fa99 	bl	8001104 <sys_get_tick_ms>
 8000bd2:	0003      	movs	r3, r0
 8000bd4:	60bb      	str	r3, [r7, #8]

	if(Current_Tick - LastTick < (uint32_t)5)
 8000bd6:	4ba7      	ldr	r3, [pc, #668]	; (8000e74 <GSM_Hardware_Layer_Run+0x2ac>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d800      	bhi.n	8000be4 <GSM_Hardware_Layer_Run+0x1c>
 8000be2:	e143      	b.n	8000e6c <GSM_Hardware_Layer_Run+0x2a4>
	{
		return;
	}
	uint32_t diff = sys_get_tick_ms() - m_gsm_atc.atc.Last_time_send_atc_ms;
 8000be4:	f000 fa8e 	bl	8001104 <sys_get_tick_ms>
 8000be8:	0002      	movs	r2, r0
 8000bea:	4ba3      	ldr	r3, [pc, #652]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	607b      	str	r3, [r7, #4]
	if(m_gsm_atc.atc.Timeout_atc_ms && diff >= m_gsm_atc.atc.Timeout_atc_ms)
 8000bf2:	4ba1      	ldr	r3, [pc, #644]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d049      	beq.n	8000c8e <GSM_Hardware_Layer_Run+0xc6>
 8000bfa:	4b9f      	ldr	r3, [pc, #636]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d344      	bcc.n	8000c8e <GSM_Hardware_Layer_Run+0xc6>
	{
		if(--m_gsm_atc.atc.Retry_Count_atc <= 0)
 8000c04:	4b9c      	ldr	r3, [pc, #624]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000c06:	7f1b      	ldrb	r3, [r3, #28]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b9a      	ldr	r3, [pc, #616]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000c0e:	771a      	strb	r2, [r3, #28]
 8000c10:	4b99      	ldr	r3, [pc, #612]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000c12:	7f1b      	ldrb	r3, [r3, #28]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d117      	bne.n	8000c48 <GSM_Hardware_Layer_Run+0x80>
		{
			m_gsm_atc.atc.Timeout_atc_ms = 0;
 8000c18:	4b97      	ldr	r3, [pc, #604]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
			if(m_gsm_atc.atc.Send_at_Callback != NULL)
 8000c1e:	4a96      	ldr	r2, [pc, #600]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000c20:	2390      	movs	r3, #144	; 0x90
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	58d3      	ldr	r3, [r2, r3]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d006      	beq.n	8000c38 <GSM_Hardware_Layer_Run+0x70>
			{
				m_gsm_atc.atc.Send_at_Callback(GSM_EVENT_TIMEOUT,NULL);
 8000c2a:	4a93      	ldr	r2, [pc, #588]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000c2c:	2390      	movs	r3, #144	; 0x90
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	58d3      	ldr	r3, [r2, r3]
 8000c32:	2100      	movs	r1, #0
 8000c34:	2001      	movs	r0, #1
 8000c36:	4798      	blx	r3
			}
			memset(&m_gsm_atc.atc.Recv_Buffer, 0, sizeof(m_gsm_atc.atc.Recv_Buffer));
 8000c38:	2381      	movs	r3, #129	; 0x81
 8000c3a:	005a      	lsls	r2, r3, #1
 8000c3c:	4b8f      	ldr	r3, [pc, #572]	; (8000e7c <GSM_Hardware_Layer_Run+0x2b4>)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	0018      	movs	r0, r3
 8000c42:	f003 fbd0 	bl	80043e6 <memset>
 8000c46:	e022      	b.n	8000c8e <GSM_Hardware_Layer_Run+0xc6>
		}
		else
		{
			DEBUG_INFO("Retry send ATC %d.\r\n",m_gsm_atc.atc.Retry_Count_atc);
 8000c48:	f000 fa5c 	bl	8001104 <sys_get_tick_ms>
 8000c4c:	0001      	movs	r1, r0
 8000c4e:	4b8a      	ldr	r3, [pc, #552]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000c50:	7f1b      	ldrb	r3, [r3, #28]
 8000c52:	4a8b      	ldr	r2, [pc, #556]	; (8000e80 <GSM_Hardware_Layer_Run+0x2b8>)
 8000c54:	488b      	ldr	r0, [pc, #556]	; (8000e84 <GSM_Hardware_Layer_Run+0x2bc>)
 8000c56:	f000 fc71 	bl	800153c <app_debug_rtt_raw>
			m_gsm_atc.atc.Last_time_send_atc_ms = sys_get_tick_ms();
 8000c5a:	f000 fa53 	bl	8001104 <sys_get_tick_ms>
 8000c5e:	0002      	movs	r2, r0
 8000c60:	4b85      	ldr	r3, [pc, #532]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000c62:	619a      	str	r2, [r3, #24]
			memset(&m_gsm_atc.atc.Recv_Buffer, 0, sizeof(m_gsm_atc.atc.Recv_Buffer));
 8000c64:	2381      	movs	r3, #129	; 0x81
 8000c66:	005a      	lsls	r2, r3, #1
 8000c68:	4b84      	ldr	r3, [pc, #528]	; (8000e7c <GSM_Hardware_Layer_Run+0x2b4>)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f003 fbba 	bl	80043e6 <memset>
			HAL_UART_Transmit(&huart1, (uint8_t*) m_gsm_atc.atc.cmd, strlen(m_gsm_atc.atc.cmd), 200);
 8000c72:	4b81      	ldr	r3, [pc, #516]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000c74:	681c      	ldr	r4, [r3, #0]
 8000c76:	4b80      	ldr	r3, [pc, #512]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fa44 	bl	8000108 <strlen>
 8000c80:	0003      	movs	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	4880      	ldr	r0, [pc, #512]	; (8000e88 <GSM_Hardware_Layer_Run+0x2c0>)
 8000c86:	23c8      	movs	r3, #200	; 0xc8
 8000c88:	0021      	movs	r1, r4
 8000c8a:	f002 f819 	bl	8002cc0 <HAL_UART_Transmit>
		}
	}
	RingBuffer_GetBuffer(&m_gsm_atc.atc.Recv_Buffer,&Rx_Buffer);
 8000c8e:	4a7f      	ldr	r2, [pc, #508]	; (8000e8c <GSM_Hardware_Layer_Run+0x2c4>)
 8000c90:	4b7a      	ldr	r3, [pc, #488]	; (8000e7c <GSM_Hardware_Layer_Run+0x2b4>)
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 fd08 	bl	80016aa <RingBuffer_GetBuffer>
	if(strlen(m_gsm_atc.atc.expect_resp) && strstr((char*)m_gsm_atc.atc.Recv_Buffer.u8Buffer, m_gsm_atc.atc.expect_resp))
 8000c9a:	4b77      	ldr	r3, [pc, #476]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d06a      	beq.n	8000d7a <GSM_Hardware_Layer_Run+0x1b2>
 8000ca4:	4b74      	ldr	r3, [pc, #464]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4b74      	ldr	r3, [pc, #464]	; (8000e7c <GSM_Hardware_Layer_Run+0x2b4>)
 8000caa:	0011      	movs	r1, r2
 8000cac:	0018      	movs	r0, r3
 8000cae:	f003 fc71 	bl	8004594 <strstr>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d061      	beq.n	8000d7a <GSM_Hardware_Layer_Run+0x1b2>
	{
		bool do_callback = true;
 8000cb6:	240f      	movs	r4, #15
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
		if(m_gsm_atc.atc.expected_response_at_the_end && strlen(m_gsm_atc.atc.expected_response_at_the_end))
 8000cbe:	4b6e      	ldr	r3, [pc, #440]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d03d      	beq.n	8000d42 <GSM_Hardware_Layer_Run+0x17a>
 8000cc6:	4b6c      	ldr	r3, [pc, #432]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d038      	beq.n	8000d42 <GSM_Hardware_Layer_Run+0x17a>
		{
			Expect_len_compare = strlen(m_gsm_atc.atc.expected_response_at_the_end);
 8000cd0:	4b69      	ldr	r3, [pc, #420]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff fa17 	bl	8000108 <strlen>
 8000cda:	0002      	movs	r2, r0
 8000cdc:	4b6c      	ldr	r3, [pc, #432]	; (8000e90 <GSM_Hardware_Layer_Run+0x2c8>)
 8000cde:	601a      	str	r2, [r3, #0]
			Current_Response_len = strlen((char*)m_gsm_atc.atc.Recv_Buffer.u8Buffer);
 8000ce0:	4b66      	ldr	r3, [pc, #408]	; (8000e7c <GSM_Hardware_Layer_Run+0x2b4>)
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff fa10 	bl	8000108 <strlen>
 8000ce8:	0002      	movs	r2, r0
 8000cea:	4b6a      	ldr	r3, [pc, #424]	; (8000e94 <GSM_Hardware_Layer_Run+0x2cc>)
 8000cec:	601a      	str	r2, [r3, #0]
			if(Expect_len_compare < Current_Response_len)
 8000cee:	4b68      	ldr	r3, [pc, #416]	; (8000e90 <GSM_Hardware_Layer_Run+0x2c8>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b68      	ldr	r3, [pc, #416]	; (8000e94 <GSM_Hardware_Layer_Run+0x2cc>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d21f      	bcs.n	8000d3a <GSM_Hardware_Layer_Run+0x172>
			{
				p_compare_end_str = &m_gsm_atc.atc.Recv_Buffer.u8Buffer[Current_Response_len - Expect_len_compare];
 8000cfa:	4b66      	ldr	r3, [pc, #408]	; (8000e94 <GSM_Hardware_Layer_Run+0x2cc>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4b64      	ldr	r3, [pc, #400]	; (8000e90 <GSM_Hardware_Layer_Run+0x2c8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	3318      	adds	r3, #24
 8000d06:	001a      	movs	r2, r3
 8000d08:	4b5b      	ldr	r3, [pc, #364]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000d0a:	18d3      	adds	r3, r2, r3
 8000d0c:	1d9a      	adds	r2, r3, #6
 8000d0e:	4b62      	ldr	r3, [pc, #392]	; (8000e98 <GSM_Hardware_Layer_Run+0x2d0>)
 8000d10:	601a      	str	r2, [r3, #0]
				if(memcmp(p_compare_end_str,m_gsm_atc.atc.expected_response_at_the_end,Expect_len_compare) == 0)
 8000d12:	4b61      	ldr	r3, [pc, #388]	; (8000e98 <GSM_Hardware_Layer_Run+0x2d0>)
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	4b58      	ldr	r3, [pc, #352]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000d18:	6899      	ldr	r1, [r3, #8]
 8000d1a:	4b5d      	ldr	r3, [pc, #372]	; (8000e90 <GSM_Hardware_Layer_Run+0x2c8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	001a      	movs	r2, r3
 8000d20:	f003 fb4a 	bl	80043b8 <memcmp>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d103      	bne.n	8000d30 <GSM_Hardware_Layer_Run+0x168>
				{
					// Compare thành công đuôi Response
					do_callback = true;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e008      	b.n	8000d42 <GSM_Hardware_Layer_Run+0x17a>
				}
				else
				{
					do_callback = false;
 8000d30:	230f      	movs	r3, #15
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e003      	b.n	8000d42 <GSM_Hardware_Layer_Run+0x17a>
				}
			}
			else
			{
				do_callback = false;
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
			}
		}
		if(do_callback == true)
 8000d42:	230f      	movs	r3, #15
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d100      	bne.n	8000d4e <GSM_Hardware_Layer_Run+0x186>
 8000d4c:	e087      	b.n	8000e5e <GSM_Hardware_Layer_Run+0x296>
		{
			m_gsm_atc.atc.Timeout_atc_ms = 0;
 8000d4e:	4b4a      	ldr	r3, [pc, #296]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
			m_gsm_atc.atc.Retry_Count_atc = 0;
 8000d54:	4b48      	ldr	r3, [pc, #288]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	771a      	strb	r2, [r3, #28]
			m_gsm_atc.atc.Send_at_Callback(GSM_EVENT_OK,m_gsm_atc.atc.Recv_Buffer.u8Buffer);
 8000d5a:	4a47      	ldr	r2, [pc, #284]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000d5c:	2390      	movs	r3, #144	; 0x90
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	58d3      	ldr	r3, [r2, r3]
 8000d62:	4a46      	ldr	r2, [pc, #280]	; (8000e7c <GSM_Hardware_Layer_Run+0x2b4>)
 8000d64:	0011      	movs	r1, r2
 8000d66:	2000      	movs	r0, #0
 8000d68:	4798      	blx	r3
			memset(&m_gsm_atc.atc.Recv_Buffer, 0, sizeof(m_gsm_atc.atc.Recv_Buffer));
 8000d6a:	2381      	movs	r3, #129	; 0x81
 8000d6c:	005a      	lsls	r2, r3, #1
 8000d6e:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <GSM_Hardware_Layer_Run+0x2b4>)
 8000d70:	2100      	movs	r1, #0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f003 fb37 	bl	80043e6 <memset>
	{
 8000d78:	e071      	b.n	8000e5e <GSM_Hardware_Layer_Run+0x296>
		}

	}
	else if(strlen(m_gsm_atc.atc.expect_error) && strstr((char*)m_gsm_atc.atc.Recv_Buffer.u8Buffer, m_gsm_atc.atc.expect_error))
 8000d7a:	4b3f      	ldr	r3, [pc, #252]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d06d      	beq.n	8000e60 <GSM_Hardware_Layer_Run+0x298>
 8000d84:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	4b3c      	ldr	r3, [pc, #240]	; (8000e7c <GSM_Hardware_Layer_Run+0x2b4>)
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f003 fc01 	bl	8004594 <strstr>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d064      	beq.n	8000e60 <GSM_Hardware_Layer_Run+0x298>
	{
		bool do_callback = true;
 8000d96:	240e      	movs	r4, #14
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
		if(m_gsm_atc.atc.expect_error_at_the_end && strlen(m_gsm_atc.atc.expect_error_at_the_end))
 8000d9e:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d03d      	beq.n	8000e22 <GSM_Hardware_Layer_Run+0x25a>
 8000da6:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d038      	beq.n	8000e22 <GSM_Hardware_Layer_Run+0x25a>
		{
			Expect_len_compare_error_handle = strlen(m_gsm_atc.atc.expect_error_at_the_end);
 8000db0:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff f9a7 	bl	8000108 <strlen>
 8000dba:	0002      	movs	r2, r0
 8000dbc:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <GSM_Hardware_Layer_Run+0x2d4>)
 8000dbe:	601a      	str	r2, [r3, #0]
			Current_Response_len_error_handle = strlen((char*)m_gsm_atc.atc.Recv_Buffer.u8Buffer);
 8000dc0:	4b2e      	ldr	r3, [pc, #184]	; (8000e7c <GSM_Hardware_Layer_Run+0x2b4>)
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff f9a0 	bl	8000108 <strlen>
 8000dc8:	0002      	movs	r2, r0
 8000dca:	4b35      	ldr	r3, [pc, #212]	; (8000ea0 <GSM_Hardware_Layer_Run+0x2d8>)
 8000dcc:	601a      	str	r2, [r3, #0]
			if(Expect_len_compare_error_handle < Current_Response_len_error_handle)
 8000dce:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <GSM_Hardware_Layer_Run+0x2d4>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <GSM_Hardware_Layer_Run+0x2d8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d21f      	bcs.n	8000e1a <GSM_Hardware_Layer_Run+0x252>
			{
				p_compare_end_str_error_handle = &m_gsm_atc.atc.Recv_Buffer.u8Buffer[Current_Response_len_error_handle - Expect_len_compare_error_handle];
 8000dda:	4b31      	ldr	r3, [pc, #196]	; (8000ea0 <GSM_Hardware_Layer_Run+0x2d8>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <GSM_Hardware_Layer_Run+0x2d4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	3318      	adds	r3, #24
 8000de6:	001a      	movs	r2, r3
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000dea:	18d3      	adds	r3, r2, r3
 8000dec:	1d9a      	adds	r2, r3, #6
 8000dee:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <GSM_Hardware_Layer_Run+0x2dc>)
 8000df0:	601a      	str	r2, [r3, #0]
				if(memcmp(p_compare_end_str_error_handle,m_gsm_atc.atc.expect_error_at_the_end,Expect_len_compare_error_handle))
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <GSM_Hardware_Layer_Run+0x2dc>)
 8000df4:	6818      	ldr	r0, [r3, #0]
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000df8:	6919      	ldr	r1, [r3, #16]
 8000dfa:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <GSM_Hardware_Layer_Run+0x2d4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	001a      	movs	r2, r3
 8000e00:	f003 fada 	bl	80043b8 <memcmp>
 8000e04:	1e03      	subs	r3, r0, #0
 8000e06:	d003      	beq.n	8000e10 <GSM_Hardware_Layer_Run+0x248>
				{
					// Compare thành công đuôi Response (trường hợp Response Error)
					do_callback = true;
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	e008      	b.n	8000e22 <GSM_Hardware_Layer_Run+0x25a>
				}
				else
				{
					do_callback = false;
 8000e10:	230e      	movs	r3, #14
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e003      	b.n	8000e22 <GSM_Hardware_Layer_Run+0x25a>
				}
			}
			else
			{
				do_callback = false;
 8000e1a:	230e      	movs	r3, #14
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
			}
		}
		if(do_callback == true)
 8000e22:	230e      	movs	r3, #14
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d019      	beq.n	8000e60 <GSM_Hardware_Layer_Run+0x298>
		{
			m_gsm_atc.atc.Last_time_send_atc_ms = 0;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
			m_gsm_atc.atc.Timeout_atc_ms = 0;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
			m_gsm_atc.atc.Retry_Count_atc = 0;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	771a      	strb	r2, [r3, #28]
			m_gsm_atc.atc.Send_at_Callback(GSM_EVENT_ERROR,m_gsm_atc.atc.Recv_Buffer.u8Buffer);
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <GSM_Hardware_Layer_Run+0x2b0>)
 8000e40:	2390      	movs	r3, #144	; 0x90
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	58d3      	ldr	r3, [r2, r3]
 8000e46:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <GSM_Hardware_Layer_Run+0x2b4>)
 8000e48:	0011      	movs	r1, r2
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	4798      	blx	r3
			memset(&m_gsm_atc.atc.Recv_Buffer, 0, sizeof(m_gsm_atc.atc.Recv_Buffer));
 8000e4e:	2381      	movs	r3, #129	; 0x81
 8000e50:	005a      	lsls	r2, r3, #1
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <GSM_Hardware_Layer_Run+0x2b4>)
 8000e54:	2100      	movs	r1, #0
 8000e56:	0018      	movs	r0, r3
 8000e58:	f003 fac5 	bl	80043e6 <memset>
 8000e5c:	e000      	b.n	8000e60 <GSM_Hardware_Layer_Run+0x298>
	{
 8000e5e:	46c0      	nop			; (mov r8, r8)
		}
	}
	LastTick = sys_get_tick_ms();
 8000e60:	f000 f950 	bl	8001104 <sys_get_tick_ms>
 8000e64:	0002      	movs	r2, r0
 8000e66:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <GSM_Hardware_Layer_Run+0x2ac>)
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e000      	b.n	8000e6e <GSM_Hardware_Layer_Run+0x2a6>
		return;
 8000e6c:	46c0      	nop			; (mov r8, r8)
}
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b005      	add	sp, #20
 8000e72:	bd90      	pop	{r4, r7, pc}
 8000e74:	200001d0 	.word	0x200001d0
 8000e78:	200000ac 	.word	0x200000ac
 8000e7c:	200000ca 	.word	0x200000ca
 8000e80:	08004eb0 	.word	0x08004eb0
 8000e84:	08004eb4 	.word	0x08004eb4
 8000e88:	200003a0 	.word	0x200003a0
 8000e8c:	20000438 	.word	0x20000438
 8000e90:	2000042c 	.word	0x2000042c
 8000e94:	20000430 	.word	0x20000430
 8000e98:	2000044c 	.word	0x2000044c
 8000e9c:	20000428 	.word	0x20000428
 8000ea0:	20000448 	.word	0x20000448
 8000ea4:	20000434 	.word	0x20000434

08000ea8 <GSM_Turn_on_Power>:
void GSM_Turn_on_Power(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	static uint8_t step;
	DEBUG_INFO("GSM Hard reset step %d.\r\n", step);
 8000eac:	f000 f92a 	bl	8001104 <sys_get_tick_ms>
 8000eb0:	0001      	movs	r1, r0
 8000eb2:	4b4f      	ldr	r3, [pc, #316]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4a4f      	ldr	r2, [pc, #316]	; (8000ff4 <GSM_Turn_on_Power+0x14c>)
 8000eb8:	484f      	ldr	r0, [pc, #316]	; (8000ff8 <GSM_Turn_on_Power+0x150>)
 8000eba:	f000 fb3f 	bl	800153c <app_debug_rtt_raw>
	switch (step)
 8000ebe:	4b4c      	ldr	r3, [pc, #304]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b07      	cmp	r3, #7
 8000ec4:	d900      	bls.n	8000ec8 <GSM_Turn_on_Power+0x20>
 8000ec6:	e08e      	b.n	8000fe6 <GSM_Turn_on_Power+0x13e>
 8000ec8:	009a      	lsls	r2, r3, #2
 8000eca:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <GSM_Turn_on_Power+0x154>)
 8000ecc:	18d3      	adds	r3, r2, r3
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	469f      	mov	pc, r3
	{
		case 0:
			HAL_GPIO_WritePin(EN_GSM_GPIO_Port,EN_GSM_Pin,0);
 8000ed2:	4b4b      	ldr	r3, [pc, #300]	; (8001000 <GSM_Turn_on_Power+0x158>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2140      	movs	r1, #64	; 0x40
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 ff99 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GSM_RESET_GPIO_Port,GSM_RESET_Pin,1);
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4848      	ldr	r0, [pc, #288]	; (8001004 <GSM_Turn_on_Power+0x15c>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	0019      	movs	r1, r3
 8000ee8:	f000 ff92 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GSM_PWKEY_GPIO_Port,GSM_PWKEY_Pin,0);
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	0059      	lsls	r1, r3, #1
 8000ef0:	23a0      	movs	r3, #160	; 0xa0
 8000ef2:	05db      	lsls	r3, r3, #23
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 ff8a 	bl	8001e10 <HAL_GPIO_WritePin>
			step++;
 8000efc:	4b3c      	ldr	r3, [pc, #240]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000f06:	701a      	strb	r2, [r3, #0]
			break;
 8000f08:	e06e      	b.n	8000fe8 <GSM_Turn_on_Power+0x140>
		case 1:
			HAL_GPIO_WritePin(GSM_RESET_GPIO_Port,GSM_RESET_Pin,0);
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	483d      	ldr	r0, [pc, #244]	; (8001004 <GSM_Turn_on_Power+0x15c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	0019      	movs	r1, r3
 8000f14:	f000 ff7c 	bl	8001e10 <HAL_GPIO_WritePin>
			DEBUG_INFO("GSM turn on Power!\r\n");
 8000f18:	f000 f8f4 	bl	8001104 <sys_get_tick_ms>
 8000f1c:	0001      	movs	r1, r0
 8000f1e:	4a35      	ldr	r2, [pc, #212]	; (8000ff4 <GSM_Turn_on_Power+0x14c>)
 8000f20:	4b39      	ldr	r3, [pc, #228]	; (8001008 <GSM_Turn_on_Power+0x160>)
 8000f22:	0018      	movs	r0, r3
 8000f24:	f000 fb0a 	bl	800153c <app_debug_rtt_raw>
			HAL_GPIO_WritePin(EN_GSM_GPIO_Port,EN_GSM_Pin,1);
 8000f28:	4b35      	ldr	r3, [pc, #212]	; (8001000 <GSM_Turn_on_Power+0x158>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2140      	movs	r1, #64	; 0x40
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f000 ff6e 	bl	8001e10 <HAL_GPIO_WritePin>
			// Enable nguon 4.2V
			HAL_GPIO_WritePin(GSM_EN_GPIO_Port,GSM_EN_Pin,1);
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	0219      	lsls	r1, r3, #8
 8000f38:	23a0      	movs	r3, #160	; 0xa0
 8000f3a:	05db      	lsls	r3, r3, #23
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 ff66 	bl	8001e10 <HAL_GPIO_WritePin>
			step++;
 8000f44:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000f4e:	701a      	strb	r2, [r3, #0]
			break;
 8000f50:	e04a      	b.n	8000fe8 <GSM_Turn_on_Power+0x140>
		case 2:
			step++;
 8000f52:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000f5c:	701a      	strb	r2, [r3, #0]
			break;
 8000f5e:	e043      	b.n	8000fe8 <GSM_Turn_on_Power+0x140>
		case 3: 
			/* Generate pulse from (1-0-1) |_| to Power On module */
			DEBUG_INFO("Pulse power key.\r\n");
 8000f60:	f000 f8d0 	bl	8001104 <sys_get_tick_ms>
 8000f64:	0001      	movs	r1, r0
 8000f66:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <GSM_Turn_on_Power+0x14c>)
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <GSM_Turn_on_Power+0x164>)
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f000 fae6 	bl	800153c <app_debug_rtt_raw>
			HAL_GPIO_WritePin(GSM_PWKEY_GPIO_Port,GSM_PWKEY_Pin,1);
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	0059      	lsls	r1, r3, #1
 8000f74:	23a0      	movs	r3, #160	; 0xa0
 8000f76:	05db      	lsls	r3, r3, #23
 8000f78:	2201      	movs	r2, #1
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 ff48 	bl	8001e10 <HAL_GPIO_WritePin>
			step++;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000f8a:	701a      	strb	r2, [r3, #0]
			break;
 8000f8c:	e02c      	b.n	8000fe8 <GSM_Turn_on_Power+0x140>
		case 4:
			HAL_GPIO_WritePin(GSM_PWKEY_GPIO_Port,GSM_PWKEY_Pin,0);
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	0059      	lsls	r1, r3, #1
 8000f92:	23a0      	movs	r3, #160	; 0xa0
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	2200      	movs	r2, #0
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f000 ff39 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GSM_RESET_GPIO_Port,GSM_RESET_Pin,0);
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4818      	ldr	r0, [pc, #96]	; (8001004 <GSM_Turn_on_Power+0x15c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	f000 ff32 	bl	8001e10 <HAL_GPIO_WritePin>
			step++;
 8000fac:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000fb6:	701a      	strb	r2, [r3, #0]
			break;
 8000fb8:	e016      	b.n	8000fe8 <GSM_Turn_on_Power+0x140>
		case 5:
		case 6:
			step++;
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000fc4:	701a      	strb	r2, [r3, #0]
			break;
 8000fc6:	e00f      	b.n	8000fe8 <GSM_Turn_on_Power+0x140>
		case 7:
			step = 0;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <GSM_Turn_on_Power+0x148>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
			DEBUG_INFO("GSM Hard reset DONE.\r\n");
 8000fce:	f000 f899 	bl	8001104 <sys_get_tick_ms>
 8000fd2:	0001      	movs	r1, r0
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <GSM_Turn_on_Power+0x14c>)
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <GSM_Turn_on_Power+0x168>)
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f000 faaf 	bl	800153c <app_debug_rtt_raw>
			GSM_Manager_ChangeState(GSM_STATE_POWER_ON); // GSM turn on Power Finish-> active GSM by AT Cmd
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fdcc 	bl	8000b7c <GSM_Manager_ChangeState>
			break;
 8000fe4:	e000      	b.n	8000fe8 <GSM_Turn_on_Power+0x140>
		default:
		break;
 8000fe6:	46c0      	nop			; (mov r8, r8)
	}
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	200001d4 	.word	0x200001d4
 8000ff4:	08004eb0 	.word	0x08004eb0
 8000ff8:	08004ee4 	.word	0x08004ee4
 8000ffc:	08005340 	.word	0x08005340
 8001000:	50000800 	.word	0x50000800
 8001004:	50000400 	.word	0x50000400
 8001008:	08004f18 	.word	0x08004f18
 800100c:	08004f48 	.word	0x08004f48
 8001010:	08004f74 	.word	0x08004f74

08001014 <GSM_SendCommand_AT>:
void GSM_SendCommand_AT (GSM_ATCommand_Table_TypDef AT_Cmd)
{
 8001014:	b084      	sub	sp, #16
 8001016:	b5b0      	push	{r4, r5, r7, lr}
 8001018:	af00      	add	r7, sp, #0
 800101a:	2510      	movs	r5, #16
 800101c:	197c      	adds	r4, r7, r5
 800101e:	6020      	str	r0, [r4, #0]
 8001020:	6061      	str	r1, [r4, #4]
 8001022:	60a2      	str	r2, [r4, #8]
 8001024:	60e3      	str	r3, [r4, #12]
	if(AT_Cmd.Timeout_atc_ms == 0 || AT_Cmd.Send_at_Callback == NULL)
 8001026:	002a      	movs	r2, r5
 8001028:	18bb      	adds	r3, r7, r2
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <GSM_SendCommand_AT+0x24>
 8001030:	18bb      	adds	r3, r7, r2
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d116      	bne.n	8001066 <GSM_SendCommand_AT+0x52>
	{
		memset(&m_gsm_atc.atc.Recv_Buffer, 0, sizeof(m_gsm_atc.atc.Recv_Buffer));
 8001038:	2381      	movs	r3, #129	; 0x81
 800103a:	005a      	lsls	r2, r3, #1
 800103c:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <GSM_SendCommand_AT+0xe4>)
 800103e:	2100      	movs	r1, #0
 8001040:	0018      	movs	r0, r3
 8001042:	f003 f9d0 	bl	80043e6 <memset>
		HAL_UART_Transmit(&huart1, (uint8_t *)AT_Cmd.cmd, strlen(AT_Cmd.cmd), 200);
 8001046:	2210      	movs	r2, #16
 8001048:	18bb      	adds	r3, r7, r2
 800104a:	681c      	ldr	r4, [r3, #0]
 800104c:	18bb      	adds	r3, r7, r2
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff f859 	bl	8000108 <strlen>
 8001056:	0003      	movs	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	4828      	ldr	r0, [pc, #160]	; (80010fc <GSM_SendCommand_AT+0xe8>)
 800105c:	23c8      	movs	r3, #200	; 0xc8
 800105e:	0021      	movs	r1, r4
 8001060:	f001 fe2e 	bl	8002cc0 <HAL_UART_Transmit>
		return;
 8001064:	e042      	b.n	80010ec <GSM_SendCommand_AT+0xd8>
	}
	if(strlen(AT_Cmd.cmd) < 64)
 8001066:	2410      	movs	r4, #16
 8001068:	193b      	adds	r3, r7, r4
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff f84b 	bl	8000108 <strlen>
	{

	}
	m_gsm_atc.atc.cmd = AT_Cmd.cmd;
 8001072:	193b      	adds	r3, r7, r4
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <GSM_SendCommand_AT+0xec>)
 8001078:	601a      	str	r2, [r3, #0]
	m_gsm_atc.atc.expect_resp = AT_Cmd.expect_resp;
 800107a:	193b      	adds	r3, r7, r4
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <GSM_SendCommand_AT+0xec>)
 8001080:	605a      	str	r2, [r3, #4]
	m_gsm_atc.atc.expected_response_at_the_end = AT_Cmd.expected_response_at_the_end;
 8001082:	193b      	adds	r3, r7, r4
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <GSM_SendCommand_AT+0xec>)
 8001088:	609a      	str	r2, [r3, #8]
	m_gsm_atc.atc.expect_error = AT_Cmd.expect_error;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <GSM_SendCommand_AT+0xec>)
 8001090:	60da      	str	r2, [r3, #12]
	m_gsm_atc.atc.expect_error_at_the_end = AT_Cmd.expect_error_at_the_end;
 8001092:	193b      	adds	r3, r7, r4
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <GSM_SendCommand_AT+0xec>)
 8001098:	611a      	str	r2, [r3, #16]
	m_gsm_atc.atc.Timeout_atc_ms = AT_Cmd.Timeout_atc_ms;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	695a      	ldr	r2, [r3, #20]
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <GSM_SendCommand_AT+0xec>)
 80010a0:	615a      	str	r2, [r3, #20]
	m_gsm_atc.atc.Last_time_send_atc_ms = sys_get_tick_ms();
 80010a2:	f000 f82f 	bl	8001104 <sys_get_tick_ms>
 80010a6:	0002      	movs	r2, r0
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <GSM_SendCommand_AT+0xec>)
 80010aa:	619a      	str	r2, [r3, #24]
	m_gsm_atc.atc.Retry_Count_atc = AT_Cmd.Retry_Count_atc;
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	7e1a      	ldrb	r2, [r3, #24]
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <GSM_SendCommand_AT+0xec>)
 80010b2:	771a      	strb	r2, [r3, #28]
	m_gsm_atc.atc.Send_at_Callback = AT_Cmd.Send_at_Callback;
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	69d9      	ldr	r1, [r3, #28]
 80010b8:	4a11      	ldr	r2, [pc, #68]	; (8001100 <GSM_SendCommand_AT+0xec>)
 80010ba:	2390      	movs	r3, #144	; 0x90
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	50d1      	str	r1, [r2, r3]

	memset(&m_gsm_atc.atc.Recv_Buffer, 0, sizeof(m_gsm_atc.atc.Recv_Buffer));
 80010c0:	2381      	movs	r3, #129	; 0x81
 80010c2:	005a      	lsls	r2, r3, #1
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <GSM_SendCommand_AT+0xe4>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	0018      	movs	r0, r3
 80010ca:	f003 f98c 	bl	80043e6 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t *)AT_Cmd.cmd, strlen(AT_Cmd.cmd), 200);
 80010ce:	0022      	movs	r2, r4
 80010d0:	18bb      	adds	r3, r7, r2
 80010d2:	681c      	ldr	r4, [r3, #0]
 80010d4:	18bb      	adds	r3, r7, r2
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff f815 	bl	8000108 <strlen>
 80010de:	0003      	movs	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <GSM_SendCommand_AT+0xe8>)
 80010e4:	23c8      	movs	r3, #200	; 0xc8
 80010e6:	0021      	movs	r1, r4
 80010e8:	f001 fdea 	bl	8002cc0 <HAL_UART_Transmit>

}
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bcb0      	pop	{r4, r5, r7}
 80010f0:	bc08      	pop	{r3}
 80010f2:	b004      	add	sp, #16
 80010f4:	4718      	bx	r3
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	200000ca 	.word	0x200000ca
 80010fc:	200003a0 	.word	0x200003a0
 8001100:	200000ac 	.word	0x200000ac

08001104 <sys_get_tick_ms>:
uint32_t sys_get_tick_ms(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8001108:	f000 fb94 	bl	8001834 <HAL_GetTick>
 800110c:	0003      	movs	r3, r0
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <GSM_Utilities_Get_IMEI>:
#include "gsm_utilities.h"

void GSM_Utilities_Get_IMEI(uint8_t *recv_Buffer, uint8_t* IMEI_Buffer, uint8_t Max_IMEI_Length)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	701a      	strb	r2, [r3, #0]
    int IMEI_Index = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
    for(int CountByte = 0; CountByte < strlen((char*)recv_Buffer); CountByte++)
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	e025      	b.n	8001178 <GSM_Utilities_Get_IMEI+0x64>
    {
        if((recv_Buffer[CountByte] >= '0') && (recv_Buffer[CountByte] <= '9'))
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	18d3      	adds	r3, r2, r3
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b2f      	cmp	r3, #47	; 0x2f
 8001136:	d91c      	bls.n	8001172 <GSM_Utilities_Get_IMEI+0x5e>
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	18d3      	adds	r3, r2, r3
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b39      	cmp	r3, #57	; 0x39
 8001142:	d816      	bhi.n	8001172 <GSM_Utilities_Get_IMEI+0x5e>
        {
            if(IMEI_Index < Max_IMEI_Length)
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	429a      	cmp	r2, r3
 800114c:	da0b      	bge.n	8001166 <GSM_Utilities_Get_IMEI+0x52>
            {
                IMEI_Buffer[IMEI_Index++] = recv_Buffer[CountByte];
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	18d2      	adds	r2, r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	1c59      	adds	r1, r3, #1
 8001158:	6179      	str	r1, [r7, #20]
 800115a:	0019      	movs	r1, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	185b      	adds	r3, r3, r1
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e005      	b.n	8001172 <GSM_Utilities_Get_IMEI+0x5e>
            }
            else
            {
                IMEI_Buffer[IMEI_Index] = 0;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	18d3      	adds	r3, r2, r3
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
                break;
 8001170:	e00a      	b.n	8001188 <GSM_Utilities_Get_IMEI+0x74>
    for(int CountByte = 0; CountByte < strlen((char*)recv_Buffer); CountByte++)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	3301      	adds	r3, #1
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	0018      	movs	r0, r3
 800117c:	f7fe ffc4 	bl	8000108 <strlen>
 8001180:	0002      	movs	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8d1      	bhi.n	800112c <GSM_Utilities_Get_IMEI+0x18>
            }
        }
    }
    IMEI_Buffer[IMEI_Index] = 0;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	18d3      	adds	r3, r2, r3
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b006      	add	sp, #24
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <DEBUG_PrintResult_ATC>:
        DEBUG_INFO("%c",(char)Buffer[Count]);
    }
    DEBUG_INFO("\r\n");
}
void DEBUG_PrintResult_ATC(char* cmd, char* result)
{
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b094      	sub	sp, #80	; 0x50
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    // In ket qua: "AT cmd: OK/FAIL " trong debug
    char sub_cmd[64] = "";
 80011a6:	2408      	movs	r4, #8
 80011a8:	193b      	adds	r3, r7, r4
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	3304      	adds	r3, #4
 80011b0:	223c      	movs	r2, #60	; 0x3c
 80011b2:	2100      	movs	r1, #0
 80011b4:	0018      	movs	r0, r3
 80011b6:	f003 f916 	bl	80043e6 <memset>
    strncpy(sub_cmd, cmd + 0, strlen(cmd) - 2);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	0018      	movs	r0, r3
 80011be:	f7fe ffa3 	bl	8000108 <strlen>
 80011c2:	0003      	movs	r3, r0
 80011c4:	1e9a      	subs	r2, r3, #2
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	0025      	movs	r5, r4
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	0018      	movs	r0, r3
 80011ce:	f003 f9cd 	bl	800456c <strncpy>
    DEBUG_INFO("%s : %s\r\n", sub_cmd, result);
 80011d2:	f7ff ff97 	bl	8001104 <sys_get_tick_ms>
 80011d6:	0004      	movs	r4, r0
 80011d8:	1979      	adds	r1, r7, r5
 80011da:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <DEBUG_PrintResult_ATC+0x58>)
 80011dc:	4806      	ldr	r0, [pc, #24]	; (80011f8 <DEBUG_PrintResult_ATC+0x5c>)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	000b      	movs	r3, r1
 80011e4:	0021      	movs	r1, r4
 80011e6:	f000 f9a9 	bl	800153c <app_debug_rtt_raw>
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b012      	add	sp, #72	; 0x48
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	08004fa4 	.word	0x08004fa4
 80011f8:	08004fe0 	.word	0x08004fe0

080011fc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <_DoInit+0x90>)
 8001204:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <_DoInit+0x94>)
 8001216:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <_DoInit+0x98>)
 800121c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	0052      	lsls	r2, r2, #1
 8001224:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <_DoInit+0x94>)
 800123c:	631a      	str	r2, [r3, #48]	; 0x30
  p->aDown[0].pBuffer       = _acDownBuffer;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a15      	ldr	r2, [pc, #84]	; (8001298 <_DoInit+0x9c>)
 8001242:	635a      	str	r2, [r3, #52]	; 0x34
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2240      	movs	r2, #64	; 0x40
 8001248:	639a      	str	r2, [r3, #56]	; 0x38
  p->aDown[0].RdOff         = 0u;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	641a      	str	r2, [r3, #64]	; 0x40
  p->aDown[0].WrOff         = 0u;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	63da      	str	r2, [r3, #60]	; 0x3c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	645a      	str	r2, [r3, #68]	; 0x44
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	1dda      	adds	r2, r3, #7
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <_DoInit+0xa0>)
 8001262:	0010      	movs	r0, r2
 8001264:	0019      	movs	r1, r3
 8001266:	2304      	movs	r3, #4
 8001268:	001a      	movs	r2, r3
 800126a:	f003 f8b3 	bl	80043d4 <memcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <_DoInit+0xa4>)
 8001272:	0010      	movs	r0, r2
 8001274:	0019      	movs	r1, r3
 8001276:	2307      	movs	r3, #7
 8001278:	001a      	movs	r2, r3
 800127a:	f003 f8ab 	bl	80043d4 <memcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2220      	movs	r2, #32
 8001282:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000450 	.word	0x20000450
 8001290:	08005004 	.word	0x08005004
 8001294:	200001d8 	.word	0x200001d8
 8001298:	200002d8 	.word	0x200002d8
 800129c:	08005010 	.word	0x08005010
 80012a0:	08005014 	.word	0x08005014

080012a4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d905      	bls.n	80012d4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	3b01      	subs	r3, #1
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
 80012d2:	e007      	b.n	80012e4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	69b9      	ldr	r1, [r7, #24]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	1acb      	subs	r3, r1, r3
 80012de:	18d3      	adds	r3, r2, r3
 80012e0:	3b01      	subs	r3, #1
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	1ad2      	subs	r2, r2, r3
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d900      	bls.n	80012f4 <_WriteBlocking+0x50>
 80012f2:	0013      	movs	r3, r2
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80012f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d900      	bls.n	8001300 <_WriteBlocking+0x5c>
 80012fe:	0013      	movs	r3, r2
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	18d3      	adds	r3, r2, r3
 800130a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800130c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	0018      	movs	r0, r3
 8001314:	f003 f85e 	bl	80043d4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001318:	6a3a      	ldr	r2, [r7, #32]
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	18d3      	adds	r3, r2, r3
 800131e:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	18d3      	adds	r3, r2, r3
 8001326:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	18d3      	adds	r3, r2, r3
 8001336:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	429a      	cmp	r2, r3
 8001340:	d101      	bne.n	8001346 <_WriteBlocking+0xa2>
      WrOff = 0u;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1b3      	bne.n	80012ba <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001352:	6a3b      	ldr	r3, [r7, #32]
}
 8001354:	0018      	movs	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	b00a      	add	sp, #40	; 0x28
 800135a:	bd80      	pop	{r7, pc}

0800135c <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	429a      	cmp	r2, r3
 800137e:	d910      	bls.n	80013a2 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	18d3      	adds	r3, r2, r3
 8001388:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	0018      	movs	r0, r3
 8001392:	f003 f81f 	bl	80043d4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	18d2      	adds	r2, r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80013a0:	e01e      	b.n	80013e0 <_WriteNoCheck+0x84>
    NumBytesAtOnce = Rem;
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	18d3      	adds	r3, r2, r3
 80013ae:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	68b9      	ldr	r1, [r7, #8]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	0018      	movs	r0, r3
 80013b8:	f003 f80c 	bl	80043d4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	18d1      	adds	r1, r2, r3
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f002 fffd 	bl	80043d4 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	60da      	str	r2, [r3, #12]
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b008      	add	sp, #32
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d808      	bhi.n	8001416 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad2      	subs	r2, r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	18d3      	adds	r3, r2, r3
 8001410:	3b01      	subs	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e004      	b.n	8001420 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	3b01      	subs	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001420:	697b      	ldr	r3, [r7, #20]
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b006      	add	sp, #24
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	0013      	movs	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	189b      	adds	r3, r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <SEGGER_RTT_WriteNoLock+0xac>)
 800144a:	189b      	adds	r3, r3, r2
 800144c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d02e      	beq.n	80014b4 <SEGGER_RTT_WriteNoLock+0x88>
 8001456:	d836      	bhi.n	80014c6 <SEGGER_RTT_WriteNoLock+0x9a>
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <SEGGER_RTT_WriteNoLock+0x36>
 800145c:	2b01      	cmp	r3, #1
 800145e:	d016      	beq.n	800148e <SEGGER_RTT_WriteNoLock+0x62>
 8001460:	e031      	b.n	80014c6 <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	0018      	movs	r0, r3
 8001466:	f7ff ffbf 	bl	80013e8 <_GetAvailWriteSpace>
 800146a:	0003      	movs	r3, r0
 800146c:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d202      	bcs.n	800147c <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800147a:	e027      	b.n	80014cc <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	69b9      	ldr	r1, [r7, #24]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff ff68 	bl	800135c <_WriteNoCheck>
    break;
 800148c:	e01e      	b.n	80014cc <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff ffa9 	bl	80013e8 <_GetAvailWriteSpace>
 8001496:	0003      	movs	r3, r0
 8001498:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4293      	cmp	r3, r2
 80014a0:	d900      	bls.n	80014a4 <SEGGER_RTT_WriteNoLock+0x78>
 80014a2:	0013      	movs	r3, r2
 80014a4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	69b9      	ldr	r1, [r7, #24]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff ff55 	bl	800135c <_WriteNoCheck>
    break;
 80014b2:	e00b      	b.n	80014cc <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	69b9      	ldr	r1, [r7, #24]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	0018      	movs	r0, r3
 80014bc:	f7ff fef2 	bl	80012a4 <_WriteBlocking>
 80014c0:	0003      	movs	r3, r0
 80014c2:	61fb      	str	r3, [r7, #28]
    break;
 80014c4:	e002      	b.n	80014cc <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    break;
 80014ca:	46c0      	nop			; (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 80014cc:	69fb      	ldr	r3, [r7, #28]
}
 80014ce:	0018      	movs	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b008      	add	sp, #32
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	20000450 	.word	0x20000450

080014dc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <SEGGER_RTT_Write+0x4c>)
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <SEGGER_RTT_Write+0x1e>
 80014f6:	f7ff fe81 	bl	80011fc <_DoInit>
  SEGGER_RTT_LOCK();
 80014fa:	f3ef 8310 	mrs	r3, PRIMASK
 80014fe:	2101      	movs	r1, #1
 8001500:	f381 8810 	msr	PRIMASK, r1
 8001504:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	0018      	movs	r0, r3
 800150e:	f7ff ff8d 	bl	800142c <SEGGER_RTT_WriteNoLock>
 8001512:	0003      	movs	r3, r0
 8001514:	617b      	str	r3, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f383 8810 	msr	PRIMASK, r3
  return Status;
 800151c:	697b      	ldr	r3, [r7, #20]
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b008      	add	sp, #32
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	20000450 	.word	0x20000450

0800152c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  _DoInit();
 8001530:	f7ff fe64 	bl	80011fc <_DoInit>
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <app_debug_rtt_raw>:
    
    return n;
}

int32_t app_debug_rtt_raw(const char *fmt,...)
{
 800153c:	b40f      	push	{r0, r1, r2, r3}
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
    int32_t     n;

    char *p = &m_debug_buffer[0];
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <app_debug_rtt_raw+0x60>)
 8001546:	60fb      	str	r3, [r7, #12]
    int32_t size = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	60bb      	str	r3, [r7, #8]
    va_list args;

    va_start (args, fmt);
 800154c:	231c      	movs	r3, #28
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	603b      	str	r3, [r7, #0]
    n = vsnprintf(p, size, fmt, args);
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f003 f85d 	bl	8004618 <vsniprintf>
 800155e:	0003      	movs	r3, r0
 8001560:	607b      	str	r3, [r7, #4]
    if (n > (int)size) 
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	429a      	cmp	r2, r3
 8001568:	dd06      	ble.n	8001578 <app_debug_rtt_raw+0x3c>
    {
        SEGGER_RTT_Write(0, m_debug_buffer, size);
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <app_debug_rtt_raw+0x60>)
 800156e:	0019      	movs	r1, r3
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff ffb3 	bl	80014dc <SEGGER_RTT_Write>
 8001576:	e008      	b.n	800158a <app_debug_rtt_raw+0x4e>
    } 
    else if (n > 0) 
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	dd05      	ble.n	800158a <app_debug_rtt_raw+0x4e>
    {
        SEGGER_RTT_Write(0, m_debug_buffer, n);
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <app_debug_rtt_raw+0x60>)
 8001582:	0019      	movs	r1, r3
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff ffa9 	bl	80014dc <SEGGER_RTT_Write>
    }
    va_end(args);
    
    return n;
 800158a:	687b      	ldr	r3, [r7, #4]
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	b004      	add	sp, #16
 8001592:	bc80      	pop	{r7}
 8001594:	bc08      	pop	{r3}
 8001596:	b004      	add	sp, #16
 8001598:	4718      	bx	r3
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	20000318 	.word	0x20000318

080015a0 <RingBuffer_Init>:
#include "ringbuffer.h"


void RingBuffer_Init(RingBuffer_Types* ringbuffer, int BufferSize)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    ringbuffer->BufferSize = BufferSize;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	601a      	str	r2, [r3, #0]
    ringbuffer->Head = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	605a      	str	r2, [r3, #4]
    ringbuffer->Tail = 0;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
    ringbuffer->u8Buffer = (uint8_t*)malloc(BufferSize*sizeof(uint8_t));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	0018      	movs	r0, r3
 80015c0:	f002 fef0 	bl	80043a4 <malloc>
 80015c4:	0003      	movs	r3, r0
 80015c6:	001a      	movs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	60da      	str	r2, [r3, #12]
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b002      	add	sp, #8
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <RingBuffer_Push>:

// Day 1 Byte vào RingBuffer
uint8_t RingBuffer_Push(RingBuffer_Types* ringbuffer, uint8_t BytePush)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	000a      	movs	r2, r1
 80015de:	1cfb      	adds	r3, r7, #3
 80015e0:	701a      	strb	r2, [r3, #0]
    if((ringbuffer->Head - ringbuffer->Tail == (ringbuffer->BufferSize - 1))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d009      	beq.n	800160a <RingBuffer_Push+0x36>
       || (ringbuffer->Tail - ringbuffer->Head == (ringbuffer->BufferSize - 1)))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	1ad2      	subs	r2, r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3b01      	subs	r3, #1
 8001606:	429a      	cmp	r2, r3
 8001608:	d101      	bne.n	800160e <RingBuffer_Push+0x3a>
       {
        return E_NOT_OK; // return E_NOT_OK khi bo nho Full
 800160a:	2300      	movs	r3, #0
 800160c:	e018      	b.n	8001640 <RingBuffer_Push+0x6c>
       }
    ringbuffer->u8Buffer[ringbuffer->Head] = BytePush;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	18d3      	adds	r3, r2, r3
 8001618:	1cfa      	adds	r2, r7, #3
 800161a:	7812      	ldrb	r2, [r2, #0]
 800161c:	701a      	strb	r2, [r3, #0]
    if(ringbuffer->Head == (ringbuffer->BufferSize - 1))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3b01      	subs	r3, #1
 8001628:	429a      	cmp	r2, r3
 800162a:	d103      	bne.n	8001634 <RingBuffer_Push+0x60>
    {
        ringbuffer->Head = 0;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	e004      	b.n	800163e <RingBuffer_Push+0x6a>
    }
    else
    {
        ringbuffer->Head += 1;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	605a      	str	r2, [r3, #4]
    }
    return E_OK;
 800163e:	2301      	movs	r3, #1
}
 8001640:	0018      	movs	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	b002      	add	sp, #8
 8001646:	bd80      	pop	{r7, pc}

08001648 <RingBuffer_Pop>:

// Doc 1 byte tư RingBuffer
uint8_t RingBuffer_Pop(RingBuffer_Types* ringbuffer)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
    uint8_t BytePush = 0;
 8001650:	210f      	movs	r1, #15
 8001652:	187b      	adds	r3, r7, r1
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
    if(ringbuffer->Head == ringbuffer->Tail)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	429a      	cmp	r2, r3
 8001662:	d102      	bne.n	800166a <RingBuffer_Pop+0x22>
    {
        return BytePush; // Return Null khi bo nho Empty
 8001664:	187b      	adds	r3, r7, r1
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	e01b      	b.n	80016a2 <RingBuffer_Pop+0x5a>
    }
    BytePush = ringbuffer->u8Buffer[ringbuffer->Tail];
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	18d2      	adds	r2, r2, r3
 8001674:	230f      	movs	r3, #15
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	7812      	ldrb	r2, [r2, #0]
 800167a:	701a      	strb	r2, [r3, #0]
    if(ringbuffer->Tail == (ringbuffer->BufferSize - 1))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3b01      	subs	r3, #1
 8001686:	429a      	cmp	r2, r3
 8001688:	d103      	bne.n	8001692 <RingBuffer_Pop+0x4a>
    {
        ringbuffer->Tail = 0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	e004      	b.n	800169c <RingBuffer_Pop+0x54>
    }
    else
    {
        ringbuffer->Tail += 1;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	609a      	str	r2, [r3, #8]
    }
    return BytePush;
 800169c:	230f      	movs	r3, #15
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	781b      	ldrb	r3, [r3, #0]
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b004      	add	sp, #16
 80016a8:	bd80      	pop	{r7, pc}

080016aa <RingBuffer_GetBuffer>:
// Doc toan bo du lieu trong RingBuffer gán vào return Buffer
void RingBuffer_GetBuffer(GSM_atc_Buffer_TypDef* retBuffer, RingBuffer_Types* ringbuffer)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
    int Num_Elements = RingBuffer_GetNumberElements(ringbuffer);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	0018      	movs	r0, r3
 80016b8:	f000 f834 	bl	8001724 <RingBuffer_GetNumberElements>
 80016bc:	0003      	movs	r3, r0
 80016be:	60bb      	str	r3, [r7, #8]
    if(Num_Elements == 0)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d02a      	beq.n	800171c <RingBuffer_GetBuffer+0x72>
    {
    	return;
    }
    for(int CountByte = retBuffer->index; CountByte < retBuffer->index + Num_Elements; CountByte ++)
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	5ad3      	ldrh	r3, [r2, r3]
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e00d      	b.n	80016ee <RingBuffer_GetBuffer+0x44>
    {
        retBuffer->u8Buffer[CountByte] = RingBuffer_Pop(ringbuffer);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff ffb7 	bl	8001648 <RingBuffer_Pop>
 80016da:	0003      	movs	r3, r0
 80016dc:	0019      	movs	r1, r3
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	18d3      	adds	r3, r2, r3
 80016e4:	1c0a      	adds	r2, r1, #0
 80016e6:	701a      	strb	r2, [r3, #0]
    for(int CountByte = retBuffer->index; CountByte < retBuffer->index + Num_Elements; CountByte ++)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3301      	adds	r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	5ad3      	ldrh	r3, [r2, r3]
 80016f6:	001a      	movs	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	18d3      	adds	r3, r2, r3
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	429a      	cmp	r2, r3
 8001700:	dbe7      	blt.n	80016d2 <RingBuffer_GetBuffer+0x28>
    }
    retBuffer->index += Num_Elements;
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	5ad2      	ldrh	r2, [r2, r3]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	b29b      	uxth	r3, r3
 800170e:	18d3      	adds	r3, r2, r3
 8001710:	b299      	uxth	r1, r3
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	52d1      	strh	r1, [r2, r3]
 800171a:	e000      	b.n	800171e <RingBuffer_GetBuffer+0x74>
    	return;
 800171c:	46c0      	nop			; (mov r8, r8)
}
 800171e:	46bd      	mov	sp, r7
 8001720:	b004      	add	sp, #16
 8001722:	bd80      	pop	{r7, pc}

08001724 <RingBuffer_GetNumberElements>:

// Lay tong so byte du lieu trong RingBuffer
int RingBuffer_GetNumberElements(RingBuffer_Types* ringbuffer)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    int Num_Element = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
    if (ringbuffer->Head >= ringbuffer->Tail)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	429a      	cmp	r2, r3
 800173a:	db06      	blt.n	800174a <RingBuffer_GetNumberElements+0x26>
    {
        Num_Element = ringbuffer->Head - ringbuffer->Tail;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e008      	b.n	800175c <RingBuffer_GetNumberElements+0x38>
    }
    else
    {
        Num_Element = ringbuffer->BufferSize - ringbuffer->Tail + ringbuffer->Head;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	1ad2      	subs	r2, r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	18d3      	adds	r3, r2, r3
 800175a:	60fb      	str	r3, [r7, #12]
    }
    return Num_Element;
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_Init+0x3c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_Init+0x3c>)
 800177a:	2140      	movs	r1, #64	; 0x40
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001780:	2003      	movs	r0, #3
 8001782:	f000 f811 	bl	80017a8 <HAL_InitTick>
 8001786:	1e03      	subs	r3, r0, #0
 8001788:	d003      	beq.n	8001792 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e001      	b.n	8001796 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001792:	f7fe ffdf 	bl	8000754 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	781b      	ldrb	r3, [r3, #0]
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b002      	add	sp, #8
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	40022000 	.word	0x40022000

080017a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_InitTick+0x5c>)
 80017b2:	681c      	ldr	r4, [r3, #0]
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_InitTick+0x60>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	0019      	movs	r1, r3
 80017ba:	23fa      	movs	r3, #250	; 0xfa
 80017bc:	0098      	lsls	r0, r3, #2
 80017be:	f7fe fcb5 	bl	800012c <__udivsi3>
 80017c2:	0003      	movs	r3, r0
 80017c4:	0019      	movs	r1, r3
 80017c6:	0020      	movs	r0, r4
 80017c8:	f7fe fcb0 	bl	800012c <__udivsi3>
 80017cc:	0003      	movs	r3, r0
 80017ce:	0018      	movs	r0, r3
 80017d0:	f000 f90b 	bl	80019ea <HAL_SYSTICK_Config>
 80017d4:	1e03      	subs	r3, r0, #0
 80017d6:	d001      	beq.n	80017dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e00f      	b.n	80017fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d80b      	bhi.n	80017fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	2301      	movs	r3, #1
 80017e6:	425b      	negs	r3, r3
 80017e8:	2200      	movs	r2, #0
 80017ea:	0018      	movs	r0, r3
 80017ec:	f000 f8d8 	bl	80019a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_InitTick+0x64>)
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b003      	add	sp, #12
 8001802:	bd90      	pop	{r4, r7, pc}
 8001804:	20000000 	.word	0x20000000
 8001808:	20000008 	.word	0x20000008
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_IncTick+0x1c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	001a      	movs	r2, r3
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x20>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	18d2      	adds	r2, r2, r3
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_IncTick+0x20>)
 8001822:	601a      	str	r2, [r3, #0]
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	20000008 	.word	0x20000008
 8001830:	20000498 	.word	0x20000498

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <HAL_GetTick+0x10>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	20000498 	.word	0x20000498

08001848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	0002      	movs	r2, r0
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001854:	1dfb      	adds	r3, r7, #7
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b7f      	cmp	r3, #127	; 0x7f
 800185a:	d809      	bhi.n	8001870 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185c:	1dfb      	adds	r3, r7, #7
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	001a      	movs	r2, r3
 8001862:	231f      	movs	r3, #31
 8001864:	401a      	ands	r2, r3
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <__NVIC_EnableIRQ+0x30>)
 8001868:	2101      	movs	r1, #1
 800186a:	4091      	lsls	r1, r2
 800186c:	000a      	movs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
  }
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	0002      	movs	r2, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b7f      	cmp	r3, #127	; 0x7f
 8001890:	d828      	bhi.n	80018e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001892:	4a2f      	ldr	r2, [pc, #188]	; (8001950 <__NVIC_SetPriority+0xd4>)
 8001894:	1dfb      	adds	r3, r7, #7
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b25b      	sxtb	r3, r3
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	33c0      	adds	r3, #192	; 0xc0
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	589b      	ldr	r3, [r3, r2]
 80018a2:	1dfa      	adds	r2, r7, #7
 80018a4:	7812      	ldrb	r2, [r2, #0]
 80018a6:	0011      	movs	r1, r2
 80018a8:	2203      	movs	r2, #3
 80018aa:	400a      	ands	r2, r1
 80018ac:	00d2      	lsls	r2, r2, #3
 80018ae:	21ff      	movs	r1, #255	; 0xff
 80018b0:	4091      	lsls	r1, r2
 80018b2:	000a      	movs	r2, r1
 80018b4:	43d2      	mvns	r2, r2
 80018b6:	401a      	ands	r2, r3
 80018b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	019b      	lsls	r3, r3, #6
 80018be:	22ff      	movs	r2, #255	; 0xff
 80018c0:	401a      	ands	r2, r3
 80018c2:	1dfb      	adds	r3, r7, #7
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	0018      	movs	r0, r3
 80018c8:	2303      	movs	r3, #3
 80018ca:	4003      	ands	r3, r0
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018d0:	481f      	ldr	r0, [pc, #124]	; (8001950 <__NVIC_SetPriority+0xd4>)
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b25b      	sxtb	r3, r3
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	430a      	orrs	r2, r1
 80018dc:	33c0      	adds	r3, #192	; 0xc0
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018e2:	e031      	b.n	8001948 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e4:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <__NVIC_SetPriority+0xd8>)
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	0019      	movs	r1, r3
 80018ec:	230f      	movs	r3, #15
 80018ee:	400b      	ands	r3, r1
 80018f0:	3b08      	subs	r3, #8
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3306      	adds	r3, #6
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	18d3      	adds	r3, r2, r3
 80018fa:	3304      	adds	r3, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	1dfa      	adds	r2, r7, #7
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	0011      	movs	r1, r2
 8001904:	2203      	movs	r2, #3
 8001906:	400a      	ands	r2, r1
 8001908:	00d2      	lsls	r2, r2, #3
 800190a:	21ff      	movs	r1, #255	; 0xff
 800190c:	4091      	lsls	r1, r2
 800190e:	000a      	movs	r2, r1
 8001910:	43d2      	mvns	r2, r2
 8001912:	401a      	ands	r2, r3
 8001914:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	019b      	lsls	r3, r3, #6
 800191a:	22ff      	movs	r2, #255	; 0xff
 800191c:	401a      	ands	r2, r3
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	0018      	movs	r0, r3
 8001924:	2303      	movs	r3, #3
 8001926:	4003      	ands	r3, r0
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800192c:	4809      	ldr	r0, [pc, #36]	; (8001954 <__NVIC_SetPriority+0xd8>)
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	001c      	movs	r4, r3
 8001934:	230f      	movs	r3, #15
 8001936:	4023      	ands	r3, r4
 8001938:	3b08      	subs	r3, #8
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	430a      	orrs	r2, r1
 800193e:	3306      	adds	r3, #6
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	18c3      	adds	r3, r0, r3
 8001944:	3304      	adds	r3, #4
 8001946:	601a      	str	r2, [r3, #0]
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b003      	add	sp, #12
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	1e5a      	subs	r2, r3, #1
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	045b      	lsls	r3, r3, #17
 8001968:	429a      	cmp	r2, r3
 800196a:	d301      	bcc.n	8001970 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196c:	2301      	movs	r3, #1
 800196e:	e010      	b.n	8001992 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <SysTick_Config+0x44>)
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	3a01      	subs	r2, #1
 8001976:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001978:	2301      	movs	r3, #1
 800197a:	425b      	negs	r3, r3
 800197c:	2103      	movs	r1, #3
 800197e:	0018      	movs	r0, r3
 8001980:	f7ff ff7c 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SysTick_Config+0x44>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <SysTick_Config+0x44>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	0018      	movs	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	b002      	add	sp, #8
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	210f      	movs	r1, #15
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	1c02      	adds	r2, r0, #0
 80019b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	0011      	movs	r1, r2
 80019bc:	0018      	movs	r0, r3
 80019be:	f7ff ff5d 	bl	800187c <__NVIC_SetPriority>
}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b004      	add	sp, #16
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	0002      	movs	r2, r0
 80019d2:	1dfb      	adds	r3, r7, #7
 80019d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	0018      	movs	r0, r3
 80019de:	f7ff ff33 	bl	8001848 <__NVIC_EnableIRQ>
}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b002      	add	sp, #8
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff ffaf 	bl	8001958 <SysTick_Config>
 80019fa:	0003      	movs	r3, r0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b002      	add	sp, #8
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2225      	movs	r2, #37	; 0x25
 8001a18:	5c9b      	ldrb	r3, [r3, r2]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d008      	beq.n	8001a32 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2204      	movs	r2, #4
 8001a24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2224      	movs	r2, #36	; 0x24
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e024      	b.n	8001a7c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	210e      	movs	r1, #14
 8001a3e:	438a      	bics	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	438a      	bics	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	221c      	movs	r2, #28
 8001a58:	401a      	ands	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2101      	movs	r1, #1
 8001a60:	4091      	lsls	r1, r2
 8001a62:	000a      	movs	r2, r1
 8001a64:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2225      	movs	r2, #37	; 0x25
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2224      	movs	r2, #36	; 0x24
 8001a72:	2100      	movs	r1, #0
 8001a74:	5499      	strb	r1, [r3, r2]

    return status;
 8001a76:	230f      	movs	r3, #15
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b004      	add	sp, #16
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8c:	210f      	movs	r1, #15
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2225      	movs	r2, #37	; 0x25
 8001a98:	5c9b      	ldrb	r3, [r3, r2]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d006      	beq.n	8001aae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e02a      	b.n	8001b04 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	210e      	movs	r1, #14
 8001aba:	438a      	bics	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	438a      	bics	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	221c      	movs	r2, #28
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	2101      	movs	r1, #1
 8001adc:	4091      	lsls	r1, r2
 8001ade:	000a      	movs	r2, r1
 8001ae0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2225      	movs	r2, #37	; 0x25
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2224      	movs	r2, #36	; 0x24
 8001aee:	2100      	movs	r1, #0
 8001af0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d004      	beq.n	8001b04 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	0010      	movs	r0, r2
 8001b02:	4798      	blx	r3
    }
  }
  return status;
 8001b04:	230f      	movs	r3, #15
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	781b      	ldrb	r3, [r3, #0]
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b004      	add	sp, #16
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b2a:	e155      	b.n	8001dd8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2101      	movs	r1, #1
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4091      	lsls	r1, r2
 8001b36:	000a      	movs	r2, r1
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d100      	bne.n	8001b44 <HAL_GPIO_Init+0x30>
 8001b42:	e146      	b.n	8001dd2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d005      	beq.n	8001b5c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2203      	movs	r2, #3
 8001b56:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d130      	bne.n	8001bbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	0013      	movs	r3, r2
 8001b6c:	43da      	mvns	r2, r3
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	0013      	movs	r3, r2
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b92:	2201      	movs	r2, #1
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
 8001b98:	0013      	movs	r3, r2
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	091b      	lsrs	r3, r3, #4
 8001ba8:	2201      	movs	r2, #1
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	0013      	movs	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d017      	beq.n	8001bfa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	0013      	movs	r3, r2
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	409a      	lsls	r2, r3
 8001bec:	0013      	movs	r3, r2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2203      	movs	r2, #3
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d123      	bne.n	8001c4e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3208      	adds	r2, #8
 8001c0e:	0092      	lsls	r2, r2, #2
 8001c10:	58d3      	ldr	r3, [r2, r3]
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2207      	movs	r2, #7
 8001c18:	4013      	ands	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	0013      	movs	r3, r2
 8001c22:	43da      	mvns	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2107      	movs	r1, #7
 8001c32:	400b      	ands	r3, r1
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	409a      	lsls	r2, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	6939      	ldr	r1, [r7, #16]
 8001c4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	0013      	movs	r3, r2
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	409a      	lsls	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	23c0      	movs	r3, #192	; 0xc0
 8001c88:	029b      	lsls	r3, r3, #10
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d100      	bne.n	8001c90 <HAL_GPIO_Init+0x17c>
 8001c8e:	e0a0      	b.n	8001dd2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c90:	4b57      	ldr	r3, [pc, #348]	; (8001df0 <HAL_GPIO_Init+0x2dc>)
 8001c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c94:	4b56      	ldr	r3, [pc, #344]	; (8001df0 <HAL_GPIO_Init+0x2dc>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c9c:	4a55      	ldr	r2, [pc, #340]	; (8001df4 <HAL_GPIO_Init+0x2e0>)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	589b      	ldr	r3, [r3, r2]
 8001ca8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2203      	movs	r2, #3
 8001cae:	4013      	ands	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	0013      	movs	r3, r2
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	23a0      	movs	r3, #160	; 0xa0
 8001cc4:	05db      	lsls	r3, r3, #23
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d01f      	beq.n	8001d0a <HAL_GPIO_Init+0x1f6>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4a      	ldr	r2, [pc, #296]	; (8001df8 <HAL_GPIO_Init+0x2e4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d019      	beq.n	8001d06 <HAL_GPIO_Init+0x1f2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a49      	ldr	r2, [pc, #292]	; (8001dfc <HAL_GPIO_Init+0x2e8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_GPIO_Init+0x1ee>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a48      	ldr	r2, [pc, #288]	; (8001e00 <HAL_GPIO_Init+0x2ec>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00d      	beq.n	8001cfe <HAL_GPIO_Init+0x1ea>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a47      	ldr	r2, [pc, #284]	; (8001e04 <HAL_GPIO_Init+0x2f0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <HAL_GPIO_Init+0x1e6>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a46      	ldr	r2, [pc, #280]	; (8001e08 <HAL_GPIO_Init+0x2f4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_GPIO_Init+0x1e2>
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	e00a      	b.n	8001d0c <HAL_GPIO_Init+0x1f8>
 8001cf6:	2306      	movs	r3, #6
 8001cf8:	e008      	b.n	8001d0c <HAL_GPIO_Init+0x1f8>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x1f8>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x1f8>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x1f8>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x1f8>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	2103      	movs	r1, #3
 8001d10:	400a      	ands	r2, r1
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1c:	4935      	ldr	r1, [pc, #212]	; (8001df4 <HAL_GPIO_Init+0x2e0>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2a:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_GPIO_Init+0x2f8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43da      	mvns	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	025b      	lsls	r3, r3, #9
 8001d42:	4013      	ands	r3, r2
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d4e:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <HAL_GPIO_Init+0x2f8>)
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_GPIO_Init+0x2f8>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	029b      	lsls	r3, r3, #10
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_GPIO_Init+0x2f8>)
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_GPIO_Init+0x2f8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43da      	mvns	r2, r3
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	035b      	lsls	r3, r3, #13
 8001d96:	4013      	ands	r3, r2
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_GPIO_Init+0x2f8>)
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_GPIO_Init+0x2f8>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43da      	mvns	r2, r3
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	039b      	lsls	r3, r3, #14
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_GPIO_Init+0x2f8>)
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	40da      	lsrs	r2, r3
 8001de0:	1e13      	subs	r3, r2, #0
 8001de2:	d000      	beq.n	8001de6 <HAL_GPIO_Init+0x2d2>
 8001de4:	e6a2      	b.n	8001b2c <HAL_GPIO_Init+0x18>
  }
}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b006      	add	sp, #24
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40010000 	.word	0x40010000
 8001df8:	50000400 	.word	0x50000400
 8001dfc:	50000800 	.word	0x50000800
 8001e00:	50000c00 	.word	0x50000c00
 8001e04:	50001000 	.word	0x50001000
 8001e08:	50001c00 	.word	0x50001c00
 8001e0c:	40010400 	.word	0x40010400

08001e10 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	0008      	movs	r0, r1
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	1cbb      	adds	r3, r7, #2
 8001e1e:	1c02      	adds	r2, r0, #0
 8001e20:	801a      	strh	r2, [r3, #0]
 8001e22:	1c7b      	adds	r3, r7, #1
 8001e24:	1c0a      	adds	r2, r1, #0
 8001e26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e28:	1c7b      	adds	r3, r7, #1
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e30:	1cbb      	adds	r3, r7, #2
 8001e32:	881a      	ldrh	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e38:	e003      	b.n	8001e42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e3a:	1cbb      	adds	r3, r7, #2
 8001e3c:	881a      	ldrh	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b002      	add	sp, #8
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d102      	bne.n	8001e60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	f000 fb6c 	bl	8002538 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e60:	4bc8      	ldr	r3, [pc, #800]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	220c      	movs	r2, #12
 8001e66:	4013      	ands	r3, r2
 8001e68:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e6a:	4bc6      	ldr	r3, [pc, #792]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d100      	bne.n	8001e82 <HAL_RCC_OscConfig+0x36>
 8001e80:	e07d      	b.n	8001f7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d007      	beq.n	8001e98 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d112      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x68>
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	025b      	lsls	r3, r3, #9
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d10d      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	4bba      	ldr	r3, [pc, #744]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	029b      	lsls	r3, r3, #10
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d100      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x5a>
 8001ea4:	e06a      	b.n	8001f7c <HAL_RCC_OscConfig+0x130>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d166      	bne.n	8001f7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f000 fb42 	bl	8002538 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	025b      	lsls	r3, r3, #9
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x84>
 8001ec0:	4bb0      	ldr	r3, [pc, #704]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4baf      	ldr	r3, [pc, #700]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	0249      	lsls	r1, r1, #9
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e027      	b.n	8001f20 <HAL_RCC_OscConfig+0xd4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	23a0      	movs	r3, #160	; 0xa0
 8001ed6:	02db      	lsls	r3, r3, #11
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10e      	bne.n	8001efa <HAL_RCC_OscConfig+0xae>
 8001edc:	4ba9      	ldr	r3, [pc, #676]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4ba8      	ldr	r3, [pc, #672]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	02c9      	lsls	r1, r1, #11
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	4ba6      	ldr	r3, [pc, #664]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	4ba5      	ldr	r3, [pc, #660]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001ef0:	2180      	movs	r1, #128	; 0x80
 8001ef2:	0249      	lsls	r1, r1, #9
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	e012      	b.n	8001f20 <HAL_RCC_OscConfig+0xd4>
 8001efa:	4ba2      	ldr	r3, [pc, #648]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4ba1      	ldr	r3, [pc, #644]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001f00:	49a1      	ldr	r1, [pc, #644]	; (8002188 <HAL_RCC_OscConfig+0x33c>)
 8001f02:	400a      	ands	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	4b9f      	ldr	r3, [pc, #636]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	025b      	lsls	r3, r3, #9
 8001f0e:	4013      	ands	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4b9b      	ldr	r3, [pc, #620]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b9a      	ldr	r3, [pc, #616]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001f1a:	499c      	ldr	r1, [pc, #624]	; (800218c <HAL_RCC_OscConfig+0x340>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d014      	beq.n	8001f52 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fc84 	bl	8001834 <HAL_GetTick>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f32:	f7ff fc7f 	bl	8001834 <HAL_GetTick>
 8001f36:	0002      	movs	r2, r0
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b64      	cmp	r3, #100	; 0x64
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e2f9      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f44:	4b8f      	ldr	r3, [pc, #572]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	029b      	lsls	r3, r3, #10
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0xe6>
 8001f50:	e015      	b.n	8001f7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff fc6f 	bl	8001834 <HAL_GetTick>
 8001f56:	0003      	movs	r3, r0
 8001f58:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fc6a 	bl	8001834 <HAL_GetTick>
 8001f60:	0002      	movs	r2, r0
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e2e4      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f6e:	4b85      	ldr	r3, [pc, #532]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	029b      	lsls	r3, r3, #10
 8001f76:	4013      	ands	r3, r2
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x110>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2202      	movs	r2, #2
 8001f84:	4013      	ands	r3, r2
 8001f86:	d100      	bne.n	8001f8a <HAL_RCC_OscConfig+0x13e>
 8001f88:	e099      	b.n	80020be <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	2220      	movs	r2, #32
 8001f94:	4013      	ands	r3, r2
 8001f96:	d009      	beq.n	8001fac <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001f98:	4b7a      	ldr	r3, [pc, #488]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b79      	ldr	r3, [pc, #484]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001f9e:	2120      	movs	r1, #32
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	4393      	bics	r3, r2
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d005      	beq.n	8001fbe <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	d13e      	bne.n	8002036 <HAL_RCC_OscConfig+0x1ea>
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d13b      	bne.n	8002036 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001fbe:	4b71      	ldr	r3, [pc, #452]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d004      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x186>
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e2b2      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b6c      	ldr	r3, [pc, #432]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a6e      	ldr	r2, [pc, #440]	; (8002190 <HAL_RCC_OscConfig+0x344>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	021a      	lsls	r2, r3, #8
 8001fe2:	4b68      	ldr	r3, [pc, #416]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fe8:	4b66      	ldr	r3, [pc, #408]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2209      	movs	r2, #9
 8001fee:	4393      	bics	r3, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	4b64      	ldr	r3, [pc, #400]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8001ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ffa:	f000 fbeb 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8001ffe:	0001      	movs	r1, r0
 8002000:	4b60      	ldr	r3, [pc, #384]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	220f      	movs	r2, #15
 8002008:	4013      	ands	r3, r2
 800200a:	4a62      	ldr	r2, [pc, #392]	; (8002194 <HAL_RCC_OscConfig+0x348>)
 800200c:	5cd3      	ldrb	r3, [r2, r3]
 800200e:	000a      	movs	r2, r1
 8002010:	40da      	lsrs	r2, r3
 8002012:	4b61      	ldr	r3, [pc, #388]	; (8002198 <HAL_RCC_OscConfig+0x34c>)
 8002014:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002016:	4b61      	ldr	r3, [pc, #388]	; (800219c <HAL_RCC_OscConfig+0x350>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2513      	movs	r5, #19
 800201c:	197c      	adds	r4, r7, r5
 800201e:	0018      	movs	r0, r3
 8002020:	f7ff fbc2 	bl	80017a8 <HAL_InitTick>
 8002024:	0003      	movs	r3, r0
 8002026:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002028:	197b      	adds	r3, r7, r5
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d046      	beq.n	80020be <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002030:	197b      	adds	r3, r7, r5
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	e280      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	2b00      	cmp	r3, #0
 800203a:	d027      	beq.n	800208c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800203c:	4b51      	ldr	r3, [pc, #324]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2209      	movs	r2, #9
 8002042:	4393      	bics	r3, r2
 8002044:	0019      	movs	r1, r3
 8002046:	4b4f      	ldr	r3, [pc, #316]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8002048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204a:	430a      	orrs	r2, r1
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7ff fbf1 	bl	8001834 <HAL_GetTick>
 8002052:	0003      	movs	r3, r0
 8002054:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002058:	f7ff fbec 	bl	8001834 <HAL_GetTick>
 800205c:	0002      	movs	r2, r0
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e266      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2204      	movs	r2, #4
 8002070:	4013      	ands	r3, r2
 8002072:	d0f1      	beq.n	8002058 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a45      	ldr	r2, [pc, #276]	; (8002190 <HAL_RCC_OscConfig+0x344>)
 800207a:	4013      	ands	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	021a      	lsls	r2, r3, #8
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	e018      	b.n	80020be <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208c:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b3c      	ldr	r3, [pc, #240]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8002092:	2101      	movs	r1, #1
 8002094:	438a      	bics	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff fbcc 	bl	8001834 <HAL_GetTick>
 800209c:	0003      	movs	r3, r0
 800209e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a2:	f7ff fbc7 	bl	8001834 <HAL_GetTick>
 80020a6:	0002      	movs	r2, r0
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e241      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020b4:	4b33      	ldr	r3, [pc, #204]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2204      	movs	r2, #4
 80020ba:	4013      	ands	r3, r2
 80020bc:	d1f1      	bne.n	80020a2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2210      	movs	r2, #16
 80020c4:	4013      	ands	r3, r2
 80020c6:	d100      	bne.n	80020ca <HAL_RCC_OscConfig+0x27e>
 80020c8:	e0a1      	b.n	800220e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d140      	bne.n	8002152 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020d0:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4013      	ands	r3, r2
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_OscConfig+0x29c>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e227      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e8:	4b26      	ldr	r3, [pc, #152]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4a2c      	ldr	r2, [pc, #176]	; (80021a0 <HAL_RCC_OscConfig+0x354>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1a      	ldr	r2, [r3, #32]
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020fc:	4b21      	ldr	r3, [pc, #132]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	0a19      	lsrs	r1, r3, #8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	061a      	lsls	r2, r3, #24
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 800210c:	430a      	orrs	r2, r1
 800210e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	0b5b      	lsrs	r3, r3, #13
 8002116:	3301      	adds	r3, #1
 8002118:	2280      	movs	r2, #128	; 0x80
 800211a:	0212      	lsls	r2, r2, #8
 800211c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	210f      	movs	r1, #15
 8002126:	400b      	ands	r3, r1
 8002128:	491a      	ldr	r1, [pc, #104]	; (8002194 <HAL_RCC_OscConfig+0x348>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_RCC_OscConfig+0x34c>)
 8002130:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_RCC_OscConfig+0x350>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2513      	movs	r5, #19
 8002138:	197c      	adds	r4, r7, r5
 800213a:	0018      	movs	r0, r3
 800213c:	f7ff fb34 	bl	80017a8 <HAL_InitTick>
 8002140:	0003      	movs	r3, r0
 8002142:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002144:	197b      	adds	r3, r7, r5
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d060      	beq.n	800220e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800214c:	197b      	adds	r3, r7, r5
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	e1f2      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d03f      	beq.n	80021da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_OscConfig+0x338>)
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff fb64 	bl	8001834 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002170:	e018      	b.n	80021a4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002172:	f7ff fb5f 	bl	8001834 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d911      	bls.n	80021a4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e1d9      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
 8002184:	40021000 	.word	0x40021000
 8002188:	fffeffff 	.word	0xfffeffff
 800218c:	fffbffff 	.word	0xfffbffff
 8002190:	ffffe0ff 	.word	0xffffe0ff
 8002194:	0800501c 	.word	0x0800501c
 8002198:	20000000 	.word	0x20000000
 800219c:	20000004 	.word	0x20000004
 80021a0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021a4:	4bc9      	ldr	r3, [pc, #804]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0e0      	beq.n	8002172 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b0:	4bc6      	ldr	r3, [pc, #792]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4ac6      	ldr	r2, [pc, #792]	; (80024d0 <HAL_RCC_OscConfig+0x684>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	4bc3      	ldr	r3, [pc, #780]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c4:	4bc1      	ldr	r3, [pc, #772]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	0a19      	lsrs	r1, r3, #8
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	061a      	lsls	r2, r3, #24
 80021d2:	4bbe      	ldr	r3, [pc, #760]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80021d4:	430a      	orrs	r2, r1
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	e019      	b.n	800220e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021da:	4bbc      	ldr	r3, [pc, #752]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4bbb      	ldr	r3, [pc, #748]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80021e0:	49bc      	ldr	r1, [pc, #752]	; (80024d4 <HAL_RCC_OscConfig+0x688>)
 80021e2:	400a      	ands	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7ff fb25 	bl	8001834 <HAL_GetTick>
 80021ea:	0003      	movs	r3, r0
 80021ec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f0:	f7ff fb20 	bl	8001834 <HAL_GetTick>
 80021f4:	0002      	movs	r2, r0
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e19a      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002202:	4bb2      	ldr	r3, [pc, #712]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4013      	ands	r3, r2
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2208      	movs	r2, #8
 8002214:	4013      	ands	r3, r2
 8002216:	d036      	beq.n	8002286 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d019      	beq.n	8002254 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002220:	4baa      	ldr	r3, [pc, #680]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002224:	4ba9      	ldr	r3, [pc, #676]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002226:	2101      	movs	r1, #1
 8002228:	430a      	orrs	r2, r1
 800222a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222c:	f7ff fb02 	bl	8001834 <HAL_GetTick>
 8002230:	0003      	movs	r3, r0
 8002232:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002236:	f7ff fafd 	bl	8001834 <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e177      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002248:	4ba0      	ldr	r3, [pc, #640]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800224a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224c:	2202      	movs	r2, #2
 800224e:	4013      	ands	r3, r2
 8002250:	d0f1      	beq.n	8002236 <HAL_RCC_OscConfig+0x3ea>
 8002252:	e018      	b.n	8002286 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002254:	4b9d      	ldr	r3, [pc, #628]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002256:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002258:	4b9c      	ldr	r3, [pc, #624]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800225a:	2101      	movs	r1, #1
 800225c:	438a      	bics	r2, r1
 800225e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002260:	f7ff fae8 	bl	8001834 <HAL_GetTick>
 8002264:	0003      	movs	r3, r0
 8002266:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800226a:	f7ff fae3 	bl	8001834 <HAL_GetTick>
 800226e:	0002      	movs	r2, r0
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e15d      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800227c:	4b93      	ldr	r3, [pc, #588]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800227e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d1f1      	bne.n	800226a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2204      	movs	r2, #4
 800228c:	4013      	ands	r3, r2
 800228e:	d100      	bne.n	8002292 <HAL_RCC_OscConfig+0x446>
 8002290:	e0ae      	b.n	80023f0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002292:	2023      	movs	r0, #35	; 0x23
 8002294:	183b      	adds	r3, r7, r0
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229a:	4b8c      	ldr	r3, [pc, #560]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800229c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	055b      	lsls	r3, r3, #21
 80022a2:	4013      	ands	r3, r2
 80022a4:	d109      	bne.n	80022ba <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	4b89      	ldr	r3, [pc, #548]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80022a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022aa:	4b88      	ldr	r3, [pc, #544]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80022ac:	2180      	movs	r1, #128	; 0x80
 80022ae:	0549      	lsls	r1, r1, #21
 80022b0:	430a      	orrs	r2, r1
 80022b2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80022b4:	183b      	adds	r3, r7, r0
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ba:	4b87      	ldr	r3, [pc, #540]	; (80024d8 <HAL_RCC_OscConfig+0x68c>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4013      	ands	r3, r2
 80022c4:	d11a      	bne.n	80022fc <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c6:	4b84      	ldr	r3, [pc, #528]	; (80024d8 <HAL_RCC_OscConfig+0x68c>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4b83      	ldr	r3, [pc, #524]	; (80024d8 <HAL_RCC_OscConfig+0x68c>)
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0049      	lsls	r1, r1, #1
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d4:	f7ff faae 	bl	8001834 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022de:	f7ff faa9 	bl	8001834 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b64      	cmp	r3, #100	; 0x64
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e123      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	4b79      	ldr	r3, [pc, #484]	; (80024d8 <HAL_RCC_OscConfig+0x68c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	429a      	cmp	r2, r3
 8002306:	d107      	bne.n	8002318 <HAL_RCC_OscConfig+0x4cc>
 8002308:	4b70      	ldr	r3, [pc, #448]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800230a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800230c:	4b6f      	ldr	r3, [pc, #444]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	0049      	lsls	r1, r1, #1
 8002312:	430a      	orrs	r2, r1
 8002314:	651a      	str	r2, [r3, #80]	; 0x50
 8002316:	e031      	b.n	800237c <HAL_RCC_OscConfig+0x530>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10c      	bne.n	800233a <HAL_RCC_OscConfig+0x4ee>
 8002320:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002324:	4b69      	ldr	r3, [pc, #420]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002326:	496b      	ldr	r1, [pc, #428]	; (80024d4 <HAL_RCC_OscConfig+0x688>)
 8002328:	400a      	ands	r2, r1
 800232a:	651a      	str	r2, [r3, #80]	; 0x50
 800232c:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800232e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002330:	4b66      	ldr	r3, [pc, #408]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002332:	496a      	ldr	r1, [pc, #424]	; (80024dc <HAL_RCC_OscConfig+0x690>)
 8002334:	400a      	ands	r2, r1
 8002336:	651a      	str	r2, [r3, #80]	; 0x50
 8002338:	e020      	b.n	800237c <HAL_RCC_OscConfig+0x530>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	23a0      	movs	r3, #160	; 0xa0
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	429a      	cmp	r2, r3
 8002344:	d10e      	bne.n	8002364 <HAL_RCC_OscConfig+0x518>
 8002346:	4b61      	ldr	r3, [pc, #388]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800234a:	4b60      	ldr	r3, [pc, #384]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800234c:	2180      	movs	r1, #128	; 0x80
 800234e:	00c9      	lsls	r1, r1, #3
 8002350:	430a      	orrs	r2, r1
 8002352:	651a      	str	r2, [r3, #80]	; 0x50
 8002354:	4b5d      	ldr	r3, [pc, #372]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002358:	4b5c      	ldr	r3, [pc, #368]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800235a:	2180      	movs	r1, #128	; 0x80
 800235c:	0049      	lsls	r1, r1, #1
 800235e:	430a      	orrs	r2, r1
 8002360:	651a      	str	r2, [r3, #80]	; 0x50
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0x530>
 8002364:	4b59      	ldr	r3, [pc, #356]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002368:	4b58      	ldr	r3, [pc, #352]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800236a:	495a      	ldr	r1, [pc, #360]	; (80024d4 <HAL_RCC_OscConfig+0x688>)
 800236c:	400a      	ands	r2, r1
 800236e:	651a      	str	r2, [r3, #80]	; 0x50
 8002370:	4b56      	ldr	r3, [pc, #344]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002372:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002374:	4b55      	ldr	r3, [pc, #340]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002376:	4959      	ldr	r1, [pc, #356]	; (80024dc <HAL_RCC_OscConfig+0x690>)
 8002378:	400a      	ands	r2, r1
 800237a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d015      	beq.n	80023b0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002384:	f7ff fa56 	bl	8001834 <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800238c:	e009      	b.n	80023a2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7ff fa51 	bl	8001834 <HAL_GetTick>
 8002392:	0002      	movs	r2, r0
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	4a51      	ldr	r2, [pc, #324]	; (80024e0 <HAL_RCC_OscConfig+0x694>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e0ca      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023a2:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80023a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4013      	ands	r3, r2
 80023ac:	d0ef      	beq.n	800238e <HAL_RCC_OscConfig+0x542>
 80023ae:	e014      	b.n	80023da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b0:	f7ff fa40 	bl	8001834 <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023b8:	e009      	b.n	80023ce <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7ff fa3b 	bl	8001834 <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	4a46      	ldr	r2, [pc, #280]	; (80024e0 <HAL_RCC_OscConfig+0x694>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0b4      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023ce:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80023d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4013      	ands	r3, r2
 80023d8:	d1ef      	bne.n	80023ba <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023da:	2323      	movs	r3, #35	; 0x23
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d105      	bne.n	80023f0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e4:	4b39      	ldr	r3, [pc, #228]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80023e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023e8:	4b38      	ldr	r3, [pc, #224]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80023ea:	493e      	ldr	r1, [pc, #248]	; (80024e4 <HAL_RCC_OscConfig+0x698>)
 80023ec:	400a      	ands	r2, r1
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d100      	bne.n	80023fa <HAL_RCC_OscConfig+0x5ae>
 80023f8:	e09d      	b.n	8002536 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	d100      	bne.n	8002402 <HAL_RCC_OscConfig+0x5b6>
 8002400:	e076      	b.n	80024f0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	2b02      	cmp	r3, #2
 8002408:	d145      	bne.n	8002496 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	4b30      	ldr	r3, [pc, #192]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002410:	4935      	ldr	r1, [pc, #212]	; (80024e8 <HAL_RCC_OscConfig+0x69c>)
 8002412:	400a      	ands	r2, r1
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7ff fa0d 	bl	8001834 <HAL_GetTick>
 800241a:	0003      	movs	r3, r0
 800241c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002420:	f7ff fa08 	bl	8001834 <HAL_GetTick>
 8002424:	0002      	movs	r2, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e082      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	049b      	lsls	r3, r3, #18
 800243a:	4013      	ands	r3, r2
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <HAL_RCC_OscConfig+0x6a0>)
 8002444:	4013      	ands	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	431a      	orrs	r2, r3
 8002458:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800245a:	430a      	orrs	r2, r1
 800245c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	0449      	lsls	r1, r1, #17
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7ff f9e2 	bl	8001834 <HAL_GetTick>
 8002470:	0003      	movs	r3, r0
 8002472:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002476:	f7ff f9dd 	bl	8001834 <HAL_GetTick>
 800247a:	0002      	movs	r2, r0
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e057      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	049b      	lsls	r3, r3, #18
 8002490:	4013      	ands	r3, r2
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x62a>
 8002494:	e04f      	b.n	8002536 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 800249c:	4912      	ldr	r1, [pc, #72]	; (80024e8 <HAL_RCC_OscConfig+0x69c>)
 800249e:	400a      	ands	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff f9c7 	bl	8001834 <HAL_GetTick>
 80024a6:	0003      	movs	r3, r0
 80024a8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ac:	f7ff f9c2 	bl	8001834 <HAL_GetTick>
 80024b0:	0002      	movs	r2, r0
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e03c      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024be:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_RCC_OscConfig+0x680>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	049b      	lsls	r3, r3, #18
 80024c6:	4013      	ands	r3, r2
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x660>
 80024ca:	e034      	b.n	8002536 <HAL_RCC_OscConfig+0x6ea>
 80024cc:	40021000 	.word	0x40021000
 80024d0:	ffff1fff 	.word	0xffff1fff
 80024d4:	fffffeff 	.word	0xfffffeff
 80024d8:	40007000 	.word	0x40007000
 80024dc:	fffffbff 	.word	0xfffffbff
 80024e0:	00001388 	.word	0x00001388
 80024e4:	efffffff 	.word	0xefffffff
 80024e8:	feffffff 	.word	0xfeffffff
 80024ec:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e01d      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024fc:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_RCC_OscConfig+0x6f4>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	025b      	lsls	r3, r3, #9
 8002508:	401a      	ands	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	429a      	cmp	r2, r3
 8002510:	d10f      	bne.n	8002532 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	23f0      	movs	r3, #240	; 0xf0
 8002516:	039b      	lsls	r3, r3, #14
 8002518:	401a      	ands	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d107      	bne.n	8002532 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	23c0      	movs	r3, #192	; 0xc0
 8002526:	041b      	lsls	r3, r3, #16
 8002528:	401a      	ands	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b00a      	add	sp, #40	; 0x28
 800253e:	bdb0      	pop	{r4, r5, r7, pc}
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b5b0      	push	{r4, r5, r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e128      	b.n	80027aa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002558:	4b96      	ldr	r3, [pc, #600]	; (80027b4 <HAL_RCC_ClockConfig+0x270>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2201      	movs	r2, #1
 800255e:	4013      	ands	r3, r2
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d91e      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b93      	ldr	r3, [pc, #588]	; (80027b4 <HAL_RCC_ClockConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2201      	movs	r2, #1
 800256c:	4393      	bics	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	4b90      	ldr	r3, [pc, #576]	; (80027b4 <HAL_RCC_ClockConfig+0x270>)
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002578:	f7ff f95c 	bl	8001834 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002580:	e009      	b.n	8002596 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002582:	f7ff f957 	bl	8001834 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	4a8a      	ldr	r2, [pc, #552]	; (80027b8 <HAL_RCC_ClockConfig+0x274>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e109      	b.n	80027aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCC_ClockConfig+0x270>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2201      	movs	r2, #1
 800259c:	4013      	ands	r3, r2
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1ee      	bne.n	8002582 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2202      	movs	r2, #2
 80025aa:	4013      	ands	r3, r2
 80025ac:	d009      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ae:	4b83      	ldr	r3, [pc, #524]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	22f0      	movs	r2, #240	; 0xf0
 80025b4:	4393      	bics	r3, r2
 80025b6:	0019      	movs	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	4b7f      	ldr	r3, [pc, #508]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 80025be:	430a      	orrs	r2, r1
 80025c0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2201      	movs	r2, #1
 80025c8:	4013      	ands	r3, r2
 80025ca:	d100      	bne.n	80025ce <HAL_RCC_ClockConfig+0x8a>
 80025cc:	e089      	b.n	80026e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025d6:	4b79      	ldr	r3, [pc, #484]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	029b      	lsls	r3, r3, #10
 80025de:	4013      	ands	r3, r2
 80025e0:	d120      	bne.n	8002624 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0e1      	b.n	80027aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ee:	4b73      	ldr	r3, [pc, #460]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	049b      	lsls	r3, r3, #18
 80025f6:	4013      	ands	r3, r2
 80025f8:	d114      	bne.n	8002624 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0d5      	b.n	80027aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d106      	bne.n	8002614 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002606:	4b6d      	ldr	r3, [pc, #436]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2204      	movs	r2, #4
 800260c:	4013      	ands	r3, r2
 800260e:	d109      	bne.n	8002624 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0ca      	b.n	80027aa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002614:	4b69      	ldr	r3, [pc, #420]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4013      	ands	r3, r2
 800261e:	d101      	bne.n	8002624 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0c2      	b.n	80027aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002624:	4b65      	ldr	r3, [pc, #404]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2203      	movs	r2, #3
 800262a:	4393      	bics	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4b62      	ldr	r3, [pc, #392]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 8002634:	430a      	orrs	r2, r1
 8002636:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002638:	f7ff f8fc 	bl	8001834 <HAL_GetTick>
 800263c:	0003      	movs	r3, r0
 800263e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d111      	bne.n	800266c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002648:	e009      	b.n	800265e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264a:	f7ff f8f3 	bl	8001834 <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	4a58      	ldr	r2, [pc, #352]	; (80027b8 <HAL_RCC_ClockConfig+0x274>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e0a5      	b.n	80027aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800265e:	4b57      	ldr	r3, [pc, #348]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	220c      	movs	r2, #12
 8002664:	4013      	ands	r3, r2
 8002666:	2b08      	cmp	r3, #8
 8002668:	d1ef      	bne.n	800264a <HAL_RCC_ClockConfig+0x106>
 800266a:	e03a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d111      	bne.n	8002698 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002674:	e009      	b.n	800268a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002676:	f7ff f8dd 	bl	8001834 <HAL_GetTick>
 800267a:	0002      	movs	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	4a4d      	ldr	r2, [pc, #308]	; (80027b8 <HAL_RCC_ClockConfig+0x274>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e08f      	b.n	80027aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800268a:	4b4c      	ldr	r3, [pc, #304]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	220c      	movs	r2, #12
 8002690:	4013      	ands	r3, r2
 8002692:	2b0c      	cmp	r3, #12
 8002694:	d1ef      	bne.n	8002676 <HAL_RCC_ClockConfig+0x132>
 8002696:	e024      	b.n	80026e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d11b      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026a0:	e009      	b.n	80026b6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a2:	f7ff f8c7 	bl	8001834 <HAL_GetTick>
 80026a6:	0002      	movs	r2, r0
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	4a42      	ldr	r2, [pc, #264]	; (80027b8 <HAL_RCC_ClockConfig+0x274>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e079      	b.n	80027aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026b6:	4b41      	ldr	r3, [pc, #260]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	220c      	movs	r2, #12
 80026bc:	4013      	ands	r3, r2
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d1ef      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x15e>
 80026c2:	e00e      	b.n	80026e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c4:	f7ff f8b6 	bl	8001834 <HAL_GetTick>
 80026c8:	0002      	movs	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	4a3a      	ldr	r2, [pc, #232]	; (80027b8 <HAL_RCC_ClockConfig+0x274>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e068      	b.n	80027aa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80026d8:	4b38      	ldr	r3, [pc, #224]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	220c      	movs	r2, #12
 80026de:	4013      	ands	r3, r2
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e2:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <HAL_RCC_ClockConfig+0x270>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2201      	movs	r2, #1
 80026e8:	4013      	ands	r3, r2
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d21e      	bcs.n	800272e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f0:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_RCC_ClockConfig+0x270>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4393      	bics	r3, r2
 80026f8:	0019      	movs	r1, r3
 80026fa:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <HAL_RCC_ClockConfig+0x270>)
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002702:	f7ff f897 	bl	8001834 <HAL_GetTick>
 8002706:	0003      	movs	r3, r0
 8002708:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	e009      	b.n	8002720 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270c:	f7ff f892 	bl	8001834 <HAL_GetTick>
 8002710:	0002      	movs	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	4a28      	ldr	r2, [pc, #160]	; (80027b8 <HAL_RCC_ClockConfig+0x274>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e044      	b.n	80027aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002720:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <HAL_RCC_ClockConfig+0x270>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2201      	movs	r2, #1
 8002726:	4013      	ands	r3, r2
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d1ee      	bne.n	800270c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2204      	movs	r2, #4
 8002734:	4013      	ands	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002738:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a20      	ldr	r2, [pc, #128]	; (80027c0 <HAL_RCC_ClockConfig+0x27c>)
 800273e:	4013      	ands	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 8002748:	430a      	orrs	r2, r1
 800274a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2208      	movs	r2, #8
 8002752:	4013      	ands	r3, r2
 8002754:	d00a      	beq.n	800276c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002756:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <HAL_RCC_ClockConfig+0x280>)
 800275c:	4013      	ands	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	00da      	lsls	r2, r3, #3
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 8002768:	430a      	orrs	r2, r1
 800276a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800276c:	f000 f832 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002770:	0001      	movs	r1, r0
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_RCC_ClockConfig+0x278>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	220f      	movs	r2, #15
 800277a:	4013      	ands	r3, r2
 800277c:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <HAL_RCC_ClockConfig+0x284>)
 800277e:	5cd3      	ldrb	r3, [r2, r3]
 8002780:	000a      	movs	r2, r1
 8002782:	40da      	lsrs	r2, r3
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_RCC_ClockConfig+0x288>)
 8002786:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_RCC_ClockConfig+0x28c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	250b      	movs	r5, #11
 800278e:	197c      	adds	r4, r7, r5
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff f809 	bl	80017a8 <HAL_InitTick>
 8002796:	0003      	movs	r3, r0
 8002798:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800279a:	197b      	adds	r3, r7, r5
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80027a2:	197b      	adds	r3, r7, r5
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	e000      	b.n	80027aa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b004      	add	sp, #16
 80027b0:	bdb0      	pop	{r4, r5, r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	40022000 	.word	0x40022000
 80027b8:	00001388 	.word	0x00001388
 80027bc:	40021000 	.word	0x40021000
 80027c0:	fffff8ff 	.word	0xfffff8ff
 80027c4:	ffffc7ff 	.word	0xffffc7ff
 80027c8:	0800501c 	.word	0x0800501c
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b5b0      	push	{r4, r5, r7, lr}
 80027d6:	b08e      	sub	sp, #56	; 0x38
 80027d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80027da:	4b4c      	ldr	r3, [pc, #304]	; (800290c <HAL_RCC_GetSysClockFreq+0x138>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e2:	230c      	movs	r3, #12
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	d014      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x40>
 80027ea:	d900      	bls.n	80027ee <HAL_RCC_GetSysClockFreq+0x1a>
 80027ec:	e07b      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x112>
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d002      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x24>
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d00b      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x3a>
 80027f6:	e076      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80027f8:	4b44      	ldr	r3, [pc, #272]	; (800290c <HAL_RCC_GetSysClockFreq+0x138>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2210      	movs	r2, #16
 80027fe:	4013      	ands	r3, r2
 8002800:	d002      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002802:	4b43      	ldr	r3, [pc, #268]	; (8002910 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002804:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002806:	e07c      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002808:	4b42      	ldr	r3, [pc, #264]	; (8002914 <HAL_RCC_GetSysClockFreq+0x140>)
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800280c:	e079      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800280e:	4b42      	ldr	r3, [pc, #264]	; (8002918 <HAL_RCC_GetSysClockFreq+0x144>)
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002812:	e076      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002816:	0c9a      	lsrs	r2, r3, #18
 8002818:	230f      	movs	r3, #15
 800281a:	401a      	ands	r2, r3
 800281c:	4b3f      	ldr	r3, [pc, #252]	; (800291c <HAL_RCC_GetSysClockFreq+0x148>)
 800281e:	5c9b      	ldrb	r3, [r3, r2]
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	0d9a      	lsrs	r2, r3, #22
 8002826:	2303      	movs	r3, #3
 8002828:	4013      	ands	r3, r2
 800282a:	3301      	adds	r3, #1
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800282e:	4b37      	ldr	r3, [pc, #220]	; (800290c <HAL_RCC_GetSysClockFreq+0x138>)
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	025b      	lsls	r3, r3, #9
 8002836:	4013      	ands	r3, r2
 8002838:	d01a      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	4a35      	ldr	r2, [pc, #212]	; (8002918 <HAL_RCC_GetSysClockFreq+0x144>)
 8002844:	2300      	movs	r3, #0
 8002846:	69b8      	ldr	r0, [r7, #24]
 8002848:	69f9      	ldr	r1, [r7, #28]
 800284a:	f7fd fd1b 	bl	8000284 <__aeabi_lmul>
 800284e:	0002      	movs	r2, r0
 8002850:	000b      	movs	r3, r1
 8002852:	0010      	movs	r0, r2
 8002854:	0019      	movs	r1, r3
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f7fd fcef 	bl	8000244 <__aeabi_uldivmod>
 8002866:	0002      	movs	r2, r0
 8002868:	000b      	movs	r3, r1
 800286a:	0013      	movs	r3, r2
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
 800286e:	e037      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002870:	4b26      	ldr	r3, [pc, #152]	; (800290c <HAL_RCC_GetSysClockFreq+0x138>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2210      	movs	r2, #16
 8002876:	4013      	ands	r3, r2
 8002878:	d01a      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4a23      	ldr	r2, [pc, #140]	; (8002910 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002884:	2300      	movs	r3, #0
 8002886:	68b8      	ldr	r0, [r7, #8]
 8002888:	68f9      	ldr	r1, [r7, #12]
 800288a:	f7fd fcfb 	bl	8000284 <__aeabi_lmul>
 800288e:	0002      	movs	r2, r0
 8002890:	000b      	movs	r3, r1
 8002892:	0010      	movs	r0, r2
 8002894:	0019      	movs	r1, r3
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f7fd fccf 	bl	8000244 <__aeabi_uldivmod>
 80028a6:	0002      	movs	r2, r0
 80028a8:	000b      	movs	r3, r1
 80028aa:	0013      	movs	r3, r2
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
 80028ae:	e017      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	0018      	movs	r0, r3
 80028b4:	2300      	movs	r3, #0
 80028b6:	0019      	movs	r1, r3
 80028b8:	4a16      	ldr	r2, [pc, #88]	; (8002914 <HAL_RCC_GetSysClockFreq+0x140>)
 80028ba:	2300      	movs	r3, #0
 80028bc:	f7fd fce2 	bl	8000284 <__aeabi_lmul>
 80028c0:	0002      	movs	r2, r0
 80028c2:	000b      	movs	r3, r1
 80028c4:	0010      	movs	r0, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	001c      	movs	r4, r3
 80028cc:	2300      	movs	r3, #0
 80028ce:	001d      	movs	r5, r3
 80028d0:	0022      	movs	r2, r4
 80028d2:	002b      	movs	r3, r5
 80028d4:	f7fd fcb6 	bl	8000244 <__aeabi_uldivmod>
 80028d8:	0002      	movs	r2, r0
 80028da:	000b      	movs	r3, r1
 80028dc:	0013      	movs	r3, r2
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80028e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028e4:	e00d      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_GetSysClockFreq+0x138>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	0b5b      	lsrs	r3, r3, #13
 80028ec:	2207      	movs	r2, #7
 80028ee:	4013      	ands	r3, r2
 80028f0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	3301      	adds	r3, #1
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	0212      	lsls	r2, r2, #8
 80028fa:	409a      	lsls	r2, r3
 80028fc:	0013      	movs	r3, r2
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002900:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b00e      	add	sp, #56	; 0x38
 800290a:	bdb0      	pop	{r4, r5, r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	003d0900 	.word	0x003d0900
 8002914:	00f42400 	.word	0x00f42400
 8002918:	007a1200 	.word	0x007a1200
 800291c:	08005034 	.word	0x08005034

08002920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002924:	4b02      	ldr	r3, [pc, #8]	; (8002930 <HAL_RCC_GetHCLKFreq+0x10>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	0018      	movs	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	20000000 	.word	0x20000000

08002934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002938:	f7ff fff2 	bl	8002920 <HAL_RCC_GetHCLKFreq>
 800293c:	0001      	movs	r1, r0
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	2207      	movs	r2, #7
 8002946:	4013      	ands	r3, r2
 8002948:	4a04      	ldr	r2, [pc, #16]	; (800295c <HAL_RCC_GetPCLK1Freq+0x28>)
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	40d9      	lsrs	r1, r3
 800294e:	000b      	movs	r3, r1
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	40021000 	.word	0x40021000
 800295c:	0800502c 	.word	0x0800502c

08002960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002964:	f7ff ffdc 	bl	8002920 <HAL_RCC_GetHCLKFreq>
 8002968:	0001      	movs	r1, r0
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	0adb      	lsrs	r3, r3, #11
 8002970:	2207      	movs	r2, #7
 8002972:	4013      	ands	r3, r2
 8002974:	4a04      	ldr	r2, [pc, #16]	; (8002988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002976:	5cd3      	ldrb	r3, [r2, r3]
 8002978:	40d9      	lsrs	r1, r3
 800297a:	000b      	movs	r3, r1
}
 800297c:	0018      	movs	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	40021000 	.word	0x40021000
 8002988:	0800502c 	.word	0x0800502c

0800298c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002994:	2017      	movs	r0, #23
 8002996:	183b      	adds	r3, r7, r0
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2220      	movs	r2, #32
 80029a2:	4013      	ands	r3, r2
 80029a4:	d100      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80029a6:	e0c2      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a8:	4b91      	ldr	r3, [pc, #580]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	055b      	lsls	r3, r3, #21
 80029b0:	4013      	ands	r3, r2
 80029b2:	d109      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b4:	4b8e      	ldr	r3, [pc, #568]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b8:	4b8d      	ldr	r3, [pc, #564]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	0549      	lsls	r1, r1, #21
 80029be:	430a      	orrs	r2, r1
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80029c2:	183b      	adds	r3, r7, r0
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	4b8a      	ldr	r3, [pc, #552]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4013      	ands	r3, r2
 80029d2:	d11a      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d4:	4b87      	ldr	r3, [pc, #540]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b86      	ldr	r3, [pc, #536]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	0049      	lsls	r1, r1, #1
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7fe ff27 	bl	8001834 <HAL_GetTick>
 80029e6:	0003      	movs	r3, r0
 80029e8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ea:	e008      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ec:	f7fe ff22 	bl	8001834 <HAL_GetTick>
 80029f0:	0002      	movs	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e0f3      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fe:	4b7d      	ldr	r3, [pc, #500]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a0a:	4b79      	ldr	r3, [pc, #484]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	23c0      	movs	r3, #192	; 0xc0
 8002a10:	039b      	lsls	r3, r3, #14
 8002a12:	4013      	ands	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	23c0      	movs	r3, #192	; 0xc0
 8002a1c:	039b      	lsls	r3, r3, #14
 8002a1e:	4013      	ands	r3, r2
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d013      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	23c0      	movs	r3, #192	; 0xc0
 8002a2c:	029b      	lsls	r3, r3, #10
 8002a2e:	401a      	ands	r2, r3
 8002a30:	23c0      	movs	r3, #192	; 0xc0
 8002a32:	029b      	lsls	r3, r3, #10
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d10a      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a38:	4b6d      	ldr	r3, [pc, #436]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	2380      	movs	r3, #128	; 0x80
 8002a3e:	029b      	lsls	r3, r3, #10
 8002a40:	401a      	ands	r2, r3
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	029b      	lsls	r3, r3, #10
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d101      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e0cb      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a4e:	4b68      	ldr	r3, [pc, #416]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a52:	23c0      	movs	r3, #192	; 0xc0
 8002a54:	029b      	lsls	r3, r3, #10
 8002a56:	4013      	ands	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d03b      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	23c0      	movs	r3, #192	; 0xc0
 8002a66:	029b      	lsls	r3, r3, #10
 8002a68:	4013      	ands	r3, r2
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d033      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2220      	movs	r2, #32
 8002a76:	4013      	ands	r3, r2
 8002a78:	d02e      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002a7a:	4b5d      	ldr	r3, [pc, #372]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7e:	4a5e      	ldr	r2, [pc, #376]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a84:	4b5a      	ldr	r3, [pc, #360]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a88:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	0309      	lsls	r1, r1, #12
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a92:	4b57      	ldr	r3, [pc, #348]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a96:	4b56      	ldr	r3, [pc, #344]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a98:	4958      	ldr	r1, [pc, #352]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002a9e:	4b54      	ldr	r3, [pc, #336]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d014      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fe fec1 	bl	8001834 <HAL_GetTick>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab6:	e009      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fe febc 	bl	8001834 <HAL_GetTick>
 8002abc:	0002      	movs	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	4a4f      	ldr	r2, [pc, #316]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e08c      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002acc:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ace:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d0ef      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	23c0      	movs	r3, #192	; 0xc0
 8002ade:	029b      	lsls	r3, r3, #10
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	23c0      	movs	r3, #192	; 0xc0
 8002ae4:	029b      	lsls	r3, r3, #10
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002aea:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a45      	ldr	r2, [pc, #276]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	0019      	movs	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	23c0      	movs	r3, #192	; 0xc0
 8002afa:	039b      	lsls	r3, r3, #14
 8002afc:	401a      	ands	r2, r3
 8002afe:	4b3c      	ldr	r3, [pc, #240]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b06:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	23c0      	movs	r3, #192	; 0xc0
 8002b0e:	029b      	lsls	r3, r3, #10
 8002b10:	401a      	ands	r2, r3
 8002b12:	4b37      	ldr	r3, [pc, #220]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b18:	2317      	movs	r3, #23
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d105      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b22:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b26:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b28:	4937      	ldr	r1, [pc, #220]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2201      	movs	r2, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	d009      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b38:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	4393      	bics	r3, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2202      	movs	r2, #2
 8002b52:	4013      	ands	r3, r2
 8002b54:	d009      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b56:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b66:	430a      	orrs	r2, r1
 8002b68:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2204      	movs	r2, #4
 8002b70:	4013      	ands	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b74:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b78:	4a24      	ldr	r2, [pc, #144]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b84:	430a      	orrs	r2, r1
 8002b86:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	4a1e      	ldr	r2, [pc, #120]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d009      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb6:	4a10      	ldr	r2, [pc, #64]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699a      	ldr	r2, [r3, #24]
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2280      	movs	r2, #128	; 0x80
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d009      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002be0:	430a      	orrs	r2, r1
 8002be2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	0018      	movs	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b006      	add	sp, #24
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40007000 	.word	0x40007000
 8002bf8:	fffcffff 	.word	0xfffcffff
 8002bfc:	fff7ffff 	.word	0xfff7ffff
 8002c00:	00001388 	.word	0x00001388
 8002c04:	ffcfffff 	.word	0xffcfffff
 8002c08:	efffffff 	.word	0xefffffff
 8002c0c:	fffff3ff 	.word	0xfffff3ff
 8002c10:	ffffcfff 	.word	0xffffcfff
 8002c14:	fff3ffff 	.word	0xfff3ffff

08002c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e044      	b.n	8002cb4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d107      	bne.n	8002c42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2274      	movs	r2, #116	; 0x74
 8002c36:	2100      	movs	r1, #0
 8002c38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7fd fe2d 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2224      	movs	r2, #36	; 0x24
 8002c46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2101      	movs	r1, #1
 8002c54:	438a      	bics	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 fc36 	bl	80034cc <UART_SetConfig>
 8002c60:	0003      	movs	r3, r0
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e024      	b.n	8002cb4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	0018      	movs	r0, r3
 8002c76:	f000 fee7 	bl	8003a48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	490d      	ldr	r1, [pc, #52]	; (8002cbc <HAL_UART_Init+0xa4>)
 8002c86:	400a      	ands	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	212a      	movs	r1, #42	; 0x2a
 8002c96:	438a      	bics	r2, r1
 8002c98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f000 ff7f 	bl	8003bb0 <UART_CheckIdleState>
 8002cb2:	0003      	movs	r3, r0
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	ffffb7ff 	.word	0xffffb7ff

08002cc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	1dbb      	adds	r3, r7, #6
 8002cce:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d000      	beq.n	8002cda <HAL_UART_Transmit+0x1a>
 8002cd8:	e095      	b.n	8002e06 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_UART_Transmit+0x28>
 8002ce0:	1dbb      	adds	r3, r7, #6
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e08d      	b.n	8002e08 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	015b      	lsls	r3, r3, #5
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d109      	bne.n	8002d0c <HAL_UART_Transmit+0x4c>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2201      	movs	r2, #1
 8002d04:	4013      	ands	r3, r2
 8002d06:	d001      	beq.n	8002d0c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e07d      	b.n	8002e08 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2274      	movs	r2, #116	; 0x74
 8002d10:	5c9b      	ldrb	r3, [r3, r2]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Transmit+0x5a>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e076      	b.n	8002e08 <HAL_UART_Transmit+0x148>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2274      	movs	r2, #116	; 0x74
 8002d1e:	2101      	movs	r1, #1
 8002d20:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	2100      	movs	r1, #0
 8002d28:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2221      	movs	r2, #33	; 0x21
 8002d2e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d30:	f7fe fd80 	bl	8001834 <HAL_GetTick>
 8002d34:	0003      	movs	r3, r0
 8002d36:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1dba      	adds	r2, r7, #6
 8002d3c:	2150      	movs	r1, #80	; 0x50
 8002d3e:	8812      	ldrh	r2, [r2, #0]
 8002d40:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1dba      	adds	r2, r7, #6
 8002d46:	2152      	movs	r1, #82	; 0x52
 8002d48:	8812      	ldrh	r2, [r2, #0]
 8002d4a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	015b      	lsls	r3, r3, #5
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d108      	bne.n	8002d6a <HAL_UART_Transmit+0xaa>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d104      	bne.n	8002d6a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	e003      	b.n	8002d72 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2274      	movs	r2, #116	; 0x74
 8002d76:	2100      	movs	r1, #0
 8002d78:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002d7a:	e02c      	b.n	8002dd6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	0013      	movs	r3, r2
 8002d86:	2200      	movs	r2, #0
 8002d88:	2180      	movs	r1, #128	; 0x80
 8002d8a:	f000 ff59 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8002d8e:	1e03      	subs	r3, r0, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e038      	b.n	8002e08 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10b      	bne.n	8002db4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	001a      	movs	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	05d2      	lsls	r2, r2, #23
 8002da8:	0dd2      	lsrs	r2, r2, #23
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	3302      	adds	r3, #2
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	e007      	b.n	8002dc4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2252      	movs	r2, #82	; 0x52
 8002dc8:	5a9b      	ldrh	r3, [r3, r2]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b299      	uxth	r1, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2252      	movs	r2, #82	; 0x52
 8002dd4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2252      	movs	r2, #82	; 0x52
 8002dda:	5a9b      	ldrh	r3, [r3, r2]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1cc      	bne.n	8002d7c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	0013      	movs	r3, r2
 8002dec:	2200      	movs	r2, #0
 8002dee:	2140      	movs	r1, #64	; 0x40
 8002df0:	f000 ff26 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8002df4:	1e03      	subs	r3, r0, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e005      	b.n	8002e08 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e000      	b.n	8002e08 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
  }
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b008      	add	sp, #32
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	1dbb      	adds	r3, r7, #6
 8002e1c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d155      	bne.n	8002ed2 <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_UART_Receive_IT+0x24>
 8002e2c:	1dbb      	adds	r3, r7, #6
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e04d      	b.n	8002ed4 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	015b      	lsls	r3, r3, #5
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d109      	bne.n	8002e58 <HAL_UART_Receive_IT+0x48>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4013      	ands	r3, r2
 8002e52:	d001      	beq.n	8002e58 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e03d      	b.n	8002ed4 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2274      	movs	r2, #116	; 0x74
 8002e5c:	5c9b      	ldrb	r3, [r3, r2]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_UART_Receive_IT+0x56>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e036      	b.n	8002ed4 <HAL_UART_Receive_IT+0xc4>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2274      	movs	r2, #116	; 0x74
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a18      	ldr	r2, [pc, #96]	; (8002edc <HAL_UART_Receive_IT+0xcc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d020      	beq.n	8002ec0 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	041b      	lsls	r3, r3, #16
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d019      	beq.n	8002ec0 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e90:	613b      	str	r3, [r7, #16]
  return(result);
 8002e92:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	2301      	movs	r3, #1
 8002e98:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	04c9      	lsls	r1, r1, #19
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f383 8810 	msr	PRIMASK, r3
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ec0:	1dbb      	adds	r3, r7, #6
 8002ec2:	881a      	ldrh	r2, [r3, #0]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 ff7d 	bl	8003dc8 <UART_Start_Receive_IT>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	e000      	b.n	8002ed4 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
  }
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b008      	add	sp, #32
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40004800 	.word	0x40004800

08002ee0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b0ab      	sub	sp, #172	; 0xac
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	22a4      	movs	r2, #164	; 0xa4
 8002ef0:	18b9      	adds	r1, r7, r2
 8002ef2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	20a0      	movs	r0, #160	; 0xa0
 8002efc:	1839      	adds	r1, r7, r0
 8002efe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	219c      	movs	r1, #156	; 0x9c
 8002f08:	1879      	adds	r1, r7, r1
 8002f0a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f0c:	0011      	movs	r1, r2
 8002f0e:	18bb      	adds	r3, r7, r2
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a99      	ldr	r2, [pc, #612]	; (8003178 <HAL_UART_IRQHandler+0x298>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	2298      	movs	r2, #152	; 0x98
 8002f18:	18bc      	adds	r4, r7, r2
 8002f1a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002f1c:	18bb      	adds	r3, r7, r2
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d114      	bne.n	8002f4e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f24:	187b      	adds	r3, r7, r1
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d00f      	beq.n	8002f4e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f2e:	183b      	adds	r3, r7, r0
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2220      	movs	r2, #32
 8002f34:	4013      	ands	r3, r2
 8002f36:	d00a      	beq.n	8002f4e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d100      	bne.n	8002f42 <HAL_UART_IRQHandler+0x62>
 8002f40:	e298      	b.n	8003474 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	0010      	movs	r0, r2
 8002f4a:	4798      	blx	r3
      }
      return;
 8002f4c:	e292      	b.n	8003474 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f4e:	2398      	movs	r3, #152	; 0x98
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d100      	bne.n	8002f5a <HAL_UART_IRQHandler+0x7a>
 8002f58:	e114      	b.n	8003184 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f5a:	239c      	movs	r3, #156	; 0x9c
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2201      	movs	r2, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	d106      	bne.n	8002f74 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f66:	23a0      	movs	r3, #160	; 0xa0
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a83      	ldr	r2, [pc, #524]	; (800317c <HAL_UART_IRQHandler+0x29c>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d100      	bne.n	8002f74 <HAL_UART_IRQHandler+0x94>
 8002f72:	e107      	b.n	8003184 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f74:	23a4      	movs	r3, #164	; 0xa4
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d012      	beq.n	8002fa6 <HAL_UART_IRQHandler+0xc6>
 8002f80:	23a0      	movs	r3, #160	; 0xa0
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2201      	movs	r2, #1
 8002f94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	589b      	ldr	r3, [r3, r2]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fa6:	23a4      	movs	r3, #164	; 0xa4
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2202      	movs	r2, #2
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d011      	beq.n	8002fd6 <HAL_UART_IRQHandler+0xf6>
 8002fb2:	239c      	movs	r3, #156	; 0x9c
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2280      	movs	r2, #128	; 0x80
 8002fca:	589b      	ldr	r3, [r3, r2]
 8002fcc:	2204      	movs	r2, #4
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2180      	movs	r1, #128	; 0x80
 8002fd4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fd6:	23a4      	movs	r3, #164	; 0xa4
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2204      	movs	r2, #4
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d011      	beq.n	8003006 <HAL_UART_IRQHandler+0x126>
 8002fe2:	239c      	movs	r3, #156	; 0x9c
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	4013      	ands	r3, r2
 8002fec:	d00b      	beq.n	8003006 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	589b      	ldr	r3, [r3, r2]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2180      	movs	r1, #128	; 0x80
 8003004:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003006:	23a4      	movs	r3, #164	; 0xa4
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2208      	movs	r2, #8
 800300e:	4013      	ands	r3, r2
 8003010:	d017      	beq.n	8003042 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003012:	23a0      	movs	r3, #160	; 0xa0
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2220      	movs	r2, #32
 800301a:	4013      	ands	r3, r2
 800301c:	d105      	bne.n	800302a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800301e:	239c      	movs	r3, #156	; 0x9c
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2201      	movs	r2, #1
 8003026:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003028:	d00b      	beq.n	8003042 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2208      	movs	r2, #8
 8003030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2280      	movs	r2, #128	; 0x80
 8003036:	589b      	ldr	r3, [r3, r2]
 8003038:	2208      	movs	r2, #8
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003042:	23a4      	movs	r3, #164	; 0xa4
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	4013      	ands	r3, r2
 800304e:	d013      	beq.n	8003078 <HAL_UART_IRQHandler+0x198>
 8003050:	23a0      	movs	r3, #160	; 0xa0
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	04db      	lsls	r3, r3, #19
 800305a:	4013      	ands	r3, r2
 800305c:	d00c      	beq.n	8003078 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2280      	movs	r2, #128	; 0x80
 800306c:	589b      	ldr	r3, [r3, r2]
 800306e:	2220      	movs	r2, #32
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2280      	movs	r2, #128	; 0x80
 800307c:	589b      	ldr	r3, [r3, r2]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d100      	bne.n	8003084 <HAL_UART_IRQHandler+0x1a4>
 8003082:	e1f9      	b.n	8003478 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003084:	23a4      	movs	r3, #164	; 0xa4
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2220      	movs	r2, #32
 800308c:	4013      	ands	r3, r2
 800308e:	d00e      	beq.n	80030ae <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003090:	23a0      	movs	r3, #160	; 0xa0
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2220      	movs	r2, #32
 8003098:	4013      	ands	r3, r2
 800309a:	d008      	beq.n	80030ae <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d004      	beq.n	80030ae <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	0010      	movs	r0, r2
 80030ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2280      	movs	r2, #128	; 0x80
 80030b2:	589b      	ldr	r3, [r3, r2]
 80030b4:	2194      	movs	r1, #148	; 0x94
 80030b6:	187a      	adds	r2, r7, r1
 80030b8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2240      	movs	r2, #64	; 0x40
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d004      	beq.n	80030d2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2228      	movs	r2, #40	; 0x28
 80030ce:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030d0:	d047      	beq.n	8003162 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	0018      	movs	r0, r3
 80030d6:	f000 ff27 	bl	8003f28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2240      	movs	r2, #64	; 0x40
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	d137      	bne.n	8003158 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e8:	f3ef 8310 	mrs	r3, PRIMASK
 80030ec:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80030ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030f0:	2090      	movs	r0, #144	; 0x90
 80030f2:	183a      	adds	r2, r7, r0
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	2301      	movs	r3, #1
 80030f8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030fc:	f383 8810 	msr	PRIMASK, r3
}
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2140      	movs	r1, #64	; 0x40
 800310e:	438a      	bics	r2, r1
 8003110:	609a      	str	r2, [r3, #8]
 8003112:	183b      	adds	r3, r7, r0
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003118:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800311a:	f383 8810 	msr	PRIMASK, r3
}
 800311e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	2b00      	cmp	r3, #0
 8003126:	d012      	beq.n	800314e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <HAL_UART_IRQHandler+0x2a0>)
 800312e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	0018      	movs	r0, r3
 8003136:	f7fe fca5 	bl	8001a84 <HAL_DMA_Abort_IT>
 800313a:	1e03      	subs	r3, r0, #0
 800313c:	d01a      	beq.n	8003174 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	0018      	movs	r0, r3
 800314a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800314c:	e012      	b.n	8003174 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	0018      	movs	r0, r3
 8003152:	f000 f9a7 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003156:	e00d      	b.n	8003174 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	0018      	movs	r0, r3
 800315c:	f000 f9a2 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003160:	e008      	b.n	8003174 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	0018      	movs	r0, r3
 8003166:	f000 f99d 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2280      	movs	r2, #128	; 0x80
 800316e:	2100      	movs	r1, #0
 8003170:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003172:	e181      	b.n	8003478 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003174:	46c0      	nop			; (mov r8, r8)
    return;
 8003176:	e17f      	b.n	8003478 <HAL_UART_IRQHandler+0x598>
 8003178:	0000080f 	.word	0x0000080f
 800317c:	04000120 	.word	0x04000120
 8003180:	08003fed 	.word	0x08003fed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003188:	2b01      	cmp	r3, #1
 800318a:	d000      	beq.n	800318e <HAL_UART_IRQHandler+0x2ae>
 800318c:	e133      	b.n	80033f6 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800318e:	23a4      	movs	r3, #164	; 0xa4
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2210      	movs	r2, #16
 8003196:	4013      	ands	r3, r2
 8003198:	d100      	bne.n	800319c <HAL_UART_IRQHandler+0x2bc>
 800319a:	e12c      	b.n	80033f6 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800319c:	23a0      	movs	r3, #160	; 0xa0
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2210      	movs	r2, #16
 80031a4:	4013      	ands	r3, r2
 80031a6:	d100      	bne.n	80031aa <HAL_UART_IRQHandler+0x2ca>
 80031a8:	e125      	b.n	80033f6 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2210      	movs	r2, #16
 80031b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2240      	movs	r2, #64	; 0x40
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	d000      	beq.n	80031c2 <HAL_UART_IRQHandler+0x2e2>
 80031c0:	e09d      	b.n	80032fe <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	217e      	movs	r1, #126	; 0x7e
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d100      	bne.n	80031da <HAL_UART_IRQHandler+0x2fa>
 80031d8:	e150      	b.n	800347c <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2258      	movs	r2, #88	; 0x58
 80031de:	5a9b      	ldrh	r3, [r3, r2]
 80031e0:	187a      	adds	r2, r7, r1
 80031e2:	8812      	ldrh	r2, [r2, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d300      	bcc.n	80031ea <HAL_UART_IRQHandler+0x30a>
 80031e8:	e148      	b.n	800347c <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	187a      	adds	r2, r7, r1
 80031ee:	215a      	movs	r1, #90	; 0x5a
 80031f0:	8812      	ldrh	r2, [r2, #0]
 80031f2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2220      	movs	r2, #32
 80031fe:	4013      	ands	r3, r2
 8003200:	d16e      	bne.n	80032e0 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003202:	f3ef 8310 	mrs	r3, PRIMASK
 8003206:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800320a:	67bb      	str	r3, [r7, #120]	; 0x78
 800320c:	2301      	movs	r3, #1
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003212:	f383 8810 	msr	PRIMASK, r3
}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	499a      	ldr	r1, [pc, #616]	; (800348c <HAL_UART_IRQHandler+0x5ac>)
 8003224:	400a      	ands	r2, r1
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800322a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322e:	f383 8810 	msr	PRIMASK, r3
}
 8003232:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003234:	f3ef 8310 	mrs	r3, PRIMASK
 8003238:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800323a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323c:	677b      	str	r3, [r7, #116]	; 0x74
 800323e:	2301      	movs	r3, #1
 8003240:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003244:	f383 8810 	msr	PRIMASK, r3
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	438a      	bics	r2, r1
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003260:	f383 8810 	msr	PRIMASK, r3
}
 8003264:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003266:	f3ef 8310 	mrs	r3, PRIMASK
 800326a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800326c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800326e:	673b      	str	r3, [r7, #112]	; 0x70
 8003270:	2301      	movs	r3, #1
 8003272:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003276:	f383 8810 	msr	PRIMASK, r3
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2140      	movs	r1, #64	; 0x40
 8003288:	438a      	bics	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800328e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003292:	f383 8810 	msr	PRIMASK, r3
}
 8003296:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a4:	f3ef 8310 	mrs	r3, PRIMASK
 80032a8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80032aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032ae:	2301      	movs	r3, #1
 80032b0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b4:	f383 8810 	msr	PRIMASK, r3
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2110      	movs	r1, #16
 80032c6:	438a      	bics	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	0018      	movs	r0, r3
 80032dc:	f7fe fb92 	bl	8001a04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2258      	movs	r2, #88	; 0x58
 80032e4:	5a9a      	ldrh	r2, [r3, r2]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	215a      	movs	r1, #90	; 0x5a
 80032ea:	5a5b      	ldrh	r3, [r3, r1]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0011      	movs	r1, r2
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 f8dc 	bl	80034b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032fc:	e0be      	b.n	800347c <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2258      	movs	r2, #88	; 0x58
 8003302:	5a99      	ldrh	r1, [r3, r2]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	225a      	movs	r2, #90	; 0x5a
 8003308:	5a9b      	ldrh	r3, [r3, r2]
 800330a:	b29a      	uxth	r2, r3
 800330c:	208e      	movs	r0, #142	; 0x8e
 800330e:	183b      	adds	r3, r7, r0
 8003310:	1a8a      	subs	r2, r1, r2
 8003312:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	225a      	movs	r2, #90	; 0x5a
 8003318:	5a9b      	ldrh	r3, [r3, r2]
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d100      	bne.n	8003322 <HAL_UART_IRQHandler+0x442>
 8003320:	e0ae      	b.n	8003480 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8003322:	183b      	adds	r3, r7, r0
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d100      	bne.n	800332c <HAL_UART_IRQHandler+0x44c>
 800332a:	e0a9      	b.n	8003480 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800332c:	f3ef 8310 	mrs	r3, PRIMASK
 8003330:	60fb      	str	r3, [r7, #12]
  return(result);
 8003332:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003334:	2488      	movs	r4, #136	; 0x88
 8003336:	193a      	adds	r2, r7, r4
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	2301      	movs	r3, #1
 800333c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f383 8810 	msr	PRIMASK, r3
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	494f      	ldr	r1, [pc, #316]	; (8003490 <HAL_UART_IRQHandler+0x5b0>)
 8003352:	400a      	ands	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	193b      	adds	r3, r7, r4
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f383 8810 	msr	PRIMASK, r3
}
 8003362:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003364:	f3ef 8310 	mrs	r3, PRIMASK
 8003368:	61bb      	str	r3, [r7, #24]
  return(result);
 800336a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336c:	2484      	movs	r4, #132	; 0x84
 800336e:	193a      	adds	r2, r7, r4
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	2301      	movs	r3, #1
 8003374:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	f383 8810 	msr	PRIMASK, r3
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2101      	movs	r1, #1
 800338a:	438a      	bics	r2, r1
 800338c:	609a      	str	r2, [r3, #8]
 800338e:	193b      	adds	r3, r7, r4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	f383 8810 	msr	PRIMASK, r3
}
 800339a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ae:	f3ef 8310 	mrs	r3, PRIMASK
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b6:	2480      	movs	r4, #128	; 0x80
 80033b8:	193a      	adds	r2, r7, r4
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	2301      	movs	r3, #1
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	f383 8810 	msr	PRIMASK, r3
}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2110      	movs	r1, #16
 80033d4:	438a      	bics	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	193b      	adds	r3, r7, r4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	f383 8810 	msr	PRIMASK, r3
}
 80033e4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033e6:	183b      	adds	r3, r7, r0
 80033e8:	881a      	ldrh	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	0011      	movs	r1, r2
 80033ee:	0018      	movs	r0, r3
 80033f0:	f000 f860 	bl	80034b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033f4:	e044      	b.n	8003480 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033f6:	23a4      	movs	r3, #164	; 0xa4
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	035b      	lsls	r3, r3, #13
 8003400:	4013      	ands	r3, r2
 8003402:	d010      	beq.n	8003426 <HAL_UART_IRQHandler+0x546>
 8003404:	239c      	movs	r3, #156	; 0x9c
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	03db      	lsls	r3, r3, #15
 800340e:	4013      	ands	r3, r2
 8003410:	d009      	beq.n	8003426 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2280      	movs	r2, #128	; 0x80
 8003418:	0352      	lsls	r2, r2, #13
 800341a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	0018      	movs	r0, r3
 8003420:	f000 ff8e 	bl	8004340 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003424:	e02f      	b.n	8003486 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003426:	23a4      	movs	r3, #164	; 0xa4
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2280      	movs	r2, #128	; 0x80
 800342e:	4013      	ands	r3, r2
 8003430:	d00f      	beq.n	8003452 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003432:	23a0      	movs	r3, #160	; 0xa0
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	4013      	ands	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003442:	2b00      	cmp	r3, #0
 8003444:	d01e      	beq.n	8003484 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	0010      	movs	r0, r2
 800344e:	4798      	blx	r3
    }
    return;
 8003450:	e018      	b.n	8003484 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003452:	23a4      	movs	r3, #164	; 0xa4
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2240      	movs	r2, #64	; 0x40
 800345a:	4013      	ands	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_UART_IRQHandler+0x5a6>
 800345e:	23a0      	movs	r3, #160	; 0xa0
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2240      	movs	r2, #64	; 0x40
 8003466:	4013      	ands	r3, r2
 8003468:	d00d      	beq.n	8003486 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	0018      	movs	r0, r3
 800346e:	f000 fdd4 	bl	800401a <UART_EndTransmit_IT>
    return;
 8003472:	e008      	b.n	8003486 <HAL_UART_IRQHandler+0x5a6>
      return;
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	e006      	b.n	8003486 <HAL_UART_IRQHandler+0x5a6>
    return;
 8003478:	46c0      	nop			; (mov r8, r8)
 800347a:	e004      	b.n	8003486 <HAL_UART_IRQHandler+0x5a6>
      return;
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	e002      	b.n	8003486 <HAL_UART_IRQHandler+0x5a6>
      return;
 8003480:	46c0      	nop			; (mov r8, r8)
 8003482:	e000      	b.n	8003486 <HAL_UART_IRQHandler+0x5a6>
    return;
 8003484:	46c0      	nop			; (mov r8, r8)
  }

}
 8003486:	46bd      	mov	sp, r7
 8003488:	b02b      	add	sp, #172	; 0xac
 800348a:	bd90      	pop	{r4, r7, pc}
 800348c:	fffffeff 	.word	0xfffffeff
 8003490:	fffffedf 	.word	0xfffffedf

08003494 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	b002      	add	sp, #8
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	000a      	movs	r2, r1
 80034be:	1cbb      	adds	r3, r7, #2
 80034c0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b002      	add	sp, #8
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034cc:	b5b0      	push	{r4, r5, r7, lr}
 80034ce:	b08e      	sub	sp, #56	; 0x38
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034d4:	231a      	movs	r3, #26
 80034d6:	2218      	movs	r2, #24
 80034d8:	4694      	mov	ip, r2
 80034da:	44bc      	add	ip, r7
 80034dc:	4463      	add	r3, ip
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4ab0      	ldr	r2, [pc, #704]	; (80037c4 <UART_SetConfig+0x2f8>)
 8003502:	4013      	ands	r3, r2
 8003504:	0019      	movs	r1, r3
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800350c:	430a      	orrs	r2, r1
 800350e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4aac      	ldr	r2, [pc, #688]	; (80037c8 <UART_SetConfig+0x2fc>)
 8003518:	4013      	ands	r3, r2
 800351a:	0019      	movs	r1, r3
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4aa6      	ldr	r2, [pc, #664]	; (80037cc <UART_SetConfig+0x300>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800353e:	4313      	orrs	r3, r2
 8003540:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4aa1      	ldr	r2, [pc, #644]	; (80037d0 <UART_SetConfig+0x304>)
 800354a:	4013      	ands	r3, r2
 800354c:	0019      	movs	r1, r3
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003554:	430a      	orrs	r2, r1
 8003556:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a9d      	ldr	r2, [pc, #628]	; (80037d4 <UART_SetConfig+0x308>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d136      	bne.n	80035d0 <UART_SetConfig+0x104>
 8003562:	4b9d      	ldr	r3, [pc, #628]	; (80037d8 <UART_SetConfig+0x30c>)
 8003564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003566:	2203      	movs	r2, #3
 8003568:	4013      	ands	r3, r2
 800356a:	2b03      	cmp	r3, #3
 800356c:	d020      	beq.n	80035b0 <UART_SetConfig+0xe4>
 800356e:	d827      	bhi.n	80035c0 <UART_SetConfig+0xf4>
 8003570:	2b02      	cmp	r3, #2
 8003572:	d00d      	beq.n	8003590 <UART_SetConfig+0xc4>
 8003574:	d824      	bhi.n	80035c0 <UART_SetConfig+0xf4>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <UART_SetConfig+0xb4>
 800357a:	2b01      	cmp	r3, #1
 800357c:	d010      	beq.n	80035a0 <UART_SetConfig+0xd4>
 800357e:	e01f      	b.n	80035c0 <UART_SetConfig+0xf4>
 8003580:	231b      	movs	r3, #27
 8003582:	2218      	movs	r2, #24
 8003584:	4694      	mov	ip, r2
 8003586:	44bc      	add	ip, r7
 8003588:	4463      	add	r3, ip
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e0c5      	b.n	800371c <UART_SetConfig+0x250>
 8003590:	231b      	movs	r3, #27
 8003592:	2218      	movs	r2, #24
 8003594:	4694      	mov	ip, r2
 8003596:	44bc      	add	ip, r7
 8003598:	4463      	add	r3, ip
 800359a:	2202      	movs	r2, #2
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	e0bd      	b.n	800371c <UART_SetConfig+0x250>
 80035a0:	231b      	movs	r3, #27
 80035a2:	2218      	movs	r2, #24
 80035a4:	4694      	mov	ip, r2
 80035a6:	44bc      	add	ip, r7
 80035a8:	4463      	add	r3, ip
 80035aa:	2204      	movs	r2, #4
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	e0b5      	b.n	800371c <UART_SetConfig+0x250>
 80035b0:	231b      	movs	r3, #27
 80035b2:	2218      	movs	r2, #24
 80035b4:	4694      	mov	ip, r2
 80035b6:	44bc      	add	ip, r7
 80035b8:	4463      	add	r3, ip
 80035ba:	2208      	movs	r2, #8
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e0ad      	b.n	800371c <UART_SetConfig+0x250>
 80035c0:	231b      	movs	r3, #27
 80035c2:	2218      	movs	r2, #24
 80035c4:	4694      	mov	ip, r2
 80035c6:	44bc      	add	ip, r7
 80035c8:	4463      	add	r3, ip
 80035ca:	2210      	movs	r2, #16
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	e0a5      	b.n	800371c <UART_SetConfig+0x250>
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a81      	ldr	r2, [pc, #516]	; (80037dc <UART_SetConfig+0x310>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d136      	bne.n	8003648 <UART_SetConfig+0x17c>
 80035da:	4b7f      	ldr	r3, [pc, #508]	; (80037d8 <UART_SetConfig+0x30c>)
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	220c      	movs	r2, #12
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d020      	beq.n	8003628 <UART_SetConfig+0x15c>
 80035e6:	d827      	bhi.n	8003638 <UART_SetConfig+0x16c>
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d00d      	beq.n	8003608 <UART_SetConfig+0x13c>
 80035ec:	d824      	bhi.n	8003638 <UART_SetConfig+0x16c>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <UART_SetConfig+0x12c>
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d010      	beq.n	8003618 <UART_SetConfig+0x14c>
 80035f6:	e01f      	b.n	8003638 <UART_SetConfig+0x16c>
 80035f8:	231b      	movs	r3, #27
 80035fa:	2218      	movs	r2, #24
 80035fc:	4694      	mov	ip, r2
 80035fe:	44bc      	add	ip, r7
 8003600:	4463      	add	r3, ip
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	e089      	b.n	800371c <UART_SetConfig+0x250>
 8003608:	231b      	movs	r3, #27
 800360a:	2218      	movs	r2, #24
 800360c:	4694      	mov	ip, r2
 800360e:	44bc      	add	ip, r7
 8003610:	4463      	add	r3, ip
 8003612:	2202      	movs	r2, #2
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e081      	b.n	800371c <UART_SetConfig+0x250>
 8003618:	231b      	movs	r3, #27
 800361a:	2218      	movs	r2, #24
 800361c:	4694      	mov	ip, r2
 800361e:	44bc      	add	ip, r7
 8003620:	4463      	add	r3, ip
 8003622:	2204      	movs	r2, #4
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e079      	b.n	800371c <UART_SetConfig+0x250>
 8003628:	231b      	movs	r3, #27
 800362a:	2218      	movs	r2, #24
 800362c:	4694      	mov	ip, r2
 800362e:	44bc      	add	ip, r7
 8003630:	4463      	add	r3, ip
 8003632:	2208      	movs	r2, #8
 8003634:	701a      	strb	r2, [r3, #0]
 8003636:	e071      	b.n	800371c <UART_SetConfig+0x250>
 8003638:	231b      	movs	r3, #27
 800363a:	2218      	movs	r2, #24
 800363c:	4694      	mov	ip, r2
 800363e:	44bc      	add	ip, r7
 8003640:	4463      	add	r3, ip
 8003642:	2210      	movs	r2, #16
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e069      	b.n	800371c <UART_SetConfig+0x250>
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a64      	ldr	r2, [pc, #400]	; (80037e0 <UART_SetConfig+0x314>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d107      	bne.n	8003662 <UART_SetConfig+0x196>
 8003652:	231b      	movs	r3, #27
 8003654:	2218      	movs	r2, #24
 8003656:	4694      	mov	ip, r2
 8003658:	44bc      	add	ip, r7
 800365a:	4463      	add	r3, ip
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	e05c      	b.n	800371c <UART_SetConfig+0x250>
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a5f      	ldr	r2, [pc, #380]	; (80037e4 <UART_SetConfig+0x318>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d107      	bne.n	800367c <UART_SetConfig+0x1b0>
 800366c:	231b      	movs	r3, #27
 800366e:	2218      	movs	r2, #24
 8003670:	4694      	mov	ip, r2
 8003672:	44bc      	add	ip, r7
 8003674:	4463      	add	r3, ip
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e04f      	b.n	800371c <UART_SetConfig+0x250>
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a52      	ldr	r2, [pc, #328]	; (80037cc <UART_SetConfig+0x300>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d143      	bne.n	800370e <UART_SetConfig+0x242>
 8003686:	4b54      	ldr	r3, [pc, #336]	; (80037d8 <UART_SetConfig+0x30c>)
 8003688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800368a:	23c0      	movs	r3, #192	; 0xc0
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	4013      	ands	r3, r2
 8003690:	22c0      	movs	r2, #192	; 0xc0
 8003692:	0112      	lsls	r2, r2, #4
 8003694:	4293      	cmp	r3, r2
 8003696:	d02a      	beq.n	80036ee <UART_SetConfig+0x222>
 8003698:	22c0      	movs	r2, #192	; 0xc0
 800369a:	0112      	lsls	r2, r2, #4
 800369c:	4293      	cmp	r3, r2
 800369e:	d82e      	bhi.n	80036fe <UART_SetConfig+0x232>
 80036a0:	2280      	movs	r2, #128	; 0x80
 80036a2:	0112      	lsls	r2, r2, #4
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d012      	beq.n	80036ce <UART_SetConfig+0x202>
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	0112      	lsls	r2, r2, #4
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d826      	bhi.n	80036fe <UART_SetConfig+0x232>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <UART_SetConfig+0x1f2>
 80036b4:	2280      	movs	r2, #128	; 0x80
 80036b6:	00d2      	lsls	r2, r2, #3
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d010      	beq.n	80036de <UART_SetConfig+0x212>
 80036bc:	e01f      	b.n	80036fe <UART_SetConfig+0x232>
 80036be:	231b      	movs	r3, #27
 80036c0:	2218      	movs	r2, #24
 80036c2:	4694      	mov	ip, r2
 80036c4:	44bc      	add	ip, r7
 80036c6:	4463      	add	r3, ip
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	e026      	b.n	800371c <UART_SetConfig+0x250>
 80036ce:	231b      	movs	r3, #27
 80036d0:	2218      	movs	r2, #24
 80036d2:	4694      	mov	ip, r2
 80036d4:	44bc      	add	ip, r7
 80036d6:	4463      	add	r3, ip
 80036d8:	2202      	movs	r2, #2
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	e01e      	b.n	800371c <UART_SetConfig+0x250>
 80036de:	231b      	movs	r3, #27
 80036e0:	2218      	movs	r2, #24
 80036e2:	4694      	mov	ip, r2
 80036e4:	44bc      	add	ip, r7
 80036e6:	4463      	add	r3, ip
 80036e8:	2204      	movs	r2, #4
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e016      	b.n	800371c <UART_SetConfig+0x250>
 80036ee:	231b      	movs	r3, #27
 80036f0:	2218      	movs	r2, #24
 80036f2:	4694      	mov	ip, r2
 80036f4:	44bc      	add	ip, r7
 80036f6:	4463      	add	r3, ip
 80036f8:	2208      	movs	r2, #8
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e00e      	b.n	800371c <UART_SetConfig+0x250>
 80036fe:	231b      	movs	r3, #27
 8003700:	2218      	movs	r2, #24
 8003702:	4694      	mov	ip, r2
 8003704:	44bc      	add	ip, r7
 8003706:	4463      	add	r3, ip
 8003708:	2210      	movs	r2, #16
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e006      	b.n	800371c <UART_SetConfig+0x250>
 800370e:	231b      	movs	r3, #27
 8003710:	2218      	movs	r2, #24
 8003712:	4694      	mov	ip, r2
 8003714:	44bc      	add	ip, r7
 8003716:	4463      	add	r3, ip
 8003718:	2210      	movs	r2, #16
 800371a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a2a      	ldr	r2, [pc, #168]	; (80037cc <UART_SetConfig+0x300>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d000      	beq.n	8003728 <UART_SetConfig+0x25c>
 8003726:	e09e      	b.n	8003866 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003728:	231b      	movs	r3, #27
 800372a:	2218      	movs	r2, #24
 800372c:	4694      	mov	ip, r2
 800372e:	44bc      	add	ip, r7
 8003730:	4463      	add	r3, ip
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b08      	cmp	r3, #8
 8003736:	d01d      	beq.n	8003774 <UART_SetConfig+0x2a8>
 8003738:	dc20      	bgt.n	800377c <UART_SetConfig+0x2b0>
 800373a:	2b04      	cmp	r3, #4
 800373c:	d015      	beq.n	800376a <UART_SetConfig+0x29e>
 800373e:	dc1d      	bgt.n	800377c <UART_SetConfig+0x2b0>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <UART_SetConfig+0x27e>
 8003744:	2b02      	cmp	r3, #2
 8003746:	d005      	beq.n	8003754 <UART_SetConfig+0x288>
 8003748:	e018      	b.n	800377c <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800374a:	f7ff f8f3 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 800374e:	0003      	movs	r3, r0
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003752:	e01d      	b.n	8003790 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003754:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <UART_SetConfig+0x30c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2210      	movs	r2, #16
 800375a:	4013      	ands	r3, r2
 800375c:	d002      	beq.n	8003764 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800375e:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <UART_SetConfig+0x31c>)
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003762:	e015      	b.n	8003790 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8003764:	4b21      	ldr	r3, [pc, #132]	; (80037ec <UART_SetConfig+0x320>)
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003768:	e012      	b.n	8003790 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800376a:	f7ff f833 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800376e:	0003      	movs	r3, r0
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003772:	e00d      	b.n	8003790 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800377a:	e009      	b.n	8003790 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003780:	231a      	movs	r3, #26
 8003782:	2218      	movs	r2, #24
 8003784:	4694      	mov	ip, r2
 8003786:	44bc      	add	ip, r7
 8003788:	4463      	add	r3, ip
 800378a:	2201      	movs	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
        break;
 800378e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d100      	bne.n	8003798 <UART_SetConfig+0x2cc>
 8003796:	e13c      	b.n	8003a12 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	0013      	movs	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	189b      	adds	r3, r3, r2
 80037a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d305      	bcc.n	80037b4 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d91d      	bls.n	80037f0 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 80037b4:	231a      	movs	r3, #26
 80037b6:	2218      	movs	r2, #24
 80037b8:	4694      	mov	ip, r2
 80037ba:	44bc      	add	ip, r7
 80037bc:	4463      	add	r3, ip
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e126      	b.n	8003a12 <UART_SetConfig+0x546>
 80037c4:	efff69f3 	.word	0xefff69f3
 80037c8:	ffffcfff 	.word	0xffffcfff
 80037cc:	40004800 	.word	0x40004800
 80037d0:	fffff4ff 	.word	0xfffff4ff
 80037d4:	40013800 	.word	0x40013800
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40004400 	.word	0x40004400
 80037e0:	40004c00 	.word	0x40004c00
 80037e4:	40005000 	.word	0x40005000
 80037e8:	003d0900 	.word	0x003d0900
 80037ec:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	6939      	ldr	r1, [r7, #16]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	000b      	movs	r3, r1
 80037fe:	0e1b      	lsrs	r3, r3, #24
 8003800:	0010      	movs	r0, r2
 8003802:	0205      	lsls	r5, r0, #8
 8003804:	431d      	orrs	r5, r3
 8003806:	000b      	movs	r3, r1
 8003808:	021c      	lsls	r4, r3, #8
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	68b8      	ldr	r0, [r7, #8]
 8003818:	68f9      	ldr	r1, [r7, #12]
 800381a:	1900      	adds	r0, r0, r4
 800381c:	4169      	adcs	r1, r5
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	2300      	movs	r3, #0
 8003826:	607b      	str	r3, [r7, #4]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f7fc fd0a 	bl	8000244 <__aeabi_uldivmod>
 8003830:	0002      	movs	r2, r0
 8003832:	000b      	movs	r3, r1
 8003834:	0013      	movs	r3, r2
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800383a:	23c0      	movs	r3, #192	; 0xc0
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	429a      	cmp	r2, r3
 8003840:	d309      	bcc.n	8003856 <UART_SetConfig+0x38a>
 8003842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	035b      	lsls	r3, r3, #13
 8003848:	429a      	cmp	r2, r3
 800384a:	d204      	bcs.n	8003856 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003852:	60da      	str	r2, [r3, #12]
 8003854:	e0dd      	b.n	8003a12 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003856:	231a      	movs	r3, #26
 8003858:	2218      	movs	r2, #24
 800385a:	4694      	mov	ip, r2
 800385c:	44bc      	add	ip, r7
 800385e:	4463      	add	r3, ip
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	e0d5      	b.n	8003a12 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	69da      	ldr	r2, [r3, #28]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	429a      	cmp	r2, r3
 8003870:	d000      	beq.n	8003874 <UART_SetConfig+0x3a8>
 8003872:	e074      	b.n	800395e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8003874:	231b      	movs	r3, #27
 8003876:	2218      	movs	r2, #24
 8003878:	4694      	mov	ip, r2
 800387a:	44bc      	add	ip, r7
 800387c:	4463      	add	r3, ip
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d822      	bhi.n	80038ca <UART_SetConfig+0x3fe>
 8003884:	009a      	lsls	r2, r3, #2
 8003886:	4b6b      	ldr	r3, [pc, #428]	; (8003a34 <UART_SetConfig+0x568>)
 8003888:	18d3      	adds	r3, r2, r3
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800388e:	f7ff f851 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8003892:	0003      	movs	r3, r0
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003896:	e022      	b.n	80038de <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003898:	f7ff f862 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 800389c:	0003      	movs	r3, r0
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038a0:	e01d      	b.n	80038de <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038a2:	4b65      	ldr	r3, [pc, #404]	; (8003a38 <UART_SetConfig+0x56c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2210      	movs	r2, #16
 80038a8:	4013      	ands	r3, r2
 80038aa:	d002      	beq.n	80038b2 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80038ac:	4b63      	ldr	r3, [pc, #396]	; (8003a3c <UART_SetConfig+0x570>)
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80038b0:	e015      	b.n	80038de <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 80038b2:	4b63      	ldr	r3, [pc, #396]	; (8003a40 <UART_SetConfig+0x574>)
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038b6:	e012      	b.n	80038de <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b8:	f7fe ff8c 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 80038bc:	0003      	movs	r3, r0
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038c0:	e00d      	b.n	80038de <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	021b      	lsls	r3, r3, #8
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038c8:	e009      	b.n	80038de <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80038ce:	231a      	movs	r3, #26
 80038d0:	2218      	movs	r2, #24
 80038d2:	4694      	mov	ip, r2
 80038d4:	44bc      	add	ip, r7
 80038d6:	4463      	add	r3, ip
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
        break;
 80038dc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d100      	bne.n	80038e6 <UART_SetConfig+0x41a>
 80038e4:	e095      	b.n	8003a12 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	005a      	lsls	r2, r3, #1
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	18d2      	adds	r2, r2, r3
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	0019      	movs	r1, r3
 80038f8:	0010      	movs	r0, r2
 80038fa:	f7fc fc17 	bl	800012c <__udivsi3>
 80038fe:	0003      	movs	r3, r0
 8003900:	b29b      	uxth	r3, r3
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	2b0f      	cmp	r3, #15
 8003908:	d921      	bls.n	800394e <UART_SetConfig+0x482>
 800390a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	025b      	lsls	r3, r3, #9
 8003910:	429a      	cmp	r2, r3
 8003912:	d21c      	bcs.n	800394e <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	b29a      	uxth	r2, r3
 8003918:	200e      	movs	r0, #14
 800391a:	2418      	movs	r4, #24
 800391c:	193b      	adds	r3, r7, r4
 800391e:	181b      	adds	r3, r3, r0
 8003920:	210f      	movs	r1, #15
 8003922:	438a      	bics	r2, r1
 8003924:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	b29b      	uxth	r3, r3
 800392c:	2207      	movs	r2, #7
 800392e:	4013      	ands	r3, r2
 8003930:	b299      	uxth	r1, r3
 8003932:	193b      	adds	r3, r7, r4
 8003934:	181b      	adds	r3, r3, r0
 8003936:	193a      	adds	r2, r7, r4
 8003938:	1812      	adds	r2, r2, r0
 800393a:	8812      	ldrh	r2, [r2, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	193a      	adds	r2, r7, r4
 8003946:	1812      	adds	r2, r2, r0
 8003948:	8812      	ldrh	r2, [r2, #0]
 800394a:	60da      	str	r2, [r3, #12]
 800394c:	e061      	b.n	8003a12 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800394e:	231a      	movs	r3, #26
 8003950:	2218      	movs	r2, #24
 8003952:	4694      	mov	ip, r2
 8003954:	44bc      	add	ip, r7
 8003956:	4463      	add	r3, ip
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	e059      	b.n	8003a12 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800395e:	231b      	movs	r3, #27
 8003960:	2218      	movs	r2, #24
 8003962:	4694      	mov	ip, r2
 8003964:	44bc      	add	ip, r7
 8003966:	4463      	add	r3, ip
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b08      	cmp	r3, #8
 800396c:	d822      	bhi.n	80039b4 <UART_SetConfig+0x4e8>
 800396e:	009a      	lsls	r2, r3, #2
 8003970:	4b34      	ldr	r3, [pc, #208]	; (8003a44 <UART_SetConfig+0x578>)
 8003972:	18d3      	adds	r3, r2, r3
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003978:	f7fe ffdc 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 800397c:	0003      	movs	r3, r0
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003980:	e022      	b.n	80039c8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003982:	f7fe ffed 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8003986:	0003      	movs	r3, r0
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800398a:	e01d      	b.n	80039c8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800398c:	4b2a      	ldr	r3, [pc, #168]	; (8003a38 <UART_SetConfig+0x56c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2210      	movs	r2, #16
 8003992:	4013      	ands	r3, r2
 8003994:	d002      	beq.n	800399c <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003996:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <UART_SetConfig+0x570>)
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800399a:	e015      	b.n	80039c8 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800399c:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <UART_SetConfig+0x574>)
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039a0:	e012      	b.n	80039c8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039a2:	f7fe ff17 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 80039a6:	0003      	movs	r3, r0
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039aa:	e00d      	b.n	80039c8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039b2:	e009      	b.n	80039c8 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80039b8:	231a      	movs	r3, #26
 80039ba:	2218      	movs	r2, #24
 80039bc:	4694      	mov	ip, r2
 80039be:	44bc      	add	ip, r7
 80039c0:	4463      	add	r3, ip
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
        break;
 80039c6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80039c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d021      	beq.n	8003a12 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	085a      	lsrs	r2, r3, #1
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	18d2      	adds	r2, r2, r3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	0019      	movs	r1, r3
 80039de:	0010      	movs	r0, r2
 80039e0:	f7fc fba4 	bl	800012c <__udivsi3>
 80039e4:	0003      	movs	r3, r0
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	2b0f      	cmp	r3, #15
 80039ee:	d909      	bls.n	8003a04 <UART_SetConfig+0x538>
 80039f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	025b      	lsls	r3, r3, #9
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d204      	bcs.n	8003a04 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	e006      	b.n	8003a12 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003a04:	231a      	movs	r3, #26
 8003a06:	2218      	movs	r2, #24
 8003a08:	4694      	mov	ip, r2
 8003a0a:	44bc      	add	ip, r7
 8003a0c:	4463      	add	r3, ip
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	2200      	movs	r2, #0
 8003a16:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a1e:	231a      	movs	r3, #26
 8003a20:	2218      	movs	r2, #24
 8003a22:	4694      	mov	ip, r2
 8003a24:	44bc      	add	ip, r7
 8003a26:	4463      	add	r3, ip
 8003a28:	781b      	ldrb	r3, [r3, #0]
}
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b00e      	add	sp, #56	; 0x38
 8003a30:	bdb0      	pop	{r4, r5, r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	08005360 	.word	0x08005360
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	003d0900 	.word	0x003d0900
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	08005384 	.word	0x08005384

08003a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	2201      	movs	r2, #1
 8003a56:	4013      	ands	r3, r2
 8003a58:	d00b      	beq.n	8003a72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a4a      	ldr	r2, [pc, #296]	; (8003b8c <UART_AdvFeatureConfig+0x144>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	0019      	movs	r1, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2202      	movs	r2, #2
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d00b      	beq.n	8003a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4a43      	ldr	r2, [pc, #268]	; (8003b90 <UART_AdvFeatureConfig+0x148>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	0019      	movs	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	2204      	movs	r2, #4
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d00b      	beq.n	8003ab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4a3b      	ldr	r2, [pc, #236]	; (8003b94 <UART_AdvFeatureConfig+0x14c>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	2208      	movs	r2, #8
 8003abc:	4013      	ands	r3, r2
 8003abe:	d00b      	beq.n	8003ad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4a34      	ldr	r2, [pc, #208]	; (8003b98 <UART_AdvFeatureConfig+0x150>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	0019      	movs	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	2210      	movs	r2, #16
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d00b      	beq.n	8003afa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <UART_AdvFeatureConfig+0x154>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	0019      	movs	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	2220      	movs	r2, #32
 8003b00:	4013      	ands	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	4a25      	ldr	r2, [pc, #148]	; (8003ba0 <UART_AdvFeatureConfig+0x158>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	0019      	movs	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	2240      	movs	r2, #64	; 0x40
 8003b22:	4013      	ands	r3, r2
 8003b24:	d01d      	beq.n	8003b62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <UART_AdvFeatureConfig+0x15c>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	0019      	movs	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	035b      	lsls	r3, r3, #13
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d10b      	bne.n	8003b62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <UART_AdvFeatureConfig+0x160>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	0019      	movs	r1, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	2280      	movs	r2, #128	; 0x80
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4a0e      	ldr	r2, [pc, #56]	; (8003bac <UART_AdvFeatureConfig+0x164>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	605a      	str	r2, [r3, #4]
  }
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b002      	add	sp, #8
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	fffdffff 	.word	0xfffdffff
 8003b90:	fffeffff 	.word	0xfffeffff
 8003b94:	fffbffff 	.word	0xfffbffff
 8003b98:	ffff7fff 	.word	0xffff7fff
 8003b9c:	ffffefff 	.word	0xffffefff
 8003ba0:	ffffdfff 	.word	0xffffdfff
 8003ba4:	ffefffff 	.word	0xffefffff
 8003ba8:	ff9fffff 	.word	0xff9fffff
 8003bac:	fff7ffff 	.word	0xfff7ffff

08003bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2280      	movs	r2, #128	; 0x80
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bc0:	f7fd fe38 	bl	8001834 <HAL_GetTick>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2208      	movs	r2, #8
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d10c      	bne.n	8003bf0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2280      	movs	r2, #128	; 0x80
 8003bda:	0391      	lsls	r1, r2, #14
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <UART_CheckIdleState+0x8c>)
 8003be0:	9200      	str	r2, [sp, #0]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f000 f82c 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8003be8:	1e03      	subs	r3, r0, #0
 8003bea:	d001      	beq.n	8003bf0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e021      	b.n	8003c34 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d10c      	bne.n	8003c18 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2280      	movs	r2, #128	; 0x80
 8003c02:	03d1      	lsls	r1, r2, #15
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4a0d      	ldr	r2, [pc, #52]	; (8003c3c <UART_CheckIdleState+0x8c>)
 8003c08:	9200      	str	r2, [sp, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f000 f818 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8003c10:	1e03      	subs	r3, r0, #0
 8003c12:	d001      	beq.n	8003c18 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e00d      	b.n	8003c34 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2274      	movs	r2, #116	; 0x74
 8003c2e:	2100      	movs	r1, #0
 8003c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	0018      	movs	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b004      	add	sp, #16
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	01ffffff 	.word	0x01ffffff

08003c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b094      	sub	sp, #80	; 0x50
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	1dfb      	adds	r3, r7, #7
 8003c4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c50:	e0a3      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c54:	3301      	adds	r3, #1
 8003c56:	d100      	bne.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003c58:	e09f      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7fd fdeb 	bl	8001834 <HAL_GetTick>
 8003c5e:	0002      	movs	r2, r0
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d13d      	bne.n	8003cec <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c70:	f3ef 8310 	mrs	r3, PRIMASK
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c78:	647b      	str	r3, [r7, #68]	; 0x44
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	f383 8810 	msr	PRIMASK, r3
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	494c      	ldr	r1, [pc, #304]	; (8003dc4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c92:	400a      	ands	r2, r1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c98:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003caa:	643b      	str	r3, [r7, #64]	; 0x40
 8003cac:	2301      	movs	r3, #1
 8003cae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	f383 8810 	msr	PRIMASK, r3
}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	438a      	bics	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cce:	f383 8810 	msr	PRIMASK, r3
}
 8003cd2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2274      	movs	r2, #116	; 0x74
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e067      	b.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d050      	beq.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	401a      	ands	r2, r3
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d146      	bne.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2280      	movs	r2, #128	; 0x80
 8003d12:	0112      	lsls	r2, r2, #4
 8003d14:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d16:	f3ef 8310 	mrs	r3, PRIMASK
 8003d1a:	613b      	str	r3, [r7, #16]
  return(result);
 8003d1c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d20:	2301      	movs	r3, #1
 8003d22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f383 8810 	msr	PRIMASK, r3
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4923      	ldr	r1, [pc, #140]	; (8003dc4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003d38:	400a      	ands	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f383 8810 	msr	PRIMASK, r3
}
 8003d46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d48:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d4e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d50:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d52:	2301      	movs	r3, #1
 8003d54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f383 8810 	msr	PRIMASK, r3
}
 8003d5c:	46c0      	nop			; (mov r8, r8)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2101      	movs	r1, #1
 8003d6a:	438a      	bics	r2, r1
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	f383 8810 	msr	PRIMASK, r3
}
 8003d78:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2280      	movs	r2, #128	; 0x80
 8003d8a:	2120      	movs	r1, #32
 8003d8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2274      	movs	r2, #116	; 0x74
 8003d92:	2100      	movs	r1, #0
 8003d94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e010      	b.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	4013      	ands	r3, r2
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	425a      	negs	r2, r3
 8003daa:	4153      	adcs	r3, r2
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	001a      	movs	r2, r3
 8003db0:	1dfb      	adds	r3, r7, #7
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d100      	bne.n	8003dba <UART_WaitOnFlagUntilTimeout+0x17a>
 8003db8:	e74b      	b.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b014      	add	sp, #80	; 0x50
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	fffffe5f 	.word	0xfffffe5f

08003dc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	; 0x30
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	1dbb      	adds	r3, r7, #6
 8003dd4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1dba      	adds	r2, r7, #6
 8003de0:	2158      	movs	r1, #88	; 0x58
 8003de2:	8812      	ldrh	r2, [r2, #0]
 8003de4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1dba      	adds	r2, r7, #6
 8003dea:	215a      	movs	r1, #90	; 0x5a
 8003dec:	8812      	ldrh	r2, [r2, #0]
 8003dee:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	015b      	lsls	r3, r3, #5
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d10d      	bne.n	8003e1e <UART_Start_Receive_IT+0x56>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <UART_Start_Receive_IT+0x4c>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	225c      	movs	r2, #92	; 0x5c
 8003e0e:	4943      	ldr	r1, [pc, #268]	; (8003f1c <UART_Start_Receive_IT+0x154>)
 8003e10:	5299      	strh	r1, [r3, r2]
 8003e12:	e02e      	b.n	8003e72 <UART_Start_Receive_IT+0xaa>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	225c      	movs	r2, #92	; 0x5c
 8003e18:	21ff      	movs	r1, #255	; 0xff
 8003e1a:	5299      	strh	r1, [r3, r2]
 8003e1c:	e029      	b.n	8003e72 <UART_Start_Receive_IT+0xaa>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10d      	bne.n	8003e42 <UART_Start_Receive_IT+0x7a>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d104      	bne.n	8003e38 <UART_Start_Receive_IT+0x70>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	225c      	movs	r2, #92	; 0x5c
 8003e32:	21ff      	movs	r1, #255	; 0xff
 8003e34:	5299      	strh	r1, [r3, r2]
 8003e36:	e01c      	b.n	8003e72 <UART_Start_Receive_IT+0xaa>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	225c      	movs	r2, #92	; 0x5c
 8003e3c:	217f      	movs	r1, #127	; 0x7f
 8003e3e:	5299      	strh	r1, [r3, r2]
 8003e40:	e017      	b.n	8003e72 <UART_Start_Receive_IT+0xaa>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	055b      	lsls	r3, r3, #21
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d10d      	bne.n	8003e6a <UART_Start_Receive_IT+0xa2>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d104      	bne.n	8003e60 <UART_Start_Receive_IT+0x98>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	225c      	movs	r2, #92	; 0x5c
 8003e5a:	217f      	movs	r1, #127	; 0x7f
 8003e5c:	5299      	strh	r1, [r3, r2]
 8003e5e:	e008      	b.n	8003e72 <UART_Start_Receive_IT+0xaa>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	225c      	movs	r2, #92	; 0x5c
 8003e64:	213f      	movs	r1, #63	; 0x3f
 8003e66:	5299      	strh	r1, [r3, r2]
 8003e68:	e003      	b.n	8003e72 <UART_Start_Receive_IT+0xaa>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	225c      	movs	r2, #92	; 0x5c
 8003e6e:	2100      	movs	r1, #0
 8003e70:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	2100      	movs	r1, #0
 8003e78:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2222      	movs	r2, #34	; 0x22
 8003e7e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e80:	f3ef 8310 	mrs	r3, PRIMASK
 8003e84:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e86:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	f383 8810 	msr	PRIMASK, r3
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	609a      	str	r2, [r3, #8]
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	f383 8810 	msr	PRIMASK, r3
}
 8003eb0:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	015b      	lsls	r3, r3, #5
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d107      	bne.n	8003ece <UART_Start_Receive_IT+0x106>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d103      	bne.n	8003ece <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a15      	ldr	r2, [pc, #84]	; (8003f20 <UART_Start_Receive_IT+0x158>)
 8003eca:	665a      	str	r2, [r3, #100]	; 0x64
 8003ecc:	e002      	b.n	8003ed4 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <UART_Start_Receive_IT+0x15c>)
 8003ed2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2274      	movs	r2, #116	; 0x74
 8003ed8:	2100      	movs	r1, #0
 8003eda:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003edc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee0:	613b      	str	r3, [r7, #16]
  return(result);
 8003ee2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f383 8810 	msr	PRIMASK, r3
}
 8003ef0:	46c0      	nop			; (mov r8, r8)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2190      	movs	r1, #144	; 0x90
 8003efe:	0049      	lsls	r1, r1, #1
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f383 8810 	msr	PRIMASK, r3
}
 8003f0e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b00c      	add	sp, #48	; 0x30
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	000001ff 	.word	0x000001ff
 8003f20:	080041d9 	.word	0x080041d9
 8003f24:	08004071 	.word	0x08004071

08003f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08e      	sub	sp, #56	; 0x38
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f30:	f3ef 8310 	mrs	r3, PRIMASK
 8003f34:	617b      	str	r3, [r7, #20]
  return(result);
 8003f36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f383 8810 	msr	PRIMASK, r3
}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4925      	ldr	r1, [pc, #148]	; (8003fe8 <UART_EndRxTransfer+0xc0>)
 8003f52:	400a      	ands	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f383 8810 	msr	PRIMASK, r3
}
 8003f60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f62:	f3ef 8310 	mrs	r3, PRIMASK
 8003f66:	623b      	str	r3, [r7, #32]
  return(result);
 8003f68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	f383 8810 	msr	PRIMASK, r3
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2101      	movs	r1, #1
 8003f84:	438a      	bics	r2, r1
 8003f86:	609a      	str	r2, [r3, #8]
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	f383 8810 	msr	PRIMASK, r3
}
 8003f92:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d118      	bne.n	8003fce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f383 8810 	msr	PRIMASK, r3
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2110      	movs	r1, #16
 8003fbe:	438a      	bics	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f383 8810 	msr	PRIMASK, r3
}
 8003fcc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003fe0:	46c0      	nop			; (mov r8, r8)
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	b00e      	add	sp, #56	; 0x38
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	fffffedf 	.word	0xfffffedf

08003fec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	225a      	movs	r2, #90	; 0x5a
 8003ffe:	2100      	movs	r1, #0
 8004000:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2252      	movs	r2, #82	; 0x52
 8004006:	2100      	movs	r1, #0
 8004008:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	0018      	movs	r0, r3
 800400e:	f7ff fa49 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	46bd      	mov	sp, r7
 8004016:	b004      	add	sp, #16
 8004018:	bd80      	pop	{r7, pc}

0800401a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b086      	sub	sp, #24
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004022:	f3ef 8310 	mrs	r3, PRIMASK
 8004026:	60bb      	str	r3, [r7, #8]
  return(result);
 8004028:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	2301      	movs	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f383 8810 	msr	PRIMASK, r3
}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2140      	movs	r1, #64	; 0x40
 8004044:	438a      	bics	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f383 8810 	msr	PRIMASK, r3
}
 8004052:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	0018      	movs	r0, r3
 8004064:	f7ff fa16 	bl	8003494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004068:	46c0      	nop			; (mov r8, r8)
 800406a:	46bd      	mov	sp, r7
 800406c:	b006      	add	sp, #24
 800406e:	bd80      	pop	{r7, pc}

08004070 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b090      	sub	sp, #64	; 0x40
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004078:	203e      	movs	r0, #62	; 0x3e
 800407a:	183b      	adds	r3, r7, r0
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	215c      	movs	r1, #92	; 0x5c
 8004080:	5a52      	ldrh	r2, [r2, r1]
 8004082:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004088:	2b22      	cmp	r3, #34	; 0x22
 800408a:	d000      	beq.n	800408e <UART_RxISR_8BIT+0x1e>
 800408c:	e095      	b.n	80041ba <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004094:	213c      	movs	r1, #60	; 0x3c
 8004096:	187b      	adds	r3, r7, r1
 8004098:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800409a:	187b      	adds	r3, r7, r1
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	183b      	adds	r3, r7, r0
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b2d9      	uxtb	r1, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	400a      	ands	r2, r1
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	225a      	movs	r2, #90	; 0x5a
 80040be:	5a9b      	ldrh	r3, [r3, r2]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b299      	uxth	r1, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	225a      	movs	r2, #90	; 0x5a
 80040ca:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	225a      	movs	r2, #90	; 0x5a
 80040d0:	5a9b      	ldrh	r3, [r3, r2]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d178      	bne.n	80041ca <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d8:	f3ef 8310 	mrs	r3, PRIMASK
 80040dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80040de:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80040e2:	2301      	movs	r3, #1
 80040e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f383 8810 	msr	PRIMASK, r3
}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4936      	ldr	r1, [pc, #216]	; (80041d4 <UART_RxISR_8BIT+0x164>)
 80040fa:	400a      	ands	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004100:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f383 8810 	msr	PRIMASK, r3
}
 8004108:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410a:	f3ef 8310 	mrs	r3, PRIMASK
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004112:	637b      	str	r3, [r7, #52]	; 0x34
 8004114:	2301      	movs	r3, #1
 8004116:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411a:	f383 8810 	msr	PRIMASK, r3
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2101      	movs	r1, #1
 800412c:	438a      	bics	r2, r1
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004136:	f383 8810 	msr	PRIMASK, r3
}
 800413a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414c:	2b01      	cmp	r3, #1
 800414e:	d12f      	bne.n	80041b0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004156:	f3ef 8310 	mrs	r3, PRIMASK
 800415a:	60fb      	str	r3, [r7, #12]
  return(result);
 800415c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415e:	633b      	str	r3, [r7, #48]	; 0x30
 8004160:	2301      	movs	r3, #1
 8004162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f383 8810 	msr	PRIMASK, r3
}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2110      	movs	r1, #16
 8004178:	438a      	bics	r2, r1
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f383 8810 	msr	PRIMASK, r3
}
 8004186:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	2210      	movs	r2, #16
 8004190:	4013      	ands	r3, r2
 8004192:	2b10      	cmp	r3, #16
 8004194:	d103      	bne.n	800419e <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2210      	movs	r2, #16
 800419c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2258      	movs	r2, #88	; 0x58
 80041a2:	5a9a      	ldrh	r2, [r3, r2]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	0011      	movs	r1, r2
 80041a8:	0018      	movs	r0, r3
 80041aa:	f7ff f983 	bl	80034b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041ae:	e00c      	b.n	80041ca <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	0018      	movs	r0, r3
 80041b4:	f7fc f984 	bl	80004c0 <HAL_UART_RxCpltCallback>
}
 80041b8:	e007      	b.n	80041ca <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2108      	movs	r1, #8
 80041c6:	430a      	orrs	r2, r1
 80041c8:	619a      	str	r2, [r3, #24]
}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b010      	add	sp, #64	; 0x40
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	fffffedf 	.word	0xfffffedf

080041d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b090      	sub	sp, #64	; 0x40
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80041e0:	203e      	movs	r0, #62	; 0x3e
 80041e2:	183b      	adds	r3, r7, r0
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	215c      	movs	r1, #92	; 0x5c
 80041e8:	5a52      	ldrh	r2, [r2, r1]
 80041ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f0:	2b22      	cmp	r3, #34	; 0x22
 80041f2:	d000      	beq.n	80041f6 <UART_RxISR_16BIT+0x1e>
 80041f4:	e095      	b.n	8004322 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041fc:	213c      	movs	r1, #60	; 0x3c
 80041fe:	187b      	adds	r3, r7, r1
 8004200:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004208:	187b      	adds	r3, r7, r1
 800420a:	183a      	adds	r2, r7, r0
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	8812      	ldrh	r2, [r2, #0]
 8004210:	4013      	ands	r3, r2
 8004212:	b29a      	uxth	r2, r3
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	225a      	movs	r2, #90	; 0x5a
 8004226:	5a9b      	ldrh	r3, [r3, r2]
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b299      	uxth	r1, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	225a      	movs	r2, #90	; 0x5a
 8004232:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	225a      	movs	r2, #90	; 0x5a
 8004238:	5a9b      	ldrh	r3, [r3, r2]
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d178      	bne.n	8004332 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004240:	f3ef 8310 	mrs	r3, PRIMASK
 8004244:	617b      	str	r3, [r7, #20]
  return(result);
 8004246:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004248:	637b      	str	r3, [r7, #52]	; 0x34
 800424a:	2301      	movs	r3, #1
 800424c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f383 8810 	msr	PRIMASK, r3
}
 8004254:	46c0      	nop			; (mov r8, r8)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4936      	ldr	r1, [pc, #216]	; (800433c <UART_RxISR_16BIT+0x164>)
 8004262:	400a      	ands	r2, r1
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004268:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f383 8810 	msr	PRIMASK, r3
}
 8004270:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004272:	f3ef 8310 	mrs	r3, PRIMASK
 8004276:	623b      	str	r3, [r7, #32]
  return(result);
 8004278:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	633b      	str	r3, [r7, #48]	; 0x30
 800427c:	2301      	movs	r3, #1
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	f383 8810 	msr	PRIMASK, r3
}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2101      	movs	r1, #1
 8004294:	438a      	bics	r2, r1
 8004296:	609a      	str	r2, [r3, #8]
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	f383 8810 	msr	PRIMASK, r3
}
 80042a2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d12f      	bne.n	8004318 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042be:	f3ef 8310 	mrs	r3, PRIMASK
 80042c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80042c4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c8:	2301      	movs	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f383 8810 	msr	PRIMASK, r3
}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2110      	movs	r1, #16
 80042e0:	438a      	bics	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f383 8810 	msr	PRIMASK, r3
}
 80042ee:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	2210      	movs	r2, #16
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b10      	cmp	r3, #16
 80042fc:	d103      	bne.n	8004306 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2210      	movs	r2, #16
 8004304:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2258      	movs	r2, #88	; 0x58
 800430a:	5a9a      	ldrh	r2, [r3, r2]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	0011      	movs	r1, r2
 8004310:	0018      	movs	r0, r3
 8004312:	f7ff f8cf 	bl	80034b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004316:	e00c      	b.n	8004332 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0018      	movs	r0, r3
 800431c:	f7fc f8d0 	bl	80004c0 <HAL_UART_RxCpltCallback>
}
 8004320:	e007      	b.n	8004332 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699a      	ldr	r2, [r3, #24]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2108      	movs	r1, #8
 800432e:	430a      	orrs	r2, r1
 8004330:	619a      	str	r2, [r3, #24]
}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	46bd      	mov	sp, r7
 8004336:	b010      	add	sp, #64	; 0x40
 8004338:	bd80      	pop	{r7, pc}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	fffffedf 	.word	0xfffffedf

08004340 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	b002      	add	sp, #8
 800434e:	bd80      	pop	{r7, pc}

08004350 <__errno>:
 8004350:	4b01      	ldr	r3, [pc, #4]	; (8004358 <__errno+0x8>)
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	4770      	bx	lr
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	2000000c 	.word	0x2000000c

0800435c <__libc_init_array>:
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	2600      	movs	r6, #0
 8004360:	4d0c      	ldr	r5, [pc, #48]	; (8004394 <__libc_init_array+0x38>)
 8004362:	4c0d      	ldr	r4, [pc, #52]	; (8004398 <__libc_init_array+0x3c>)
 8004364:	1b64      	subs	r4, r4, r5
 8004366:	10a4      	asrs	r4, r4, #2
 8004368:	42a6      	cmp	r6, r4
 800436a:	d109      	bne.n	8004380 <__libc_init_array+0x24>
 800436c:	2600      	movs	r6, #0
 800436e:	f000 fca1 	bl	8004cb4 <_init>
 8004372:	4d0a      	ldr	r5, [pc, #40]	; (800439c <__libc_init_array+0x40>)
 8004374:	4c0a      	ldr	r4, [pc, #40]	; (80043a0 <__libc_init_array+0x44>)
 8004376:	1b64      	subs	r4, r4, r5
 8004378:	10a4      	asrs	r4, r4, #2
 800437a:	42a6      	cmp	r6, r4
 800437c:	d105      	bne.n	800438a <__libc_init_array+0x2e>
 800437e:	bd70      	pop	{r4, r5, r6, pc}
 8004380:	00b3      	lsls	r3, r6, #2
 8004382:	58eb      	ldr	r3, [r5, r3]
 8004384:	4798      	blx	r3
 8004386:	3601      	adds	r6, #1
 8004388:	e7ee      	b.n	8004368 <__libc_init_array+0xc>
 800438a:	00b3      	lsls	r3, r6, #2
 800438c:	58eb      	ldr	r3, [r5, r3]
 800438e:	4798      	blx	r3
 8004390:	3601      	adds	r6, #1
 8004392:	e7f2      	b.n	800437a <__libc_init_array+0x1e>
 8004394:	080053e4 	.word	0x080053e4
 8004398:	080053e4 	.word	0x080053e4
 800439c:	080053e4 	.word	0x080053e4
 80043a0:	080053e8 	.word	0x080053e8

080043a4 <malloc>:
 80043a4:	b510      	push	{r4, lr}
 80043a6:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <malloc+0x10>)
 80043a8:	0001      	movs	r1, r0
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	f000 f86e 	bl	800448c <_malloc_r>
 80043b0:	bd10      	pop	{r4, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	2000000c 	.word	0x2000000c

080043b8 <memcmp>:
 80043b8:	b530      	push	{r4, r5, lr}
 80043ba:	2400      	movs	r4, #0
 80043bc:	3901      	subs	r1, #1
 80043be:	42a2      	cmp	r2, r4
 80043c0:	d101      	bne.n	80043c6 <memcmp+0xe>
 80043c2:	2000      	movs	r0, #0
 80043c4:	e005      	b.n	80043d2 <memcmp+0x1a>
 80043c6:	5d03      	ldrb	r3, [r0, r4]
 80043c8:	3401      	adds	r4, #1
 80043ca:	5d0d      	ldrb	r5, [r1, r4]
 80043cc:	42ab      	cmp	r3, r5
 80043ce:	d0f6      	beq.n	80043be <memcmp+0x6>
 80043d0:	1b58      	subs	r0, r3, r5
 80043d2:	bd30      	pop	{r4, r5, pc}

080043d4 <memcpy>:
 80043d4:	2300      	movs	r3, #0
 80043d6:	b510      	push	{r4, lr}
 80043d8:	429a      	cmp	r2, r3
 80043da:	d100      	bne.n	80043de <memcpy+0xa>
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	5ccc      	ldrb	r4, [r1, r3]
 80043e0:	54c4      	strb	r4, [r0, r3]
 80043e2:	3301      	adds	r3, #1
 80043e4:	e7f8      	b.n	80043d8 <memcpy+0x4>

080043e6 <memset>:
 80043e6:	0003      	movs	r3, r0
 80043e8:	1882      	adds	r2, r0, r2
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d100      	bne.n	80043f0 <memset+0xa>
 80043ee:	4770      	bx	lr
 80043f0:	7019      	strb	r1, [r3, #0]
 80043f2:	3301      	adds	r3, #1
 80043f4:	e7f9      	b.n	80043ea <memset+0x4>
	...

080043f8 <_free_r>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	0005      	movs	r5, r0
 80043fc:	2900      	cmp	r1, #0
 80043fe:	d010      	beq.n	8004422 <_free_r+0x2a>
 8004400:	1f0c      	subs	r4, r1, #4
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	da00      	bge.n	800440a <_free_r+0x12>
 8004408:	18e4      	adds	r4, r4, r3
 800440a:	0028      	movs	r0, r5
 800440c:	f000 f910 	bl	8004630 <__malloc_lock>
 8004410:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <_free_r+0x90>)
 8004412:	6813      	ldr	r3, [r2, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <_free_r+0x2c>
 8004418:	6063      	str	r3, [r4, #4]
 800441a:	6014      	str	r4, [r2, #0]
 800441c:	0028      	movs	r0, r5
 800441e:	f000 f90f 	bl	8004640 <__malloc_unlock>
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	42a3      	cmp	r3, r4
 8004426:	d908      	bls.n	800443a <_free_r+0x42>
 8004428:	6821      	ldr	r1, [r4, #0]
 800442a:	1860      	adds	r0, r4, r1
 800442c:	4283      	cmp	r3, r0
 800442e:	d1f3      	bne.n	8004418 <_free_r+0x20>
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	1841      	adds	r1, r0, r1
 8004436:	6021      	str	r1, [r4, #0]
 8004438:	e7ee      	b.n	8004418 <_free_r+0x20>
 800443a:	001a      	movs	r2, r3
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <_free_r+0x4e>
 8004442:	42a3      	cmp	r3, r4
 8004444:	d9f9      	bls.n	800443a <_free_r+0x42>
 8004446:	6811      	ldr	r1, [r2, #0]
 8004448:	1850      	adds	r0, r2, r1
 800444a:	42a0      	cmp	r0, r4
 800444c:	d10b      	bne.n	8004466 <_free_r+0x6e>
 800444e:	6820      	ldr	r0, [r4, #0]
 8004450:	1809      	adds	r1, r1, r0
 8004452:	1850      	adds	r0, r2, r1
 8004454:	6011      	str	r1, [r2, #0]
 8004456:	4283      	cmp	r3, r0
 8004458:	d1e0      	bne.n	800441c <_free_r+0x24>
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	1841      	adds	r1, r0, r1
 8004460:	6011      	str	r1, [r2, #0]
 8004462:	6053      	str	r3, [r2, #4]
 8004464:	e7da      	b.n	800441c <_free_r+0x24>
 8004466:	42a0      	cmp	r0, r4
 8004468:	d902      	bls.n	8004470 <_free_r+0x78>
 800446a:	230c      	movs	r3, #12
 800446c:	602b      	str	r3, [r5, #0]
 800446e:	e7d5      	b.n	800441c <_free_r+0x24>
 8004470:	6821      	ldr	r1, [r4, #0]
 8004472:	1860      	adds	r0, r4, r1
 8004474:	4283      	cmp	r3, r0
 8004476:	d103      	bne.n	8004480 <_free_r+0x88>
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	1841      	adds	r1, r0, r1
 800447e:	6021      	str	r1, [r4, #0]
 8004480:	6063      	str	r3, [r4, #4]
 8004482:	6054      	str	r4, [r2, #4]
 8004484:	e7ca      	b.n	800441c <_free_r+0x24>
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	20000398 	.word	0x20000398

0800448c <_malloc_r>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	2303      	movs	r3, #3
 8004490:	1ccd      	adds	r5, r1, #3
 8004492:	439d      	bics	r5, r3
 8004494:	3508      	adds	r5, #8
 8004496:	0006      	movs	r6, r0
 8004498:	2d0c      	cmp	r5, #12
 800449a:	d21f      	bcs.n	80044dc <_malloc_r+0x50>
 800449c:	250c      	movs	r5, #12
 800449e:	42a9      	cmp	r1, r5
 80044a0:	d81e      	bhi.n	80044e0 <_malloc_r+0x54>
 80044a2:	0030      	movs	r0, r6
 80044a4:	f000 f8c4 	bl	8004630 <__malloc_lock>
 80044a8:	4925      	ldr	r1, [pc, #148]	; (8004540 <_malloc_r+0xb4>)
 80044aa:	680a      	ldr	r2, [r1, #0]
 80044ac:	0014      	movs	r4, r2
 80044ae:	2c00      	cmp	r4, #0
 80044b0:	d11a      	bne.n	80044e8 <_malloc_r+0x5c>
 80044b2:	4f24      	ldr	r7, [pc, #144]	; (8004544 <_malloc_r+0xb8>)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d104      	bne.n	80044c4 <_malloc_r+0x38>
 80044ba:	0021      	movs	r1, r4
 80044bc:	0030      	movs	r0, r6
 80044be:	f000 f843 	bl	8004548 <_sbrk_r>
 80044c2:	6038      	str	r0, [r7, #0]
 80044c4:	0029      	movs	r1, r5
 80044c6:	0030      	movs	r0, r6
 80044c8:	f000 f83e 	bl	8004548 <_sbrk_r>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d12b      	bne.n	8004528 <_malloc_r+0x9c>
 80044d0:	230c      	movs	r3, #12
 80044d2:	0030      	movs	r0, r6
 80044d4:	6033      	str	r3, [r6, #0]
 80044d6:	f000 f8b3 	bl	8004640 <__malloc_unlock>
 80044da:	e003      	b.n	80044e4 <_malloc_r+0x58>
 80044dc:	2d00      	cmp	r5, #0
 80044de:	dade      	bge.n	800449e <_malloc_r+0x12>
 80044e0:	230c      	movs	r3, #12
 80044e2:	6033      	str	r3, [r6, #0]
 80044e4:	2000      	movs	r0, #0
 80044e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	1b5b      	subs	r3, r3, r5
 80044ec:	d419      	bmi.n	8004522 <_malloc_r+0x96>
 80044ee:	2b0b      	cmp	r3, #11
 80044f0:	d903      	bls.n	80044fa <_malloc_r+0x6e>
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	18e4      	adds	r4, r4, r3
 80044f6:	6025      	str	r5, [r4, #0]
 80044f8:	e003      	b.n	8004502 <_malloc_r+0x76>
 80044fa:	6863      	ldr	r3, [r4, #4]
 80044fc:	42a2      	cmp	r2, r4
 80044fe:	d10e      	bne.n	800451e <_malloc_r+0x92>
 8004500:	600b      	str	r3, [r1, #0]
 8004502:	0030      	movs	r0, r6
 8004504:	f000 f89c 	bl	8004640 <__malloc_unlock>
 8004508:	0020      	movs	r0, r4
 800450a:	2207      	movs	r2, #7
 800450c:	300b      	adds	r0, #11
 800450e:	1d23      	adds	r3, r4, #4
 8004510:	4390      	bics	r0, r2
 8004512:	1ac2      	subs	r2, r0, r3
 8004514:	4298      	cmp	r0, r3
 8004516:	d0e6      	beq.n	80044e6 <_malloc_r+0x5a>
 8004518:	1a1b      	subs	r3, r3, r0
 800451a:	50a3      	str	r3, [r4, r2]
 800451c:	e7e3      	b.n	80044e6 <_malloc_r+0x5a>
 800451e:	6053      	str	r3, [r2, #4]
 8004520:	e7ef      	b.n	8004502 <_malloc_r+0x76>
 8004522:	0022      	movs	r2, r4
 8004524:	6864      	ldr	r4, [r4, #4]
 8004526:	e7c2      	b.n	80044ae <_malloc_r+0x22>
 8004528:	2303      	movs	r3, #3
 800452a:	1cc4      	adds	r4, r0, #3
 800452c:	439c      	bics	r4, r3
 800452e:	42a0      	cmp	r0, r4
 8004530:	d0e1      	beq.n	80044f6 <_malloc_r+0x6a>
 8004532:	1a21      	subs	r1, r4, r0
 8004534:	0030      	movs	r0, r6
 8004536:	f000 f807 	bl	8004548 <_sbrk_r>
 800453a:	1c43      	adds	r3, r0, #1
 800453c:	d1db      	bne.n	80044f6 <_malloc_r+0x6a>
 800453e:	e7c7      	b.n	80044d0 <_malloc_r+0x44>
 8004540:	20000398 	.word	0x20000398
 8004544:	2000039c 	.word	0x2000039c

08004548 <_sbrk_r>:
 8004548:	2300      	movs	r3, #0
 800454a:	b570      	push	{r4, r5, r6, lr}
 800454c:	4d06      	ldr	r5, [pc, #24]	; (8004568 <_sbrk_r+0x20>)
 800454e:	0004      	movs	r4, r0
 8004550:	0008      	movs	r0, r1
 8004552:	602b      	str	r3, [r5, #0]
 8004554:	f7fc f936 	bl	80007c4 <_sbrk>
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d103      	bne.n	8004564 <_sbrk_r+0x1c>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d000      	beq.n	8004564 <_sbrk_r+0x1c>
 8004562:	6023      	str	r3, [r4, #0]
 8004564:	bd70      	pop	{r4, r5, r6, pc}
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	2000049c 	.word	0x2000049c

0800456c <strncpy>:
 800456c:	0003      	movs	r3, r0
 800456e:	b530      	push	{r4, r5, lr}
 8004570:	001d      	movs	r5, r3
 8004572:	2a00      	cmp	r2, #0
 8004574:	d006      	beq.n	8004584 <strncpy+0x18>
 8004576:	780c      	ldrb	r4, [r1, #0]
 8004578:	3a01      	subs	r2, #1
 800457a:	3301      	adds	r3, #1
 800457c:	702c      	strb	r4, [r5, #0]
 800457e:	3101      	adds	r1, #1
 8004580:	2c00      	cmp	r4, #0
 8004582:	d1f5      	bne.n	8004570 <strncpy+0x4>
 8004584:	2100      	movs	r1, #0
 8004586:	189a      	adds	r2, r3, r2
 8004588:	4293      	cmp	r3, r2
 800458a:	d100      	bne.n	800458e <strncpy+0x22>
 800458c:	bd30      	pop	{r4, r5, pc}
 800458e:	7019      	strb	r1, [r3, #0]
 8004590:	3301      	adds	r3, #1
 8004592:	e7f9      	b.n	8004588 <strncpy+0x1c>

08004594 <strstr>:
 8004594:	780a      	ldrb	r2, [r1, #0]
 8004596:	b530      	push	{r4, r5, lr}
 8004598:	2a00      	cmp	r2, #0
 800459a:	d10c      	bne.n	80045b6 <strstr+0x22>
 800459c:	bd30      	pop	{r4, r5, pc}
 800459e:	429a      	cmp	r2, r3
 80045a0:	d108      	bne.n	80045b4 <strstr+0x20>
 80045a2:	2301      	movs	r3, #1
 80045a4:	5ccc      	ldrb	r4, [r1, r3]
 80045a6:	2c00      	cmp	r4, #0
 80045a8:	d0f8      	beq.n	800459c <strstr+0x8>
 80045aa:	5cc5      	ldrb	r5, [r0, r3]
 80045ac:	42a5      	cmp	r5, r4
 80045ae:	d101      	bne.n	80045b4 <strstr+0x20>
 80045b0:	3301      	adds	r3, #1
 80045b2:	e7f7      	b.n	80045a4 <strstr+0x10>
 80045b4:	3001      	adds	r0, #1
 80045b6:	7803      	ldrb	r3, [r0, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <strstr+0xa>
 80045bc:	0018      	movs	r0, r3
 80045be:	e7ed      	b.n	800459c <strstr+0x8>

080045c0 <_vsniprintf_r>:
 80045c0:	b530      	push	{r4, r5, lr}
 80045c2:	0014      	movs	r4, r2
 80045c4:	0005      	movs	r5, r0
 80045c6:	001a      	movs	r2, r3
 80045c8:	b09b      	sub	sp, #108	; 0x6c
 80045ca:	2c00      	cmp	r4, #0
 80045cc:	da05      	bge.n	80045da <_vsniprintf_r+0x1a>
 80045ce:	238b      	movs	r3, #139	; 0x8b
 80045d0:	6003      	str	r3, [r0, #0]
 80045d2:	2001      	movs	r0, #1
 80045d4:	4240      	negs	r0, r0
 80045d6:	b01b      	add	sp, #108	; 0x6c
 80045d8:	bd30      	pop	{r4, r5, pc}
 80045da:	2382      	movs	r3, #130	; 0x82
 80045dc:	4668      	mov	r0, sp
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	8183      	strh	r3, [r0, #12]
 80045e2:	2300      	movs	r3, #0
 80045e4:	9100      	str	r1, [sp, #0]
 80045e6:	9104      	str	r1, [sp, #16]
 80045e8:	429c      	cmp	r4, r3
 80045ea:	d000      	beq.n	80045ee <_vsniprintf_r+0x2e>
 80045ec:	1e63      	subs	r3, r4, #1
 80045ee:	9302      	str	r3, [sp, #8]
 80045f0:	9305      	str	r3, [sp, #20]
 80045f2:	2301      	movs	r3, #1
 80045f4:	4669      	mov	r1, sp
 80045f6:	425b      	negs	r3, r3
 80045f8:	81cb      	strh	r3, [r1, #14]
 80045fa:	0028      	movs	r0, r5
 80045fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80045fe:	f000 f889 	bl	8004714 <_svfiprintf_r>
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	da01      	bge.n	800460a <_vsniprintf_r+0x4a>
 8004606:	238b      	movs	r3, #139	; 0x8b
 8004608:	602b      	str	r3, [r5, #0]
 800460a:	2c00      	cmp	r4, #0
 800460c:	d0e3      	beq.n	80045d6 <_vsniprintf_r+0x16>
 800460e:	2300      	movs	r3, #0
 8004610:	9a00      	ldr	r2, [sp, #0]
 8004612:	7013      	strb	r3, [r2, #0]
 8004614:	e7df      	b.n	80045d6 <_vsniprintf_r+0x16>
	...

08004618 <vsniprintf>:
 8004618:	b507      	push	{r0, r1, r2, lr}
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	0013      	movs	r3, r2
 800461e:	000a      	movs	r2, r1
 8004620:	0001      	movs	r1, r0
 8004622:	4802      	ldr	r0, [pc, #8]	; (800462c <vsniprintf+0x14>)
 8004624:	6800      	ldr	r0, [r0, #0]
 8004626:	f7ff ffcb 	bl	80045c0 <_vsniprintf_r>
 800462a:	bd0e      	pop	{r1, r2, r3, pc}
 800462c:	2000000c 	.word	0x2000000c

08004630 <__malloc_lock>:
 8004630:	b510      	push	{r4, lr}
 8004632:	4802      	ldr	r0, [pc, #8]	; (800463c <__malloc_lock+0xc>)
 8004634:	f000 faf0 	bl	8004c18 <__retarget_lock_acquire_recursive>
 8004638:	bd10      	pop	{r4, pc}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	200004a4 	.word	0x200004a4

08004640 <__malloc_unlock>:
 8004640:	b510      	push	{r4, lr}
 8004642:	4802      	ldr	r0, [pc, #8]	; (800464c <__malloc_unlock+0xc>)
 8004644:	f000 fae9 	bl	8004c1a <__retarget_lock_release_recursive>
 8004648:	bd10      	pop	{r4, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	200004a4 	.word	0x200004a4

08004650 <__ssputs_r>:
 8004650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004652:	688e      	ldr	r6, [r1, #8]
 8004654:	b085      	sub	sp, #20
 8004656:	0007      	movs	r7, r0
 8004658:	000c      	movs	r4, r1
 800465a:	9203      	str	r2, [sp, #12]
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	429e      	cmp	r6, r3
 8004660:	d83c      	bhi.n	80046dc <__ssputs_r+0x8c>
 8004662:	2390      	movs	r3, #144	; 0x90
 8004664:	898a      	ldrh	r2, [r1, #12]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	421a      	tst	r2, r3
 800466a:	d034      	beq.n	80046d6 <__ssputs_r+0x86>
 800466c:	2503      	movs	r5, #3
 800466e:	6909      	ldr	r1, [r1, #16]
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	1a5b      	subs	r3, r3, r1
 8004674:	9302      	str	r3, [sp, #8]
 8004676:	6963      	ldr	r3, [r4, #20]
 8004678:	9802      	ldr	r0, [sp, #8]
 800467a:	435d      	muls	r5, r3
 800467c:	0feb      	lsrs	r3, r5, #31
 800467e:	195d      	adds	r5, r3, r5
 8004680:	9b01      	ldr	r3, [sp, #4]
 8004682:	106d      	asrs	r5, r5, #1
 8004684:	3301      	adds	r3, #1
 8004686:	181b      	adds	r3, r3, r0
 8004688:	42ab      	cmp	r3, r5
 800468a:	d900      	bls.n	800468e <__ssputs_r+0x3e>
 800468c:	001d      	movs	r5, r3
 800468e:	0553      	lsls	r3, r2, #21
 8004690:	d532      	bpl.n	80046f8 <__ssputs_r+0xa8>
 8004692:	0029      	movs	r1, r5
 8004694:	0038      	movs	r0, r7
 8004696:	f7ff fef9 	bl	800448c <_malloc_r>
 800469a:	1e06      	subs	r6, r0, #0
 800469c:	d109      	bne.n	80046b2 <__ssputs_r+0x62>
 800469e:	230c      	movs	r3, #12
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	2340      	movs	r3, #64	; 0x40
 80046a4:	2001      	movs	r0, #1
 80046a6:	89a2      	ldrh	r2, [r4, #12]
 80046a8:	4240      	negs	r0, r0
 80046aa:	4313      	orrs	r3, r2
 80046ac:	81a3      	strh	r3, [r4, #12]
 80046ae:	b005      	add	sp, #20
 80046b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046b2:	9a02      	ldr	r2, [sp, #8]
 80046b4:	6921      	ldr	r1, [r4, #16]
 80046b6:	f7ff fe8d 	bl	80043d4 <memcpy>
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <__ssputs_r+0xc0>)
 80046be:	401a      	ands	r2, r3
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	4313      	orrs	r3, r2
 80046c4:	81a3      	strh	r3, [r4, #12]
 80046c6:	9b02      	ldr	r3, [sp, #8]
 80046c8:	6126      	str	r6, [r4, #16]
 80046ca:	18f6      	adds	r6, r6, r3
 80046cc:	6026      	str	r6, [r4, #0]
 80046ce:	6165      	str	r5, [r4, #20]
 80046d0:	9e01      	ldr	r6, [sp, #4]
 80046d2:	1aed      	subs	r5, r5, r3
 80046d4:	60a5      	str	r5, [r4, #8]
 80046d6:	9b01      	ldr	r3, [sp, #4]
 80046d8:	429e      	cmp	r6, r3
 80046da:	d900      	bls.n	80046de <__ssputs_r+0x8e>
 80046dc:	9e01      	ldr	r6, [sp, #4]
 80046de:	0032      	movs	r2, r6
 80046e0:	9903      	ldr	r1, [sp, #12]
 80046e2:	6820      	ldr	r0, [r4, #0]
 80046e4:	f000 faa5 	bl	8004c32 <memmove>
 80046e8:	68a3      	ldr	r3, [r4, #8]
 80046ea:	2000      	movs	r0, #0
 80046ec:	1b9b      	subs	r3, r3, r6
 80046ee:	60a3      	str	r3, [r4, #8]
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	199e      	adds	r6, r3, r6
 80046f4:	6026      	str	r6, [r4, #0]
 80046f6:	e7da      	b.n	80046ae <__ssputs_r+0x5e>
 80046f8:	002a      	movs	r2, r5
 80046fa:	0038      	movs	r0, r7
 80046fc:	f000 faac 	bl	8004c58 <_realloc_r>
 8004700:	1e06      	subs	r6, r0, #0
 8004702:	d1e0      	bne.n	80046c6 <__ssputs_r+0x76>
 8004704:	0038      	movs	r0, r7
 8004706:	6921      	ldr	r1, [r4, #16]
 8004708:	f7ff fe76 	bl	80043f8 <_free_r>
 800470c:	e7c7      	b.n	800469e <__ssputs_r+0x4e>
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	fffffb7f 	.word	0xfffffb7f

08004714 <_svfiprintf_r>:
 8004714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004716:	b0a1      	sub	sp, #132	; 0x84
 8004718:	9003      	str	r0, [sp, #12]
 800471a:	001d      	movs	r5, r3
 800471c:	898b      	ldrh	r3, [r1, #12]
 800471e:	000f      	movs	r7, r1
 8004720:	0016      	movs	r6, r2
 8004722:	061b      	lsls	r3, r3, #24
 8004724:	d511      	bpl.n	800474a <_svfiprintf_r+0x36>
 8004726:	690b      	ldr	r3, [r1, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10e      	bne.n	800474a <_svfiprintf_r+0x36>
 800472c:	2140      	movs	r1, #64	; 0x40
 800472e:	f7ff fead 	bl	800448c <_malloc_r>
 8004732:	6038      	str	r0, [r7, #0]
 8004734:	6138      	str	r0, [r7, #16]
 8004736:	2800      	cmp	r0, #0
 8004738:	d105      	bne.n	8004746 <_svfiprintf_r+0x32>
 800473a:	230c      	movs	r3, #12
 800473c:	9a03      	ldr	r2, [sp, #12]
 800473e:	3801      	subs	r0, #1
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	b021      	add	sp, #132	; 0x84
 8004744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004746:	2340      	movs	r3, #64	; 0x40
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	2300      	movs	r3, #0
 800474c:	ac08      	add	r4, sp, #32
 800474e:	6163      	str	r3, [r4, #20]
 8004750:	3320      	adds	r3, #32
 8004752:	7663      	strb	r3, [r4, #25]
 8004754:	3310      	adds	r3, #16
 8004756:	76a3      	strb	r3, [r4, #26]
 8004758:	9507      	str	r5, [sp, #28]
 800475a:	0035      	movs	r5, r6
 800475c:	782b      	ldrb	r3, [r5, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <_svfiprintf_r+0x52>
 8004762:	2b25      	cmp	r3, #37	; 0x25
 8004764:	d147      	bne.n	80047f6 <_svfiprintf_r+0xe2>
 8004766:	1bab      	subs	r3, r5, r6
 8004768:	9305      	str	r3, [sp, #20]
 800476a:	42b5      	cmp	r5, r6
 800476c:	d00c      	beq.n	8004788 <_svfiprintf_r+0x74>
 800476e:	0032      	movs	r2, r6
 8004770:	0039      	movs	r1, r7
 8004772:	9803      	ldr	r0, [sp, #12]
 8004774:	f7ff ff6c 	bl	8004650 <__ssputs_r>
 8004778:	1c43      	adds	r3, r0, #1
 800477a:	d100      	bne.n	800477e <_svfiprintf_r+0x6a>
 800477c:	e0ae      	b.n	80048dc <_svfiprintf_r+0x1c8>
 800477e:	6962      	ldr	r2, [r4, #20]
 8004780:	9b05      	ldr	r3, [sp, #20]
 8004782:	4694      	mov	ip, r2
 8004784:	4463      	add	r3, ip
 8004786:	6163      	str	r3, [r4, #20]
 8004788:	782b      	ldrb	r3, [r5, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d100      	bne.n	8004790 <_svfiprintf_r+0x7c>
 800478e:	e0a5      	b.n	80048dc <_svfiprintf_r+0x1c8>
 8004790:	2201      	movs	r2, #1
 8004792:	2300      	movs	r3, #0
 8004794:	4252      	negs	r2, r2
 8004796:	6062      	str	r2, [r4, #4]
 8004798:	a904      	add	r1, sp, #16
 800479a:	3254      	adds	r2, #84	; 0x54
 800479c:	1852      	adds	r2, r2, r1
 800479e:	1c6e      	adds	r6, r5, #1
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	60e3      	str	r3, [r4, #12]
 80047a4:	60a3      	str	r3, [r4, #8]
 80047a6:	7013      	strb	r3, [r2, #0]
 80047a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80047aa:	2205      	movs	r2, #5
 80047ac:	7831      	ldrb	r1, [r6, #0]
 80047ae:	4854      	ldr	r0, [pc, #336]	; (8004900 <_svfiprintf_r+0x1ec>)
 80047b0:	f000 fa34 	bl	8004c1c <memchr>
 80047b4:	1c75      	adds	r5, r6, #1
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d11f      	bne.n	80047fa <_svfiprintf_r+0xe6>
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	06d3      	lsls	r3, r2, #27
 80047be:	d504      	bpl.n	80047ca <_svfiprintf_r+0xb6>
 80047c0:	2353      	movs	r3, #83	; 0x53
 80047c2:	a904      	add	r1, sp, #16
 80047c4:	185b      	adds	r3, r3, r1
 80047c6:	2120      	movs	r1, #32
 80047c8:	7019      	strb	r1, [r3, #0]
 80047ca:	0713      	lsls	r3, r2, #28
 80047cc:	d504      	bpl.n	80047d8 <_svfiprintf_r+0xc4>
 80047ce:	2353      	movs	r3, #83	; 0x53
 80047d0:	a904      	add	r1, sp, #16
 80047d2:	185b      	adds	r3, r3, r1
 80047d4:	212b      	movs	r1, #43	; 0x2b
 80047d6:	7019      	strb	r1, [r3, #0]
 80047d8:	7833      	ldrb	r3, [r6, #0]
 80047da:	2b2a      	cmp	r3, #42	; 0x2a
 80047dc:	d016      	beq.n	800480c <_svfiprintf_r+0xf8>
 80047de:	0035      	movs	r5, r6
 80047e0:	2100      	movs	r1, #0
 80047e2:	200a      	movs	r0, #10
 80047e4:	68e3      	ldr	r3, [r4, #12]
 80047e6:	782a      	ldrb	r2, [r5, #0]
 80047e8:	1c6e      	adds	r6, r5, #1
 80047ea:	3a30      	subs	r2, #48	; 0x30
 80047ec:	2a09      	cmp	r2, #9
 80047ee:	d94e      	bls.n	800488e <_svfiprintf_r+0x17a>
 80047f0:	2900      	cmp	r1, #0
 80047f2:	d111      	bne.n	8004818 <_svfiprintf_r+0x104>
 80047f4:	e017      	b.n	8004826 <_svfiprintf_r+0x112>
 80047f6:	3501      	adds	r5, #1
 80047f8:	e7b0      	b.n	800475c <_svfiprintf_r+0x48>
 80047fa:	4b41      	ldr	r3, [pc, #260]	; (8004900 <_svfiprintf_r+0x1ec>)
 80047fc:	6822      	ldr	r2, [r4, #0]
 80047fe:	1ac0      	subs	r0, r0, r3
 8004800:	2301      	movs	r3, #1
 8004802:	4083      	lsls	r3, r0
 8004804:	4313      	orrs	r3, r2
 8004806:	002e      	movs	r6, r5
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	e7ce      	b.n	80047aa <_svfiprintf_r+0x96>
 800480c:	9b07      	ldr	r3, [sp, #28]
 800480e:	1d19      	adds	r1, r3, #4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	9107      	str	r1, [sp, #28]
 8004814:	2b00      	cmp	r3, #0
 8004816:	db01      	blt.n	800481c <_svfiprintf_r+0x108>
 8004818:	930b      	str	r3, [sp, #44]	; 0x2c
 800481a:	e004      	b.n	8004826 <_svfiprintf_r+0x112>
 800481c:	425b      	negs	r3, r3
 800481e:	60e3      	str	r3, [r4, #12]
 8004820:	2302      	movs	r3, #2
 8004822:	4313      	orrs	r3, r2
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	782b      	ldrb	r3, [r5, #0]
 8004828:	2b2e      	cmp	r3, #46	; 0x2e
 800482a:	d10a      	bne.n	8004842 <_svfiprintf_r+0x12e>
 800482c:	786b      	ldrb	r3, [r5, #1]
 800482e:	2b2a      	cmp	r3, #42	; 0x2a
 8004830:	d135      	bne.n	800489e <_svfiprintf_r+0x18a>
 8004832:	9b07      	ldr	r3, [sp, #28]
 8004834:	3502      	adds	r5, #2
 8004836:	1d1a      	adds	r2, r3, #4
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	9207      	str	r2, [sp, #28]
 800483c:	2b00      	cmp	r3, #0
 800483e:	db2b      	blt.n	8004898 <_svfiprintf_r+0x184>
 8004840:	9309      	str	r3, [sp, #36]	; 0x24
 8004842:	4e30      	ldr	r6, [pc, #192]	; (8004904 <_svfiprintf_r+0x1f0>)
 8004844:	2203      	movs	r2, #3
 8004846:	0030      	movs	r0, r6
 8004848:	7829      	ldrb	r1, [r5, #0]
 800484a:	f000 f9e7 	bl	8004c1c <memchr>
 800484e:	2800      	cmp	r0, #0
 8004850:	d006      	beq.n	8004860 <_svfiprintf_r+0x14c>
 8004852:	2340      	movs	r3, #64	; 0x40
 8004854:	1b80      	subs	r0, r0, r6
 8004856:	4083      	lsls	r3, r0
 8004858:	6822      	ldr	r2, [r4, #0]
 800485a:	3501      	adds	r5, #1
 800485c:	4313      	orrs	r3, r2
 800485e:	6023      	str	r3, [r4, #0]
 8004860:	7829      	ldrb	r1, [r5, #0]
 8004862:	2206      	movs	r2, #6
 8004864:	4828      	ldr	r0, [pc, #160]	; (8004908 <_svfiprintf_r+0x1f4>)
 8004866:	1c6e      	adds	r6, r5, #1
 8004868:	7621      	strb	r1, [r4, #24]
 800486a:	f000 f9d7 	bl	8004c1c <memchr>
 800486e:	2800      	cmp	r0, #0
 8004870:	d03c      	beq.n	80048ec <_svfiprintf_r+0x1d8>
 8004872:	4b26      	ldr	r3, [pc, #152]	; (800490c <_svfiprintf_r+0x1f8>)
 8004874:	2b00      	cmp	r3, #0
 8004876:	d125      	bne.n	80048c4 <_svfiprintf_r+0x1b0>
 8004878:	2207      	movs	r2, #7
 800487a:	9b07      	ldr	r3, [sp, #28]
 800487c:	3307      	adds	r3, #7
 800487e:	4393      	bics	r3, r2
 8004880:	3308      	adds	r3, #8
 8004882:	9307      	str	r3, [sp, #28]
 8004884:	6963      	ldr	r3, [r4, #20]
 8004886:	9a04      	ldr	r2, [sp, #16]
 8004888:	189b      	adds	r3, r3, r2
 800488a:	6163      	str	r3, [r4, #20]
 800488c:	e765      	b.n	800475a <_svfiprintf_r+0x46>
 800488e:	4343      	muls	r3, r0
 8004890:	0035      	movs	r5, r6
 8004892:	2101      	movs	r1, #1
 8004894:	189b      	adds	r3, r3, r2
 8004896:	e7a6      	b.n	80047e6 <_svfiprintf_r+0xd2>
 8004898:	2301      	movs	r3, #1
 800489a:	425b      	negs	r3, r3
 800489c:	e7d0      	b.n	8004840 <_svfiprintf_r+0x12c>
 800489e:	2300      	movs	r3, #0
 80048a0:	200a      	movs	r0, #10
 80048a2:	001a      	movs	r2, r3
 80048a4:	3501      	adds	r5, #1
 80048a6:	6063      	str	r3, [r4, #4]
 80048a8:	7829      	ldrb	r1, [r5, #0]
 80048aa:	1c6e      	adds	r6, r5, #1
 80048ac:	3930      	subs	r1, #48	; 0x30
 80048ae:	2909      	cmp	r1, #9
 80048b0:	d903      	bls.n	80048ba <_svfiprintf_r+0x1a6>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0c5      	beq.n	8004842 <_svfiprintf_r+0x12e>
 80048b6:	9209      	str	r2, [sp, #36]	; 0x24
 80048b8:	e7c3      	b.n	8004842 <_svfiprintf_r+0x12e>
 80048ba:	4342      	muls	r2, r0
 80048bc:	0035      	movs	r5, r6
 80048be:	2301      	movs	r3, #1
 80048c0:	1852      	adds	r2, r2, r1
 80048c2:	e7f1      	b.n	80048a8 <_svfiprintf_r+0x194>
 80048c4:	ab07      	add	r3, sp, #28
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	003a      	movs	r2, r7
 80048ca:	0021      	movs	r1, r4
 80048cc:	4b10      	ldr	r3, [pc, #64]	; (8004910 <_svfiprintf_r+0x1fc>)
 80048ce:	9803      	ldr	r0, [sp, #12]
 80048d0:	e000      	b.n	80048d4 <_svfiprintf_r+0x1c0>
 80048d2:	bf00      	nop
 80048d4:	9004      	str	r0, [sp, #16]
 80048d6:	9b04      	ldr	r3, [sp, #16]
 80048d8:	3301      	adds	r3, #1
 80048da:	d1d3      	bne.n	8004884 <_svfiprintf_r+0x170>
 80048dc:	89bb      	ldrh	r3, [r7, #12]
 80048de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80048e0:	065b      	lsls	r3, r3, #25
 80048e2:	d400      	bmi.n	80048e6 <_svfiprintf_r+0x1d2>
 80048e4:	e72d      	b.n	8004742 <_svfiprintf_r+0x2e>
 80048e6:	2001      	movs	r0, #1
 80048e8:	4240      	negs	r0, r0
 80048ea:	e72a      	b.n	8004742 <_svfiprintf_r+0x2e>
 80048ec:	ab07      	add	r3, sp, #28
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	003a      	movs	r2, r7
 80048f2:	0021      	movs	r1, r4
 80048f4:	4b06      	ldr	r3, [pc, #24]	; (8004910 <_svfiprintf_r+0x1fc>)
 80048f6:	9803      	ldr	r0, [sp, #12]
 80048f8:	f000 f87c 	bl	80049f4 <_printf_i>
 80048fc:	e7ea      	b.n	80048d4 <_svfiprintf_r+0x1c0>
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	080053a8 	.word	0x080053a8
 8004904:	080053ae 	.word	0x080053ae
 8004908:	080053b2 	.word	0x080053b2
 800490c:	00000000 	.word	0x00000000
 8004910:	08004651 	.word	0x08004651

08004914 <_printf_common>:
 8004914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004916:	0015      	movs	r5, r2
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	688a      	ldr	r2, [r1, #8]
 800491c:	690b      	ldr	r3, [r1, #16]
 800491e:	000c      	movs	r4, r1
 8004920:	9000      	str	r0, [sp, #0]
 8004922:	4293      	cmp	r3, r2
 8004924:	da00      	bge.n	8004928 <_printf_common+0x14>
 8004926:	0013      	movs	r3, r2
 8004928:	0022      	movs	r2, r4
 800492a:	602b      	str	r3, [r5, #0]
 800492c:	3243      	adds	r2, #67	; 0x43
 800492e:	7812      	ldrb	r2, [r2, #0]
 8004930:	2a00      	cmp	r2, #0
 8004932:	d001      	beq.n	8004938 <_printf_common+0x24>
 8004934:	3301      	adds	r3, #1
 8004936:	602b      	str	r3, [r5, #0]
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	069b      	lsls	r3, r3, #26
 800493c:	d502      	bpl.n	8004944 <_printf_common+0x30>
 800493e:	682b      	ldr	r3, [r5, #0]
 8004940:	3302      	adds	r3, #2
 8004942:	602b      	str	r3, [r5, #0]
 8004944:	6822      	ldr	r2, [r4, #0]
 8004946:	2306      	movs	r3, #6
 8004948:	0017      	movs	r7, r2
 800494a:	401f      	ands	r7, r3
 800494c:	421a      	tst	r2, r3
 800494e:	d027      	beq.n	80049a0 <_printf_common+0x8c>
 8004950:	0023      	movs	r3, r4
 8004952:	3343      	adds	r3, #67	; 0x43
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	1e5a      	subs	r2, r3, #1
 8004958:	4193      	sbcs	r3, r2
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	0692      	lsls	r2, r2, #26
 800495e:	d430      	bmi.n	80049c2 <_printf_common+0xae>
 8004960:	0022      	movs	r2, r4
 8004962:	9901      	ldr	r1, [sp, #4]
 8004964:	9800      	ldr	r0, [sp, #0]
 8004966:	9e08      	ldr	r6, [sp, #32]
 8004968:	3243      	adds	r2, #67	; 0x43
 800496a:	47b0      	blx	r6
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d025      	beq.n	80049bc <_printf_common+0xa8>
 8004970:	2306      	movs	r3, #6
 8004972:	6820      	ldr	r0, [r4, #0]
 8004974:	682a      	ldr	r2, [r5, #0]
 8004976:	68e1      	ldr	r1, [r4, #12]
 8004978:	2500      	movs	r5, #0
 800497a:	4003      	ands	r3, r0
 800497c:	2b04      	cmp	r3, #4
 800497e:	d103      	bne.n	8004988 <_printf_common+0x74>
 8004980:	1a8d      	subs	r5, r1, r2
 8004982:	43eb      	mvns	r3, r5
 8004984:	17db      	asrs	r3, r3, #31
 8004986:	401d      	ands	r5, r3
 8004988:	68a3      	ldr	r3, [r4, #8]
 800498a:	6922      	ldr	r2, [r4, #16]
 800498c:	4293      	cmp	r3, r2
 800498e:	dd01      	ble.n	8004994 <_printf_common+0x80>
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	18ed      	adds	r5, r5, r3
 8004994:	2700      	movs	r7, #0
 8004996:	42bd      	cmp	r5, r7
 8004998:	d120      	bne.n	80049dc <_printf_common+0xc8>
 800499a:	2000      	movs	r0, #0
 800499c:	e010      	b.n	80049c0 <_printf_common+0xac>
 800499e:	3701      	adds	r7, #1
 80049a0:	68e3      	ldr	r3, [r4, #12]
 80049a2:	682a      	ldr	r2, [r5, #0]
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	42bb      	cmp	r3, r7
 80049a8:	ddd2      	ble.n	8004950 <_printf_common+0x3c>
 80049aa:	0022      	movs	r2, r4
 80049ac:	2301      	movs	r3, #1
 80049ae:	9901      	ldr	r1, [sp, #4]
 80049b0:	9800      	ldr	r0, [sp, #0]
 80049b2:	9e08      	ldr	r6, [sp, #32]
 80049b4:	3219      	adds	r2, #25
 80049b6:	47b0      	blx	r6
 80049b8:	1c43      	adds	r3, r0, #1
 80049ba:	d1f0      	bne.n	800499e <_printf_common+0x8a>
 80049bc:	2001      	movs	r0, #1
 80049be:	4240      	negs	r0, r0
 80049c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049c2:	2030      	movs	r0, #48	; 0x30
 80049c4:	18e1      	adds	r1, r4, r3
 80049c6:	3143      	adds	r1, #67	; 0x43
 80049c8:	7008      	strb	r0, [r1, #0]
 80049ca:	0021      	movs	r1, r4
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	3145      	adds	r1, #69	; 0x45
 80049d0:	7809      	ldrb	r1, [r1, #0]
 80049d2:	18a2      	adds	r2, r4, r2
 80049d4:	3243      	adds	r2, #67	; 0x43
 80049d6:	3302      	adds	r3, #2
 80049d8:	7011      	strb	r1, [r2, #0]
 80049da:	e7c1      	b.n	8004960 <_printf_common+0x4c>
 80049dc:	0022      	movs	r2, r4
 80049de:	2301      	movs	r3, #1
 80049e0:	9901      	ldr	r1, [sp, #4]
 80049e2:	9800      	ldr	r0, [sp, #0]
 80049e4:	9e08      	ldr	r6, [sp, #32]
 80049e6:	321a      	adds	r2, #26
 80049e8:	47b0      	blx	r6
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	d0e6      	beq.n	80049bc <_printf_common+0xa8>
 80049ee:	3701      	adds	r7, #1
 80049f0:	e7d1      	b.n	8004996 <_printf_common+0x82>
	...

080049f4 <_printf_i>:
 80049f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f6:	b08b      	sub	sp, #44	; 0x2c
 80049f8:	9206      	str	r2, [sp, #24]
 80049fa:	000a      	movs	r2, r1
 80049fc:	3243      	adds	r2, #67	; 0x43
 80049fe:	9307      	str	r3, [sp, #28]
 8004a00:	9005      	str	r0, [sp, #20]
 8004a02:	9204      	str	r2, [sp, #16]
 8004a04:	7e0a      	ldrb	r2, [r1, #24]
 8004a06:	000c      	movs	r4, r1
 8004a08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a0a:	2a78      	cmp	r2, #120	; 0x78
 8004a0c:	d806      	bhi.n	8004a1c <_printf_i+0x28>
 8004a0e:	2a62      	cmp	r2, #98	; 0x62
 8004a10:	d808      	bhi.n	8004a24 <_printf_i+0x30>
 8004a12:	2a00      	cmp	r2, #0
 8004a14:	d100      	bne.n	8004a18 <_printf_i+0x24>
 8004a16:	e0c0      	b.n	8004b9a <_printf_i+0x1a6>
 8004a18:	2a58      	cmp	r2, #88	; 0x58
 8004a1a:	d052      	beq.n	8004ac2 <_printf_i+0xce>
 8004a1c:	0026      	movs	r6, r4
 8004a1e:	3642      	adds	r6, #66	; 0x42
 8004a20:	7032      	strb	r2, [r6, #0]
 8004a22:	e022      	b.n	8004a6a <_printf_i+0x76>
 8004a24:	0010      	movs	r0, r2
 8004a26:	3863      	subs	r0, #99	; 0x63
 8004a28:	2815      	cmp	r0, #21
 8004a2a:	d8f7      	bhi.n	8004a1c <_printf_i+0x28>
 8004a2c:	f7fb fb74 	bl	8000118 <__gnu_thumb1_case_shi>
 8004a30:	001f0016 	.word	0x001f0016
 8004a34:	fff6fff6 	.word	0xfff6fff6
 8004a38:	fff6fff6 	.word	0xfff6fff6
 8004a3c:	fff6001f 	.word	0xfff6001f
 8004a40:	fff6fff6 	.word	0xfff6fff6
 8004a44:	00a8fff6 	.word	0x00a8fff6
 8004a48:	009a0036 	.word	0x009a0036
 8004a4c:	fff6fff6 	.word	0xfff6fff6
 8004a50:	fff600b9 	.word	0xfff600b9
 8004a54:	fff60036 	.word	0xfff60036
 8004a58:	009efff6 	.word	0x009efff6
 8004a5c:	0026      	movs	r6, r4
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	3642      	adds	r6, #66	; 0x42
 8004a62:	1d11      	adds	r1, r2, #4
 8004a64:	6019      	str	r1, [r3, #0]
 8004a66:	6813      	ldr	r3, [r2, #0]
 8004a68:	7033      	strb	r3, [r6, #0]
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e0a7      	b.n	8004bbe <_printf_i+0x1ca>
 8004a6e:	6808      	ldr	r0, [r1, #0]
 8004a70:	6819      	ldr	r1, [r3, #0]
 8004a72:	1d0a      	adds	r2, r1, #4
 8004a74:	0605      	lsls	r5, r0, #24
 8004a76:	d50b      	bpl.n	8004a90 <_printf_i+0x9c>
 8004a78:	680d      	ldr	r5, [r1, #0]
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	2d00      	cmp	r5, #0
 8004a7e:	da03      	bge.n	8004a88 <_printf_i+0x94>
 8004a80:	232d      	movs	r3, #45	; 0x2d
 8004a82:	9a04      	ldr	r2, [sp, #16]
 8004a84:	426d      	negs	r5, r5
 8004a86:	7013      	strb	r3, [r2, #0]
 8004a88:	4b61      	ldr	r3, [pc, #388]	; (8004c10 <_printf_i+0x21c>)
 8004a8a:	270a      	movs	r7, #10
 8004a8c:	9303      	str	r3, [sp, #12]
 8004a8e:	e032      	b.n	8004af6 <_printf_i+0x102>
 8004a90:	680d      	ldr	r5, [r1, #0]
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	0641      	lsls	r1, r0, #25
 8004a96:	d5f1      	bpl.n	8004a7c <_printf_i+0x88>
 8004a98:	b22d      	sxth	r5, r5
 8004a9a:	e7ef      	b.n	8004a7c <_printf_i+0x88>
 8004a9c:	680d      	ldr	r5, [r1, #0]
 8004a9e:	6819      	ldr	r1, [r3, #0]
 8004aa0:	1d08      	adds	r0, r1, #4
 8004aa2:	6018      	str	r0, [r3, #0]
 8004aa4:	062e      	lsls	r6, r5, #24
 8004aa6:	d501      	bpl.n	8004aac <_printf_i+0xb8>
 8004aa8:	680d      	ldr	r5, [r1, #0]
 8004aaa:	e003      	b.n	8004ab4 <_printf_i+0xc0>
 8004aac:	066d      	lsls	r5, r5, #25
 8004aae:	d5fb      	bpl.n	8004aa8 <_printf_i+0xb4>
 8004ab0:	680d      	ldr	r5, [r1, #0]
 8004ab2:	b2ad      	uxth	r5, r5
 8004ab4:	4b56      	ldr	r3, [pc, #344]	; (8004c10 <_printf_i+0x21c>)
 8004ab6:	270a      	movs	r7, #10
 8004ab8:	9303      	str	r3, [sp, #12]
 8004aba:	2a6f      	cmp	r2, #111	; 0x6f
 8004abc:	d117      	bne.n	8004aee <_printf_i+0xfa>
 8004abe:	2708      	movs	r7, #8
 8004ac0:	e015      	b.n	8004aee <_printf_i+0xfa>
 8004ac2:	3145      	adds	r1, #69	; 0x45
 8004ac4:	700a      	strb	r2, [r1, #0]
 8004ac6:	4a52      	ldr	r2, [pc, #328]	; (8004c10 <_printf_i+0x21c>)
 8004ac8:	9203      	str	r2, [sp, #12]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	6821      	ldr	r1, [r4, #0]
 8004ace:	ca20      	ldmia	r2!, {r5}
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	0608      	lsls	r0, r1, #24
 8004ad4:	d550      	bpl.n	8004b78 <_printf_i+0x184>
 8004ad6:	07cb      	lsls	r3, r1, #31
 8004ad8:	d502      	bpl.n	8004ae0 <_printf_i+0xec>
 8004ada:	2320      	movs	r3, #32
 8004adc:	4319      	orrs	r1, r3
 8004ade:	6021      	str	r1, [r4, #0]
 8004ae0:	2710      	movs	r7, #16
 8004ae2:	2d00      	cmp	r5, #0
 8004ae4:	d103      	bne.n	8004aee <_printf_i+0xfa>
 8004ae6:	2320      	movs	r3, #32
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	439a      	bics	r2, r3
 8004aec:	6022      	str	r2, [r4, #0]
 8004aee:	0023      	movs	r3, r4
 8004af0:	2200      	movs	r2, #0
 8004af2:	3343      	adds	r3, #67	; 0x43
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	6863      	ldr	r3, [r4, #4]
 8004af8:	60a3      	str	r3, [r4, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	db03      	blt.n	8004b06 <_printf_i+0x112>
 8004afe:	2204      	movs	r2, #4
 8004b00:	6821      	ldr	r1, [r4, #0]
 8004b02:	4391      	bics	r1, r2
 8004b04:	6021      	str	r1, [r4, #0]
 8004b06:	2d00      	cmp	r5, #0
 8004b08:	d102      	bne.n	8004b10 <_printf_i+0x11c>
 8004b0a:	9e04      	ldr	r6, [sp, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00c      	beq.n	8004b2a <_printf_i+0x136>
 8004b10:	9e04      	ldr	r6, [sp, #16]
 8004b12:	0028      	movs	r0, r5
 8004b14:	0039      	movs	r1, r7
 8004b16:	f7fb fb8f 	bl	8000238 <__aeabi_uidivmod>
 8004b1a:	9b03      	ldr	r3, [sp, #12]
 8004b1c:	3e01      	subs	r6, #1
 8004b1e:	5c5b      	ldrb	r3, [r3, r1]
 8004b20:	7033      	strb	r3, [r6, #0]
 8004b22:	002b      	movs	r3, r5
 8004b24:	0005      	movs	r5, r0
 8004b26:	429f      	cmp	r7, r3
 8004b28:	d9f3      	bls.n	8004b12 <_printf_i+0x11e>
 8004b2a:	2f08      	cmp	r7, #8
 8004b2c:	d109      	bne.n	8004b42 <_printf_i+0x14e>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	07db      	lsls	r3, r3, #31
 8004b32:	d506      	bpl.n	8004b42 <_printf_i+0x14e>
 8004b34:	6863      	ldr	r3, [r4, #4]
 8004b36:	6922      	ldr	r2, [r4, #16]
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	dc02      	bgt.n	8004b42 <_printf_i+0x14e>
 8004b3c:	2330      	movs	r3, #48	; 0x30
 8004b3e:	3e01      	subs	r6, #1
 8004b40:	7033      	strb	r3, [r6, #0]
 8004b42:	9b04      	ldr	r3, [sp, #16]
 8004b44:	1b9b      	subs	r3, r3, r6
 8004b46:	6123      	str	r3, [r4, #16]
 8004b48:	9b07      	ldr	r3, [sp, #28]
 8004b4a:	0021      	movs	r1, r4
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	9805      	ldr	r0, [sp, #20]
 8004b50:	9b06      	ldr	r3, [sp, #24]
 8004b52:	aa09      	add	r2, sp, #36	; 0x24
 8004b54:	f7ff fede 	bl	8004914 <_printf_common>
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	d135      	bne.n	8004bc8 <_printf_i+0x1d4>
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	4240      	negs	r0, r0
 8004b60:	b00b      	add	sp, #44	; 0x2c
 8004b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b64:	2220      	movs	r2, #32
 8004b66:	6809      	ldr	r1, [r1, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	6022      	str	r2, [r4, #0]
 8004b6c:	0022      	movs	r2, r4
 8004b6e:	2178      	movs	r1, #120	; 0x78
 8004b70:	3245      	adds	r2, #69	; 0x45
 8004b72:	7011      	strb	r1, [r2, #0]
 8004b74:	4a27      	ldr	r2, [pc, #156]	; (8004c14 <_printf_i+0x220>)
 8004b76:	e7a7      	b.n	8004ac8 <_printf_i+0xd4>
 8004b78:	0648      	lsls	r0, r1, #25
 8004b7a:	d5ac      	bpl.n	8004ad6 <_printf_i+0xe2>
 8004b7c:	b2ad      	uxth	r5, r5
 8004b7e:	e7aa      	b.n	8004ad6 <_printf_i+0xe2>
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	680d      	ldr	r5, [r1, #0]
 8004b84:	1d10      	adds	r0, r2, #4
 8004b86:	6949      	ldr	r1, [r1, #20]
 8004b88:	6018      	str	r0, [r3, #0]
 8004b8a:	6813      	ldr	r3, [r2, #0]
 8004b8c:	062e      	lsls	r6, r5, #24
 8004b8e:	d501      	bpl.n	8004b94 <_printf_i+0x1a0>
 8004b90:	6019      	str	r1, [r3, #0]
 8004b92:	e002      	b.n	8004b9a <_printf_i+0x1a6>
 8004b94:	066d      	lsls	r5, r5, #25
 8004b96:	d5fb      	bpl.n	8004b90 <_printf_i+0x19c>
 8004b98:	8019      	strh	r1, [r3, #0]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9e04      	ldr	r6, [sp, #16]
 8004b9e:	6123      	str	r3, [r4, #16]
 8004ba0:	e7d2      	b.n	8004b48 <_printf_i+0x154>
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	1d11      	adds	r1, r2, #4
 8004ba6:	6019      	str	r1, [r3, #0]
 8004ba8:	6816      	ldr	r6, [r2, #0]
 8004baa:	2100      	movs	r1, #0
 8004bac:	0030      	movs	r0, r6
 8004bae:	6862      	ldr	r2, [r4, #4]
 8004bb0:	f000 f834 	bl	8004c1c <memchr>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d001      	beq.n	8004bbc <_printf_i+0x1c8>
 8004bb8:	1b80      	subs	r0, r0, r6
 8004bba:	6060      	str	r0, [r4, #4]
 8004bbc:	6863      	ldr	r3, [r4, #4]
 8004bbe:	6123      	str	r3, [r4, #16]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	9a04      	ldr	r2, [sp, #16]
 8004bc4:	7013      	strb	r3, [r2, #0]
 8004bc6:	e7bf      	b.n	8004b48 <_printf_i+0x154>
 8004bc8:	6923      	ldr	r3, [r4, #16]
 8004bca:	0032      	movs	r2, r6
 8004bcc:	9906      	ldr	r1, [sp, #24]
 8004bce:	9805      	ldr	r0, [sp, #20]
 8004bd0:	9d07      	ldr	r5, [sp, #28]
 8004bd2:	47a8      	blx	r5
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d0c1      	beq.n	8004b5c <_printf_i+0x168>
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	079b      	lsls	r3, r3, #30
 8004bdc:	d415      	bmi.n	8004c0a <_printf_i+0x216>
 8004bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be0:	68e0      	ldr	r0, [r4, #12]
 8004be2:	4298      	cmp	r0, r3
 8004be4:	dabc      	bge.n	8004b60 <_printf_i+0x16c>
 8004be6:	0018      	movs	r0, r3
 8004be8:	e7ba      	b.n	8004b60 <_printf_i+0x16c>
 8004bea:	0022      	movs	r2, r4
 8004bec:	2301      	movs	r3, #1
 8004bee:	9906      	ldr	r1, [sp, #24]
 8004bf0:	9805      	ldr	r0, [sp, #20]
 8004bf2:	9e07      	ldr	r6, [sp, #28]
 8004bf4:	3219      	adds	r2, #25
 8004bf6:	47b0      	blx	r6
 8004bf8:	1c43      	adds	r3, r0, #1
 8004bfa:	d0af      	beq.n	8004b5c <_printf_i+0x168>
 8004bfc:	3501      	adds	r5, #1
 8004bfe:	68e3      	ldr	r3, [r4, #12]
 8004c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c02:	1a9b      	subs	r3, r3, r2
 8004c04:	42ab      	cmp	r3, r5
 8004c06:	dcf0      	bgt.n	8004bea <_printf_i+0x1f6>
 8004c08:	e7e9      	b.n	8004bde <_printf_i+0x1ea>
 8004c0a:	2500      	movs	r5, #0
 8004c0c:	e7f7      	b.n	8004bfe <_printf_i+0x20a>
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	080053b9 	.word	0x080053b9
 8004c14:	080053ca 	.word	0x080053ca

08004c18 <__retarget_lock_acquire_recursive>:
 8004c18:	4770      	bx	lr

08004c1a <__retarget_lock_release_recursive>:
 8004c1a:	4770      	bx	lr

08004c1c <memchr>:
 8004c1c:	b2c9      	uxtb	r1, r1
 8004c1e:	1882      	adds	r2, r0, r2
 8004c20:	4290      	cmp	r0, r2
 8004c22:	d101      	bne.n	8004c28 <memchr+0xc>
 8004c24:	2000      	movs	r0, #0
 8004c26:	4770      	bx	lr
 8004c28:	7803      	ldrb	r3, [r0, #0]
 8004c2a:	428b      	cmp	r3, r1
 8004c2c:	d0fb      	beq.n	8004c26 <memchr+0xa>
 8004c2e:	3001      	adds	r0, #1
 8004c30:	e7f6      	b.n	8004c20 <memchr+0x4>

08004c32 <memmove>:
 8004c32:	b510      	push	{r4, lr}
 8004c34:	4288      	cmp	r0, r1
 8004c36:	d902      	bls.n	8004c3e <memmove+0xc>
 8004c38:	188b      	adds	r3, r1, r2
 8004c3a:	4298      	cmp	r0, r3
 8004c3c:	d303      	bcc.n	8004c46 <memmove+0x14>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e007      	b.n	8004c52 <memmove+0x20>
 8004c42:	5c8b      	ldrb	r3, [r1, r2]
 8004c44:	5483      	strb	r3, [r0, r2]
 8004c46:	3a01      	subs	r2, #1
 8004c48:	d2fb      	bcs.n	8004c42 <memmove+0x10>
 8004c4a:	bd10      	pop	{r4, pc}
 8004c4c:	5ccc      	ldrb	r4, [r1, r3]
 8004c4e:	54c4      	strb	r4, [r0, r3]
 8004c50:	3301      	adds	r3, #1
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d1fa      	bne.n	8004c4c <memmove+0x1a>
 8004c56:	e7f8      	b.n	8004c4a <memmove+0x18>

08004c58 <_realloc_r>:
 8004c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5a:	0007      	movs	r7, r0
 8004c5c:	000d      	movs	r5, r1
 8004c5e:	0016      	movs	r6, r2
 8004c60:	2900      	cmp	r1, #0
 8004c62:	d105      	bne.n	8004c70 <_realloc_r+0x18>
 8004c64:	0011      	movs	r1, r2
 8004c66:	f7ff fc11 	bl	800448c <_malloc_r>
 8004c6a:	0004      	movs	r4, r0
 8004c6c:	0020      	movs	r0, r4
 8004c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c70:	2a00      	cmp	r2, #0
 8004c72:	d103      	bne.n	8004c7c <_realloc_r+0x24>
 8004c74:	f7ff fbc0 	bl	80043f8 <_free_r>
 8004c78:	0034      	movs	r4, r6
 8004c7a:	e7f7      	b.n	8004c6c <_realloc_r+0x14>
 8004c7c:	f000 f812 	bl	8004ca4 <_malloc_usable_size_r>
 8004c80:	002c      	movs	r4, r5
 8004c82:	42b0      	cmp	r0, r6
 8004c84:	d2f2      	bcs.n	8004c6c <_realloc_r+0x14>
 8004c86:	0031      	movs	r1, r6
 8004c88:	0038      	movs	r0, r7
 8004c8a:	f7ff fbff 	bl	800448c <_malloc_r>
 8004c8e:	1e04      	subs	r4, r0, #0
 8004c90:	d0ec      	beq.n	8004c6c <_realloc_r+0x14>
 8004c92:	0029      	movs	r1, r5
 8004c94:	0032      	movs	r2, r6
 8004c96:	f7ff fb9d 	bl	80043d4 <memcpy>
 8004c9a:	0029      	movs	r1, r5
 8004c9c:	0038      	movs	r0, r7
 8004c9e:	f7ff fbab 	bl	80043f8 <_free_r>
 8004ca2:	e7e3      	b.n	8004c6c <_realloc_r+0x14>

08004ca4 <_malloc_usable_size_r>:
 8004ca4:	1f0b      	subs	r3, r1, #4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	1f18      	subs	r0, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	da01      	bge.n	8004cb2 <_malloc_usable_size_r+0xe>
 8004cae:	580b      	ldr	r3, [r1, r0]
 8004cb0:	18c0      	adds	r0, r0, r3
 8004cb2:	4770      	bx	lr

08004cb4 <_init>:
 8004cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cba:	bc08      	pop	{r3}
 8004cbc:	469e      	mov	lr, r3
 8004cbe:	4770      	bx	lr

08004cc0 <_fini>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc6:	bc08      	pop	{r3}
 8004cc8:	469e      	mov	lr, r3
 8004cca:	4770      	bx	lr

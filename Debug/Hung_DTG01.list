
Hung_DTG01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08004e80  08004e80  00014e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005238  08005238  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005238  08005238  00015238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005240  08005240  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005244  08005244  00015244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000070  080052b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080052b8  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012503  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bff  00000000  00000000  0003259b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  000351a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  00035ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000144ef  00000000  00000000  000364a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f596  00000000  00000000  0004a98f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072c9d  00000000  00000000  00059f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ccbc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a0  00000000  00000000  000ccc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e68 	.word	0x08004e68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004e68 	.word	0x08004e68

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	1c08      	adds	r0, r1, #0
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f82e 	bl	8000494 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_lmul>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	0415      	lsls	r5, r2, #16
 8000448:	0c2d      	lsrs	r5, r5, #16
 800044a:	000f      	movs	r7, r1
 800044c:	0001      	movs	r1, r0
 800044e:	002e      	movs	r6, r5
 8000450:	46c6      	mov	lr, r8
 8000452:	4684      	mov	ip, r0
 8000454:	0400      	lsls	r0, r0, #16
 8000456:	0c14      	lsrs	r4, r2, #16
 8000458:	0c00      	lsrs	r0, r0, #16
 800045a:	0c09      	lsrs	r1, r1, #16
 800045c:	4346      	muls	r6, r0
 800045e:	434d      	muls	r5, r1
 8000460:	4360      	muls	r0, r4
 8000462:	4361      	muls	r1, r4
 8000464:	1940      	adds	r0, r0, r5
 8000466:	0c34      	lsrs	r4, r6, #16
 8000468:	1824      	adds	r4, r4, r0
 800046a:	b500      	push	{lr}
 800046c:	42a5      	cmp	r5, r4
 800046e:	d903      	bls.n	8000478 <__aeabi_lmul+0x34>
 8000470:	2080      	movs	r0, #128	; 0x80
 8000472:	0240      	lsls	r0, r0, #9
 8000474:	4680      	mov	r8, r0
 8000476:	4441      	add	r1, r8
 8000478:	0c25      	lsrs	r5, r4, #16
 800047a:	186d      	adds	r5, r5, r1
 800047c:	4661      	mov	r1, ip
 800047e:	4359      	muls	r1, r3
 8000480:	437a      	muls	r2, r7
 8000482:	0430      	lsls	r0, r6, #16
 8000484:	1949      	adds	r1, r1, r5
 8000486:	0424      	lsls	r4, r4, #16
 8000488:	0c00      	lsrs	r0, r0, #16
 800048a:	1820      	adds	r0, r4, r0
 800048c:	1889      	adds	r1, r1, r2
 800048e:	bc80      	pop	{r7}
 8000490:	46b8      	mov	r8, r7
 8000492:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000494 <__udivmoddi4>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	4657      	mov	r7, sl
 8000498:	464e      	mov	r6, r9
 800049a:	4645      	mov	r5, r8
 800049c:	46de      	mov	lr, fp
 800049e:	b5e0      	push	{r5, r6, r7, lr}
 80004a0:	0004      	movs	r4, r0
 80004a2:	000d      	movs	r5, r1
 80004a4:	4692      	mov	sl, r2
 80004a6:	4699      	mov	r9, r3
 80004a8:	b083      	sub	sp, #12
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d830      	bhi.n	8000510 <__udivmoddi4+0x7c>
 80004ae:	d02d      	beq.n	800050c <__udivmoddi4+0x78>
 80004b0:	4649      	mov	r1, r9
 80004b2:	4650      	mov	r0, sl
 80004b4:	f000 f8ba 	bl	800062c <__clzdi2>
 80004b8:	0029      	movs	r1, r5
 80004ba:	0006      	movs	r6, r0
 80004bc:	0020      	movs	r0, r4
 80004be:	f000 f8b5 	bl	800062c <__clzdi2>
 80004c2:	1a33      	subs	r3, r6, r0
 80004c4:	4698      	mov	r8, r3
 80004c6:	3b20      	subs	r3, #32
 80004c8:	469b      	mov	fp, r3
 80004ca:	d433      	bmi.n	8000534 <__udivmoddi4+0xa0>
 80004cc:	465a      	mov	r2, fp
 80004ce:	4653      	mov	r3, sl
 80004d0:	4093      	lsls	r3, r2
 80004d2:	4642      	mov	r2, r8
 80004d4:	001f      	movs	r7, r3
 80004d6:	4653      	mov	r3, sl
 80004d8:	4093      	lsls	r3, r2
 80004da:	001e      	movs	r6, r3
 80004dc:	42af      	cmp	r7, r5
 80004de:	d83a      	bhi.n	8000556 <__udivmoddi4+0xc2>
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d100      	bne.n	80004e6 <__udivmoddi4+0x52>
 80004e4:	e078      	b.n	80005d8 <__udivmoddi4+0x144>
 80004e6:	465b      	mov	r3, fp
 80004e8:	1ba4      	subs	r4, r4, r6
 80004ea:	41bd      	sbcs	r5, r7
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	da00      	bge.n	80004f2 <__udivmoddi4+0x5e>
 80004f0:	e075      	b.n	80005de <__udivmoddi4+0x14a>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2301      	movs	r3, #1
 80004fc:	465a      	mov	r2, fp
 80004fe:	4093      	lsls	r3, r2
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	4642      	mov	r2, r8
 8000506:	4093      	lsls	r3, r2
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	e028      	b.n	800055e <__udivmoddi4+0xca>
 800050c:	4282      	cmp	r2, r0
 800050e:	d9cf      	bls.n	80004b0 <__udivmoddi4+0x1c>
 8000510:	2200      	movs	r2, #0
 8000512:	2300      	movs	r3, #0
 8000514:	9200      	str	r2, [sp, #0]
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <__udivmoddi4+0x8e>
 800051e:	601c      	str	r4, [r3, #0]
 8000520:	605d      	str	r5, [r3, #4]
 8000522:	9800      	ldr	r0, [sp, #0]
 8000524:	9901      	ldr	r1, [sp, #4]
 8000526:	b003      	add	sp, #12
 8000528:	bcf0      	pop	{r4, r5, r6, r7}
 800052a:	46bb      	mov	fp, r7
 800052c:	46b2      	mov	sl, r6
 800052e:	46a9      	mov	r9, r5
 8000530:	46a0      	mov	r8, r4
 8000532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000534:	4642      	mov	r2, r8
 8000536:	2320      	movs	r3, #32
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	4652      	mov	r2, sl
 800053c:	40da      	lsrs	r2, r3
 800053e:	4641      	mov	r1, r8
 8000540:	0013      	movs	r3, r2
 8000542:	464a      	mov	r2, r9
 8000544:	408a      	lsls	r2, r1
 8000546:	0017      	movs	r7, r2
 8000548:	4642      	mov	r2, r8
 800054a:	431f      	orrs	r7, r3
 800054c:	4653      	mov	r3, sl
 800054e:	4093      	lsls	r3, r2
 8000550:	001e      	movs	r6, r3
 8000552:	42af      	cmp	r7, r5
 8000554:	d9c4      	bls.n	80004e0 <__udivmoddi4+0x4c>
 8000556:	2200      	movs	r2, #0
 8000558:	2300      	movs	r3, #0
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	4643      	mov	r3, r8
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0d9      	beq.n	8000518 <__udivmoddi4+0x84>
 8000564:	07fb      	lsls	r3, r7, #31
 8000566:	0872      	lsrs	r2, r6, #1
 8000568:	431a      	orrs	r2, r3
 800056a:	4646      	mov	r6, r8
 800056c:	087b      	lsrs	r3, r7, #1
 800056e:	e00e      	b.n	800058e <__udivmoddi4+0xfa>
 8000570:	42ab      	cmp	r3, r5
 8000572:	d101      	bne.n	8000578 <__udivmoddi4+0xe4>
 8000574:	42a2      	cmp	r2, r4
 8000576:	d80c      	bhi.n	8000592 <__udivmoddi4+0xfe>
 8000578:	1aa4      	subs	r4, r4, r2
 800057a:	419d      	sbcs	r5, r3
 800057c:	2001      	movs	r0, #1
 800057e:	1924      	adds	r4, r4, r4
 8000580:	416d      	adcs	r5, r5
 8000582:	2100      	movs	r1, #0
 8000584:	3e01      	subs	r6, #1
 8000586:	1824      	adds	r4, r4, r0
 8000588:	414d      	adcs	r5, r1
 800058a:	2e00      	cmp	r6, #0
 800058c:	d006      	beq.n	800059c <__udivmoddi4+0x108>
 800058e:	42ab      	cmp	r3, r5
 8000590:	d9ee      	bls.n	8000570 <__udivmoddi4+0xdc>
 8000592:	3e01      	subs	r6, #1
 8000594:	1924      	adds	r4, r4, r4
 8000596:	416d      	adcs	r5, r5
 8000598:	2e00      	cmp	r6, #0
 800059a:	d1f8      	bne.n	800058e <__udivmoddi4+0xfa>
 800059c:	9800      	ldr	r0, [sp, #0]
 800059e:	9901      	ldr	r1, [sp, #4]
 80005a0:	465b      	mov	r3, fp
 80005a2:	1900      	adds	r0, r0, r4
 80005a4:	4169      	adcs	r1, r5
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	db24      	blt.n	80005f4 <__udivmoddi4+0x160>
 80005aa:	002b      	movs	r3, r5
 80005ac:	465a      	mov	r2, fp
 80005ae:	4644      	mov	r4, r8
 80005b0:	40d3      	lsrs	r3, r2
 80005b2:	002a      	movs	r2, r5
 80005b4:	40e2      	lsrs	r2, r4
 80005b6:	001c      	movs	r4, r3
 80005b8:	465b      	mov	r3, fp
 80005ba:	0015      	movs	r5, r2
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db2a      	blt.n	8000616 <__udivmoddi4+0x182>
 80005c0:	0026      	movs	r6, r4
 80005c2:	409e      	lsls	r6, r3
 80005c4:	0033      	movs	r3, r6
 80005c6:	0026      	movs	r6, r4
 80005c8:	4647      	mov	r7, r8
 80005ca:	40be      	lsls	r6, r7
 80005cc:	0032      	movs	r2, r6
 80005ce:	1a80      	subs	r0, r0, r2
 80005d0:	4199      	sbcs	r1, r3
 80005d2:	9000      	str	r0, [sp, #0]
 80005d4:	9101      	str	r1, [sp, #4]
 80005d6:	e79f      	b.n	8000518 <__udivmoddi4+0x84>
 80005d8:	42a3      	cmp	r3, r4
 80005da:	d8bc      	bhi.n	8000556 <__udivmoddi4+0xc2>
 80005dc:	e783      	b.n	80004e6 <__udivmoddi4+0x52>
 80005de:	4642      	mov	r2, r8
 80005e0:	2320      	movs	r3, #32
 80005e2:	2100      	movs	r1, #0
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	2200      	movs	r2, #0
 80005e8:	9100      	str	r1, [sp, #0]
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	2201      	movs	r2, #1
 80005ee:	40da      	lsrs	r2, r3
 80005f0:	9201      	str	r2, [sp, #4]
 80005f2:	e786      	b.n	8000502 <__udivmoddi4+0x6e>
 80005f4:	4642      	mov	r2, r8
 80005f6:	2320      	movs	r3, #32
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	002a      	movs	r2, r5
 80005fc:	4646      	mov	r6, r8
 80005fe:	409a      	lsls	r2, r3
 8000600:	0023      	movs	r3, r4
 8000602:	40f3      	lsrs	r3, r6
 8000604:	4644      	mov	r4, r8
 8000606:	4313      	orrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	dad4      	bge.n	80005c0 <__udivmoddi4+0x12c>
 8000616:	4642      	mov	r2, r8
 8000618:	002f      	movs	r7, r5
 800061a:	2320      	movs	r3, #32
 800061c:	0026      	movs	r6, r4
 800061e:	4097      	lsls	r7, r2
 8000620:	1a9b      	subs	r3, r3, r2
 8000622:	40de      	lsrs	r6, r3
 8000624:	003b      	movs	r3, r7
 8000626:	4333      	orrs	r3, r6
 8000628:	e7cd      	b.n	80005c6 <__udivmoddi4+0x132>
 800062a:	46c0      	nop			; (mov r8, r8)

0800062c <__clzdi2>:
 800062c:	b510      	push	{r4, lr}
 800062e:	2900      	cmp	r1, #0
 8000630:	d103      	bne.n	800063a <__clzdi2+0xe>
 8000632:	f000 f807 	bl	8000644 <__clzsi2>
 8000636:	3020      	adds	r0, #32
 8000638:	e002      	b.n	8000640 <__clzdi2+0x14>
 800063a:	1c08      	adds	r0, r1, #0
 800063c:	f000 f802 	bl	8000644 <__clzsi2>
 8000640:	bd10      	pop	{r4, pc}
 8000642:	46c0      	nop			; (mov r8, r8)

08000644 <__clzsi2>:
 8000644:	211c      	movs	r1, #28
 8000646:	2301      	movs	r3, #1
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	4298      	cmp	r0, r3
 800064c:	d301      	bcc.n	8000652 <__clzsi2+0xe>
 800064e:	0c00      	lsrs	r0, r0, #16
 8000650:	3910      	subs	r1, #16
 8000652:	0a1b      	lsrs	r3, r3, #8
 8000654:	4298      	cmp	r0, r3
 8000656:	d301      	bcc.n	800065c <__clzsi2+0x18>
 8000658:	0a00      	lsrs	r0, r0, #8
 800065a:	3908      	subs	r1, #8
 800065c:	091b      	lsrs	r3, r3, #4
 800065e:	4298      	cmp	r0, r3
 8000660:	d301      	bcc.n	8000666 <__clzsi2+0x22>
 8000662:	0900      	lsrs	r0, r0, #4
 8000664:	3904      	subs	r1, #4
 8000666:	a202      	add	r2, pc, #8	; (adr r2, 8000670 <__clzsi2+0x2c>)
 8000668:	5c10      	ldrb	r0, [r2, r0]
 800066a:	1840      	adds	r0, r0, r1
 800066c:	4770      	bx	lr
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	02020304 	.word	0x02020304
 8000674:	01010101 	.word	0x01010101
	...

08000680 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;
uint8_t data = 0;
extern RingBuffer_Types Rx_Buffer;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
//	m_rx_buff.data[m_rx_buff.index] = data ;
//	m_rx_buff.index++;
	RingBuffer_Push(&Rx_Buffer, data);
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <HAL_UART_RxCpltCallback+0x2c>)
 800068a:	781a      	ldrb	r2, [r3, #0]
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_UART_RxCpltCallback+0x30>)
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fc40 	bl	8001f16 <RingBuffer_Push>
	HAL_UART_Receive_IT(&huart1, &data, 1);
 8000696:	4905      	ldr	r1, [pc, #20]	; (80006ac <HAL_UART_RxCpltCallback+0x2c>)
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_UART_RxCpltCallback+0x34>)
 800069a:	2201      	movs	r2, #1
 800069c:	0018      	movs	r0, r3
 800069e:	f003 f857 	bl	8003750 <HAL_UART_Receive_IT>
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b002      	add	sp, #8
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	200003a4 	.word	0x200003a4
 80006b4:	2000030c 	.word	0x2000030c

080006b8 <App_Main>:
		pRxBuffer++;
		//m_rx_buff.index++;
	}
}
void App_Main ()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart1, &data, 1);
 80006bc:	4905      	ldr	r1, [pc, #20]	; (80006d4 <App_Main+0x1c>)
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <App_Main+0x20>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	0018      	movs	r0, r3
 80006c4:	f003 f844 	bl	8003750 <HAL_UART_Receive_IT>

	GMS_Hardware_Init();
 80006c8:	f000 fc20 	bl	8000f0c <GMS_Hardware_Init>
	//UART_SendData(USART1, bf_send, sizeof(bf_send));
	while(1)
	{
		GSM_mnr_task();
 80006cc:	f000 fbb0 	bl	8000e30 <GSM_mnr_task>
 80006d0:	e7fc      	b.n	80006cc <App_Main+0x14>
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	2000008c 	.word	0x2000008c
 80006d8:	2000030c 	.word	0x2000030c

080006dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b08b      	sub	sp, #44	; 0x2c
 80006e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	2414      	movs	r4, #20
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	2314      	movs	r3, #20
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f004 fb1a 	bl	8004d26 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	4b42      	ldr	r3, [pc, #264]	; (80007fc <MX_GPIO_Init+0x120>)
 80006f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f6:	4b41      	ldr	r3, [pc, #260]	; (80007fc <MX_GPIO_Init+0x120>)
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	430a      	orrs	r2, r1
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006fe:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <MX_GPIO_Init+0x120>)
 8000700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	4013      	ands	r3, r2
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <MX_GPIO_Init+0x120>)
 800070c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <MX_GPIO_Init+0x120>)
 8000710:	2104      	movs	r1, #4
 8000712:	430a      	orrs	r2, r1
 8000714:	62da      	str	r2, [r3, #44]	; 0x2c
 8000716:	4b39      	ldr	r3, [pc, #228]	; (80007fc <MX_GPIO_Init+0x120>)
 8000718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071a:	2204      	movs	r2, #4
 800071c:	4013      	ands	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b36      	ldr	r3, [pc, #216]	; (80007fc <MX_GPIO_Init+0x120>)
 8000724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000726:	4b35      	ldr	r3, [pc, #212]	; (80007fc <MX_GPIO_Init+0x120>)
 8000728:	2101      	movs	r1, #1
 800072a:	430a      	orrs	r2, r1
 800072c:	62da      	str	r2, [r3, #44]	; 0x2c
 800072e:	4b33      	ldr	r3, [pc, #204]	; (80007fc <MX_GPIO_Init+0x120>)
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	2201      	movs	r2, #1
 8000734:	4013      	ands	r3, r2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b30      	ldr	r3, [pc, #192]	; (80007fc <MX_GPIO_Init+0x120>)
 800073c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800073e:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <MX_GPIO_Init+0x120>)
 8000740:	2102      	movs	r1, #2
 8000742:	430a      	orrs	r2, r1
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <MX_GPIO_Init+0x120>)
 8000748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074a:	2202      	movs	r2, #2
 800074c:	4013      	ands	r3, r2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GSM_GPIO_Port, EN_GSM_Pin, GPIO_PIN_RESET);
 8000752:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <MX_GPIO_Init+0x124>)
 8000754:	2200      	movs	r2, #0
 8000756:	2140      	movs	r1, #64	; 0x40
 8000758:	0018      	movs	r0, r3
 800075a:	f001 fff9 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GSM_PWKEY_Pin|GSM_EN_Pin, GPIO_PIN_RESET);
 800075e:	2381      	movs	r3, #129	; 0x81
 8000760:	0219      	lsls	r1, r3, #8
 8000762:	23a0      	movs	r3, #160	; 0xa0
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2200      	movs	r2, #0
 8000768:	0018      	movs	r0, r3
 800076a:	f001 fff1 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, GPIO_PIN_RESET);
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4824      	ldr	r0, [pc, #144]	; (8000804 <MX_GPIO_Init+0x128>)
 8000774:	2200      	movs	r2, #0
 8000776:	0019      	movs	r1, r3
 8000778:	f001 ffea 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_GSM_Pin;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2240      	movs	r2, #64	; 0x40
 8000780:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2201      	movs	r2, #1
 8000786:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_GSM_GPIO_Port, &GPIO_InitStruct);
 8000794:	193b      	adds	r3, r7, r4
 8000796:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <MX_GPIO_Init+0x124>)
 8000798:	0019      	movs	r1, r3
 800079a:	0010      	movs	r0, r2
 800079c:	f001 fe5a 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GSM_PWKEY_Pin|GSM_EN_Pin;
 80007a0:	0021      	movs	r1, r4
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2281      	movs	r2, #129	; 0x81
 80007a6:	0212      	lsls	r2, r2, #8
 80007a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	000c      	movs	r4, r1
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2201      	movs	r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	193a      	adds	r2, r7, r4
 80007c0:	23a0      	movs	r3, #160	; 0xa0
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 fe44 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GSM_RESET_Pin;
 80007cc:	0021      	movs	r1, r4
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	0092      	lsls	r2, r2, #2
 80007d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2201      	movs	r2, #1
 80007da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GSM_RESET_GPIO_Port, &GPIO_InitStruct);
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	4a06      	ldr	r2, [pc, #24]	; (8000804 <MX_GPIO_Init+0x128>)
 80007ec:	0019      	movs	r1, r3
 80007ee:	0010      	movs	r0, r2
 80007f0:	f001 fe30 	bl	8002454 <HAL_GPIO_Init>

}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b00b      	add	sp, #44	; 0x2c
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	50000800 	.word	0x50000800
 8000804:	50000400 	.word	0x50000400

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f001 fc4c 	bl	80020a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f808 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f7ff ff62 	bl	80006dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000818:	f000 f8f0 	bl	80009fc <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  App_Main();
 800081c:	f7ff ff4c 	bl	80006b8 <App_Main>
 8000820:	e7fc      	b.n	800081c <main+0x14>
	...

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b09b      	sub	sp, #108	; 0x6c
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	2434      	movs	r4, #52	; 0x34
 800082c:	193b      	adds	r3, r7, r4
 800082e:	0018      	movs	r0, r3
 8000830:	2334      	movs	r3, #52	; 0x34
 8000832:	001a      	movs	r2, r3
 8000834:	2100      	movs	r1, #0
 8000836:	f004 fa76 	bl	8004d26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083a:	2320      	movs	r3, #32
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	0018      	movs	r0, r3
 8000840:	2314      	movs	r3, #20
 8000842:	001a      	movs	r2, r3
 8000844:	2100      	movs	r1, #0
 8000846:	f004 fa6e 	bl	8004d26 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084a:	003b      	movs	r3, r7
 800084c:	0018      	movs	r0, r3
 800084e:	2320      	movs	r3, #32
 8000850:	001a      	movs	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	f004 fa67 	bl	8004d26 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	4b29      	ldr	r3, [pc, #164]	; (8000900 <SystemClock_Config+0xdc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a29      	ldr	r2, [pc, #164]	; (8000904 <SystemClock_Config+0xe0>)
 800085e:	401a      	ands	r2, r3
 8000860:	4b27      	ldr	r3, [pc, #156]	; (8000900 <SystemClock_Config+0xdc>)
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	0109      	lsls	r1, r1, #4
 8000866:	430a      	orrs	r2, r1
 8000868:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086a:	0021      	movs	r1, r4
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2202      	movs	r2, #2
 8000870:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2201      	movs	r2, #1
 8000876:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2210      	movs	r2, #16
 800087c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2202      	movs	r2, #2
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	0412      	lsls	r2, r2, #16
 8000896:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	187b      	adds	r3, r7, r1
 800089a:	0018      	movs	r0, r3
 800089c:	f001 ff76 	bl	800278c <HAL_RCC_OscConfig>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008a4:	f000 f830 	bl	8000908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	2120      	movs	r1, #32
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	220f      	movs	r2, #15
 80008ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2203      	movs	r2, #3
 80008b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2100      	movs	r1, #0
 80008cc:	0018      	movs	r0, r3
 80008ce:	f002 fad9 	bl	8002e84 <HAL_RCC_ClockConfig>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008d6:	f000 f817 	bl	8000908 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008da:	003b      	movs	r3, r7
 80008dc:	2201      	movs	r2, #1
 80008de:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008e0:	003b      	movs	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e6:	003b      	movs	r3, r7
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 fcef 	bl	80032cc <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008f2:	f000 f809 	bl	8000908 <Error_Handler>
  }
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b01b      	add	sp, #108	; 0x6c
 80008fc:	bd90      	pop	{r4, r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	40007000 	.word	0x40007000
 8000904:	ffffe7ff 	.word	0xffffe7ff

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <HAL_MspInit+0x24>)
 800091a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x24>)
 800091e:	2101      	movs	r1, #1
 8000920:	430a      	orrs	r2, r1
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <HAL_MspInit+0x24>)
 8000926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <HAL_MspInit+0x24>)
 800092a:	2180      	movs	r1, #128	; 0x80
 800092c:	0549      	lsls	r1, r1, #21
 800092e:	430a      	orrs	r2, r1
 8000930:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f001 fbf6 	bl	8002150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	/* Check RXNE flag value in ISR register */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <USART1_IRQHandler+0x14>)
 8000972:	0018      	movs	r0, r3
 8000974:	f002 ff54 	bl	8003820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	2000030c 	.word	0x2000030c

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	18d3      	adds	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f004 f96c 	bl	8004c90 <__errno>
 80009b8:	0003      	movs	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	2301      	movs	r3, #1
 80009c0:	425b      	negs	r3, r3
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	18d2      	adds	r2, r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	b006      	add	sp, #24
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20005000 	.word	0x20005000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	20000090 	.word	0x20000090
 80009ec:	20000418 	.word	0x20000418

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <MX_USART1_UART_Init+0x5c>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a08:	22e1      	movs	r2, #225	; 0xe1
 8000a0a:	0252      	lsls	r2, r2, #9
 8000a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f002 fd89 	bl	8003558 <HAL_UART_Init>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a4a:	f7ff ff5d 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000030c 	.word	0x2000030c
 8000a58:	40013800 	.word	0x40013800

08000a5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	240c      	movs	r4, #12
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	2314      	movs	r3, #20
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f004 f959 	bl	8004d26 <memset>
  if(uartHandle->Instance==USART1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <HAL_UART_MspInit+0x90>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d132      	bne.n	8000ae4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_UART_MspInit+0x94>)
 8000a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <HAL_UART_MspInit+0x94>)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	01c9      	lsls	r1, r1, #7
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_UART_MspInit+0x94>)
 8000a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_UART_MspInit+0x94>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	430a      	orrs	r2, r1
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_UART_MspInit+0x94>)
 8000a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MCU_TX0_Pin|MCU_RX0_Pin;
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	22c0      	movs	r2, #192	; 0xc0
 8000aa8:	00d2      	lsls	r2, r2, #3
 8000aaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	0021      	movs	r1, r4
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2203      	movs	r2, #3
 8000abe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	187a      	adds	r2, r7, r1
 8000ac8:	23a0      	movs	r3, #160	; 0xa0
 8000aca:	05db      	lsls	r3, r3, #23
 8000acc:	0011      	movs	r1, r2
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f001 fcc0 	bl	8002454 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	201b      	movs	r0, #27
 8000ada:	f001 fc01 	bl	80022e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ade:	201b      	movs	r0, #27
 8000ae0:	f001 fc13 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b009      	add	sp, #36	; 0x24
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	40013800 	.word	0x40013800
 8000af0:	40021000 	.word	0x40021000

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000af6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000afa:	490e      	ldr	r1, [pc, #56]	; (8000b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000afc:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <LoopForever+0xe>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b10:	4c0b      	ldr	r4, [pc, #44]	; (8000b40 <LoopForever+0x16>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b1e:	f7ff ff67 	bl	80009f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f004 f8bb 	bl	8004c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fe6f 	bl	8000808 <main>

08000b2a <LoopForever>:

LoopForever:
    b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
   ldr   r0, =_estack
 8000b2c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b38:	08005248 	.word	0x08005248
  ldr r2, =_sbss
 8000b3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b40:	20000418 	.word	0x20000418

08000b44 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_COMP_IRQHandler>
	...

08000b48 <GSM_Config_Module>:
# include "gsm.h"

Gsm_Manager_TypDef GSM_Manager;

void GSM_Config_Module (GSM_Response_Event_TypDef event, void *Resp_Buffer)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b087      	sub	sp, #28
 8000b4c:	af04      	add	r7, sp, #16
 8000b4e:	0002      	movs	r2, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	701a      	strb	r2, [r3, #0]
    switch (GSM_Manager.step)
 8000b56:	4b9c      	ldr	r3, [pc, #624]	; (8000dc8 <GSM_Config_Module+0x280>)
 8000b58:	785b      	ldrb	r3, [r3, #1]
 8000b5a:	2b0b      	cmp	r3, #11
 8000b5c:	d900      	bls.n	8000b60 <GSM_Config_Module+0x18>
 8000b5e:	e127      	b.n	8000db0 <GSM_Config_Module+0x268>
 8000b60:	009a      	lsls	r2, r3, #2
 8000b62:	4b9a      	ldr	r3, [pc, #616]	; (8000dcc <GSM_Config_Module+0x284>)
 8000b64:	18d3      	adds	r3, r2, r3
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	469f      	mov	pc, r3
    {
        case 1:
            if(event != GSM_EVENT_OK)
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d005      	beq.n	8000b7e <GSM_Config_Module+0x36>
            {
                SEGGER_RTT_printf(0,"Connect Module ERROR.\r\n");
 8000b72:	4b97      	ldr	r3, [pc, #604]	; (8000dd0 <GSM_Config_Module+0x288>)
 8000b74:	0019      	movs	r1, r3
 8000b76:	2000      	movs	r0, #0
 8000b78:	f001 f99a 	bl	8001eb0 <SEGGER_RTT_printf>
            }
            else
            {
                GSM_SendCommand_AT("ATE0\r\n", "OK\r\n","","","",50,5,GSM_Config_Module);
            }
            break;
 8000b7c:	e119      	b.n	8000db2 <GSM_Config_Module+0x26a>
                GSM_SendCommand_AT("ATE0\r\n", "OK\r\n","","","",50,5,GSM_Config_Module);
 8000b7e:	4c95      	ldr	r4, [pc, #596]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000b80:	4a94      	ldr	r2, [pc, #592]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000b82:	4995      	ldr	r1, [pc, #596]	; (8000dd8 <GSM_Config_Module+0x290>)
 8000b84:	4895      	ldr	r0, [pc, #596]	; (8000ddc <GSM_Config_Module+0x294>)
 8000b86:	4b96      	ldr	r3, [pc, #600]	; (8000de0 <GSM_Config_Module+0x298>)
 8000b88:	9303      	str	r3, [sp, #12]
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	9302      	str	r3, [sp, #8]
 8000b8e:	2332      	movs	r3, #50	; 0x32
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	4b90      	ldr	r3, [pc, #576]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	0023      	movs	r3, r4
 8000b98:	f000 fc10 	bl	80013bc <GSM_SendCommand_AT>
            break;
 8000b9c:	e109      	b.n	8000db2 <GSM_Config_Module+0x26a>
        case 2:
            SEGGER_RTT_printf(0,"Disable ECHO %s.\r\n",(event == GSM_EVENT_OK)?"OK":"FAIL");
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <GSM_Config_Module+0x62>
 8000ba6:	4b8f      	ldr	r3, [pc, #572]	; (8000de4 <GSM_Config_Module+0x29c>)
 8000ba8:	e000      	b.n	8000bac <GSM_Config_Module+0x64>
 8000baa:	4b8f      	ldr	r3, [pc, #572]	; (8000de8 <GSM_Config_Module+0x2a0>)
 8000bac:	498f      	ldr	r1, [pc, #572]	; (8000dec <GSM_Config_Module+0x2a4>)
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f001 f97d 	bl	8001eb0 <SEGGER_RTT_printf>
            GSM_SendCommand_AT("AT+CMEE=2\r\n", "OK\r\n","","","",50,5,GSM_Config_Module);
 8000bb6:	4c87      	ldr	r4, [pc, #540]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000bb8:	4a86      	ldr	r2, [pc, #536]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000bba:	4987      	ldr	r1, [pc, #540]	; (8000dd8 <GSM_Config_Module+0x290>)
 8000bbc:	488c      	ldr	r0, [pc, #560]	; (8000df0 <GSM_Config_Module+0x2a8>)
 8000bbe:	4b88      	ldr	r3, [pc, #544]	; (8000de0 <GSM_Config_Module+0x298>)
 8000bc0:	9303      	str	r3, [sp, #12]
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	9302      	str	r3, [sp, #8]
 8000bc6:	2332      	movs	r3, #50	; 0x32
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	4b82      	ldr	r3, [pc, #520]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	0023      	movs	r3, r4
 8000bd0:	f000 fbf4 	bl	80013bc <GSM_SendCommand_AT>
            break;
 8000bd4:	e0ed      	b.n	8000db2 <GSM_Config_Module+0x26a>
        case 3:
            SEGGER_RTT_printf(0,"Set up ERROR Message Format %s.\r\n",(event == GSM_EVENT_OK)?"OK":"FAIL");
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <GSM_Config_Module+0x9a>
 8000bde:	4b81      	ldr	r3, [pc, #516]	; (8000de4 <GSM_Config_Module+0x29c>)
 8000be0:	e000      	b.n	8000be4 <GSM_Config_Module+0x9c>
 8000be2:	4b81      	ldr	r3, [pc, #516]	; (8000de8 <GSM_Config_Module+0x2a0>)
 8000be4:	4983      	ldr	r1, [pc, #524]	; (8000df4 <GSM_Config_Module+0x2ac>)
 8000be6:	001a      	movs	r2, r3
 8000be8:	2000      	movs	r0, #0
 8000bea:	f001 f961 	bl	8001eb0 <SEGGER_RTT_printf>
            GSM_SendCommand_AT("ATI\r\n", "OK\r\n","","","",50,5,GSM_Config_Module);
 8000bee:	4c79      	ldr	r4, [pc, #484]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000bf0:	4a78      	ldr	r2, [pc, #480]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000bf2:	4979      	ldr	r1, [pc, #484]	; (8000dd8 <GSM_Config_Module+0x290>)
 8000bf4:	4880      	ldr	r0, [pc, #512]	; (8000df8 <GSM_Config_Module+0x2b0>)
 8000bf6:	4b7a      	ldr	r3, [pc, #488]	; (8000de0 <GSM_Config_Module+0x298>)
 8000bf8:	9303      	str	r3, [sp, #12]
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	9302      	str	r3, [sp, #8]
 8000bfe:	2332      	movs	r3, #50	; 0x32
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	4b74      	ldr	r3, [pc, #464]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	0023      	movs	r3, r4
 8000c08:	f000 fbd8 	bl	80013bc <GSM_SendCommand_AT>
            break;
 8000c0c:	e0d1      	b.n	8000db2 <GSM_Config_Module+0x26a>
        case 4:
            SEGGER_RTT_printf(0,"Get Info Module %s.\r\n",(event == GSM_EVENT_OK)?"OK":"FAIL");
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <GSM_Config_Module+0xd2>
 8000c16:	4b73      	ldr	r3, [pc, #460]	; (8000de4 <GSM_Config_Module+0x29c>)
 8000c18:	e000      	b.n	8000c1c <GSM_Config_Module+0xd4>
 8000c1a:	4b73      	ldr	r3, [pc, #460]	; (8000de8 <GSM_Config_Module+0x2a0>)
 8000c1c:	4977      	ldr	r1, [pc, #476]	; (8000dfc <GSM_Config_Module+0x2b4>)
 8000c1e:	001a      	movs	r2, r3
 8000c20:	2000      	movs	r0, #0
 8000c22:	f001 f945 	bl	8001eb0 <SEGGER_RTT_printf>
            GSM_SendCommand_AT("AT\r\n", "OK\r\n","","","",50,5,GSM_Config_Module);
 8000c26:	4c6b      	ldr	r4, [pc, #428]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000c28:	4a6a      	ldr	r2, [pc, #424]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000c2a:	496b      	ldr	r1, [pc, #428]	; (8000dd8 <GSM_Config_Module+0x290>)
 8000c2c:	4874      	ldr	r0, [pc, #464]	; (8000e00 <GSM_Config_Module+0x2b8>)
 8000c2e:	4b6c      	ldr	r3, [pc, #432]	; (8000de0 <GSM_Config_Module+0x298>)
 8000c30:	9303      	str	r3, [sp, #12]
 8000c32:	2305      	movs	r3, #5
 8000c34:	9302      	str	r3, [sp, #8]
 8000c36:	2332      	movs	r3, #50	; 0x32
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	4b66      	ldr	r3, [pc, #408]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	0023      	movs	r3, r4
 8000c40:	f000 fbbc 	bl	80013bc <GSM_SendCommand_AT>
            break;
 8000c44:	e0b5      	b.n	8000db2 <GSM_Config_Module+0x26a>
        case 5:
            SEGGER_RTT_printf(0,"AT Test 1 %s.\r\n",(event == GSM_EVENT_OK)?"OK":"FAIL");
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <GSM_Config_Module+0x10a>
 8000c4e:	4b65      	ldr	r3, [pc, #404]	; (8000de4 <GSM_Config_Module+0x29c>)
 8000c50:	e000      	b.n	8000c54 <GSM_Config_Module+0x10c>
 8000c52:	4b65      	ldr	r3, [pc, #404]	; (8000de8 <GSM_Config_Module+0x2a0>)
 8000c54:	496b      	ldr	r1, [pc, #428]	; (8000e04 <GSM_Config_Module+0x2bc>)
 8000c56:	001a      	movs	r2, r3
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f001 f929 	bl	8001eb0 <SEGGER_RTT_printf>
            GSM_SendCommand_AT("AT\r\n", "OK\r\n","","","",50,5,GSM_Config_Module);
 8000c5e:	4c5d      	ldr	r4, [pc, #372]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000c60:	4a5c      	ldr	r2, [pc, #368]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000c62:	495d      	ldr	r1, [pc, #372]	; (8000dd8 <GSM_Config_Module+0x290>)
 8000c64:	4866      	ldr	r0, [pc, #408]	; (8000e00 <GSM_Config_Module+0x2b8>)
 8000c66:	4b5e      	ldr	r3, [pc, #376]	; (8000de0 <GSM_Config_Module+0x298>)
 8000c68:	9303      	str	r3, [sp, #12]
 8000c6a:	2305      	movs	r3, #5
 8000c6c:	9302      	str	r3, [sp, #8]
 8000c6e:	2332      	movs	r3, #50	; 0x32
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	0023      	movs	r3, r4
 8000c78:	f000 fba0 	bl	80013bc <GSM_SendCommand_AT>
            break;
 8000c7c:	e099      	b.n	8000db2 <GSM_Config_Module+0x26a>
        case 6:
            SEGGER_RTT_printf(0,"AT Test 2 %s.\r\n",(event == GSM_EVENT_OK)?"OK":"FAIL");
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <GSM_Config_Module+0x142>
 8000c86:	4b57      	ldr	r3, [pc, #348]	; (8000de4 <GSM_Config_Module+0x29c>)
 8000c88:	e000      	b.n	8000c8c <GSM_Config_Module+0x144>
 8000c8a:	4b57      	ldr	r3, [pc, #348]	; (8000de8 <GSM_Config_Module+0x2a0>)
 8000c8c:	495e      	ldr	r1, [pc, #376]	; (8000e08 <GSM_Config_Module+0x2c0>)
 8000c8e:	001a      	movs	r2, r3
 8000c90:	2000      	movs	r0, #0
 8000c92:	f001 f90d 	bl	8001eb0 <SEGGER_RTT_printf>
            GSM_SendCommand_AT("AT+QCFG=\"urc/ri/smsincoming\",\"pulse\",2000\r\n", "OK\r\n","","","",50,5,GSM_Config_Module);
 8000c96:	4c4f      	ldr	r4, [pc, #316]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000c98:	4a4e      	ldr	r2, [pc, #312]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000c9a:	494f      	ldr	r1, [pc, #316]	; (8000dd8 <GSM_Config_Module+0x290>)
 8000c9c:	485b      	ldr	r0, [pc, #364]	; (8000e0c <GSM_Config_Module+0x2c4>)
 8000c9e:	4b50      	ldr	r3, [pc, #320]	; (8000de0 <GSM_Config_Module+0x298>)
 8000ca0:	9303      	str	r3, [sp, #12]
 8000ca2:	2305      	movs	r3, #5
 8000ca4:	9302      	str	r3, [sp, #8]
 8000ca6:	2332      	movs	r3, #50	; 0x32
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	4b4a      	ldr	r3, [pc, #296]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	0023      	movs	r3, r4
 8000cb0:	f000 fb84 	bl	80013bc <GSM_SendCommand_AT>
            break;
 8000cb4:	e07d      	b.n	8000db2 <GSM_Config_Module+0x26a>
        case 7:
            SEGGER_RTT_printf(0,"Set URC Ringtype %s.\r\n",(event == GSM_EVENT_OK)?"OK":"FAIL");
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <GSM_Config_Module+0x17a>
 8000cbe:	4b49      	ldr	r3, [pc, #292]	; (8000de4 <GSM_Config_Module+0x29c>)
 8000cc0:	e000      	b.n	8000cc4 <GSM_Config_Module+0x17c>
 8000cc2:	4b49      	ldr	r3, [pc, #292]	; (8000de8 <GSM_Config_Module+0x2a0>)
 8000cc4:	4952      	ldr	r1, [pc, #328]	; (8000e10 <GSM_Config_Module+0x2c8>)
 8000cc6:	001a      	movs	r2, r3
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f001 f8f1 	bl	8001eb0 <SEGGER_RTT_printf>
            GSM_SendCommand_AT("AT+CNMI=2,1,0,0,0\r\n", "OK\r\n","","","",50,5,GSM_Config_Module);
 8000cce:	4c41      	ldr	r4, [pc, #260]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000cd0:	4a40      	ldr	r2, [pc, #256]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000cd2:	4941      	ldr	r1, [pc, #260]	; (8000dd8 <GSM_Config_Module+0x290>)
 8000cd4:	484f      	ldr	r0, [pc, #316]	; (8000e14 <GSM_Config_Module+0x2cc>)
 8000cd6:	4b42      	ldr	r3, [pc, #264]	; (8000de0 <GSM_Config_Module+0x298>)
 8000cd8:	9303      	str	r3, [sp, #12]
 8000cda:	2305      	movs	r3, #5
 8000cdc:	9302      	str	r3, [sp, #8]
 8000cde:	2332      	movs	r3, #50	; 0x32
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	4b3c      	ldr	r3, [pc, #240]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	0023      	movs	r3, r4
 8000ce8:	f000 fb68 	bl	80013bc <GSM_SendCommand_AT>
            break;
 8000cec:	e061      	b.n	8000db2 <GSM_Config_Module+0x26a>
        case 8:
            SEGGER_RTT_printf(0,"Config SMS event report %s.\r\n",(event == GSM_EVENT_OK)?"OK":"FAIL");
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <GSM_Config_Module+0x1b2>
 8000cf6:	4b3b      	ldr	r3, [pc, #236]	; (8000de4 <GSM_Config_Module+0x29c>)
 8000cf8:	e000      	b.n	8000cfc <GSM_Config_Module+0x1b4>
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <GSM_Config_Module+0x2a0>)
 8000cfc:	4946      	ldr	r1, [pc, #280]	; (8000e18 <GSM_Config_Module+0x2d0>)
 8000cfe:	001a      	movs	r2, r3
 8000d00:	2000      	movs	r0, #0
 8000d02:	f001 f8d5 	bl	8001eb0 <SEGGER_RTT_printf>
            GSM_SendCommand_AT("AT+CMGF=1\r\n", "OK\r\n","","","",50,5,GSM_Config_Module);
 8000d06:	4c33      	ldr	r4, [pc, #204]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000d08:	4a32      	ldr	r2, [pc, #200]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000d0a:	4933      	ldr	r1, [pc, #204]	; (8000dd8 <GSM_Config_Module+0x290>)
 8000d0c:	4843      	ldr	r0, [pc, #268]	; (8000e1c <GSM_Config_Module+0x2d4>)
 8000d0e:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <GSM_Config_Module+0x298>)
 8000d10:	9303      	str	r3, [sp, #12]
 8000d12:	2305      	movs	r3, #5
 8000d14:	9302      	str	r3, [sp, #8]
 8000d16:	2332      	movs	r3, #50	; 0x32
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	0023      	movs	r3, r4
 8000d20:	f000 fb4c 	bl	80013bc <GSM_SendCommand_AT>
            break;
 8000d24:	e045      	b.n	8000db2 <GSM_Config_Module+0x26a>
        case 9:
            SEGGER_RTT_printf(0,"Set SMS Format to Text mode %s.\r\n",(event == GSM_EVENT_OK)?"OK":"FAIL");
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <GSM_Config_Module+0x1ea>
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <GSM_Config_Module+0x29c>)
 8000d30:	e000      	b.n	8000d34 <GSM_Config_Module+0x1ec>
 8000d32:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <GSM_Config_Module+0x2a0>)
 8000d34:	493a      	ldr	r1, [pc, #232]	; (8000e20 <GSM_Config_Module+0x2d8>)
 8000d36:	001a      	movs	r2, r3
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f001 f8b9 	bl	8001eb0 <SEGGER_RTT_printf>
            GSM_SendCommand_AT("AT\r\n", "OK\r\n","","","",50,5,GSM_Config_Module);
 8000d3e:	4c25      	ldr	r4, [pc, #148]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000d40:	4a24      	ldr	r2, [pc, #144]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000d42:	4925      	ldr	r1, [pc, #148]	; (8000dd8 <GSM_Config_Module+0x290>)
 8000d44:	482e      	ldr	r0, [pc, #184]	; (8000e00 <GSM_Config_Module+0x2b8>)
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <GSM_Config_Module+0x298>)
 8000d48:	9303      	str	r3, [sp, #12]
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	9302      	str	r3, [sp, #8]
 8000d4e:	2332      	movs	r3, #50	; 0x32
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	0023      	movs	r3, r4
 8000d58:	f000 fb30 	bl	80013bc <GSM_SendCommand_AT>
            break;
 8000d5c:	e029      	b.n	8000db2 <GSM_Config_Module+0x26a>
        case 10:
            SEGGER_RTT_printf(0,"AT Test %s.\r\n",(event == GSM_EVENT_OK)?"OK":"FAIL");
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <GSM_Config_Module+0x222>
 8000d66:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <GSM_Config_Module+0x29c>)
 8000d68:	e000      	b.n	8000d6c <GSM_Config_Module+0x224>
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <GSM_Config_Module+0x2a0>)
 8000d6c:	492d      	ldr	r1, [pc, #180]	; (8000e24 <GSM_Config_Module+0x2dc>)
 8000d6e:	001a      	movs	r2, r3
 8000d70:	2000      	movs	r0, #0
 8000d72:	f001 f89d 	bl	8001eb0 <SEGGER_RTT_printf>
            GSM_SendCommand_AT("AT+CGSN\r\n", "OK\r\n","","","",50,5,GSM_Config_Module);
 8000d76:	4c17      	ldr	r4, [pc, #92]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000d7a:	4917      	ldr	r1, [pc, #92]	; (8000dd8 <GSM_Config_Module+0x290>)
 8000d7c:	482a      	ldr	r0, [pc, #168]	; (8000e28 <GSM_Config_Module+0x2e0>)
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <GSM_Config_Module+0x298>)
 8000d80:	9303      	str	r3, [sp, #12]
 8000d82:	2305      	movs	r3, #5
 8000d84:	9302      	str	r3, [sp, #8]
 8000d86:	2332      	movs	r3, #50	; 0x32
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <GSM_Config_Module+0x28c>)
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	0023      	movs	r3, r4
 8000d90:	f000 fb14 	bl	80013bc <GSM_SendCommand_AT>
            break;
 8000d94:	e00d      	b.n	8000db2 <GSM_Config_Module+0x26a>
        case 11:
            SEGGER_RTT_printf(0,"Get IMEI %s.\r\n",(event == GSM_EVENT_OK)?"OK":"FAIL");
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <GSM_Config_Module+0x25a>
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <GSM_Config_Module+0x29c>)
 8000da0:	e000      	b.n	8000da4 <GSM_Config_Module+0x25c>
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <GSM_Config_Module+0x2a0>)
 8000da4:	4921      	ldr	r1, [pc, #132]	; (8000e2c <GSM_Config_Module+0x2e4>)
 8000da6:	001a      	movs	r2, r3
 8000da8:	2000      	movs	r0, #0
 8000daa:	f001 f881 	bl	8001eb0 <SEGGER_RTT_printf>
            break;
 8000dae:	e000      	b.n	8000db2 <GSM_Config_Module+0x26a>
    default:

        break;
 8000db0:	46c0      	nop			; (mov r8, r8)
    }
    GSM_Manager.step++;
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <GSM_Config_Module+0x280>)
 8000db4:	785b      	ldrb	r3, [r3, #1]
 8000db6:	3301      	adds	r3, #1
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <GSM_Config_Module+0x280>)
 8000dbc:	705a      	strb	r2, [r3, #1]
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b003      	add	sp, #12
 8000dc4:	bd90      	pop	{r4, r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	20000390 	.word	0x20000390
 8000dcc:	0800510c 	.word	0x0800510c
 8000dd0:	08004e80 	.word	0x08004e80
 8000dd4:	08004e98 	.word	0x08004e98
 8000dd8:	08004e9c 	.word	0x08004e9c
 8000ddc:	08004ea4 	.word	0x08004ea4
 8000de0:	08000b49 	.word	0x08000b49
 8000de4:	08004eac 	.word	0x08004eac
 8000de8:	08004eb0 	.word	0x08004eb0
 8000dec:	08004eb8 	.word	0x08004eb8
 8000df0:	08004ecc 	.word	0x08004ecc
 8000df4:	08004ed8 	.word	0x08004ed8
 8000df8:	08004efc 	.word	0x08004efc
 8000dfc:	08004f04 	.word	0x08004f04
 8000e00:	08004f1c 	.word	0x08004f1c
 8000e04:	08004f24 	.word	0x08004f24
 8000e08:	08004f34 	.word	0x08004f34
 8000e0c:	08004f44 	.word	0x08004f44
 8000e10:	08004f70 	.word	0x08004f70
 8000e14:	08004f88 	.word	0x08004f88
 8000e18:	08004f9c 	.word	0x08004f9c
 8000e1c:	08004fbc 	.word	0x08004fbc
 8000e20:	08004fc8 	.word	0x08004fc8
 8000e24:	08004fec 	.word	0x08004fec
 8000e28:	08004ffc 	.word	0x08004ffc
 8000e2c:	08005008 	.word	0x08005008

08000e30 <GSM_mnr_task>:
void GSM_mnr_task(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
    GSM_Hardware_Layer_Run();
 8000e34:	f000 f87c 	bl	8000f30 <GSM_Hardware_Layer_Run>
    Polling_GSM_StateMachine();
 8000e38:	f000 f804 	bl	8000e44 <Polling_GSM_StateMachine>
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <Polling_GSM_StateMachine>:
void Polling_GSM_StateMachine (void)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af04      	add	r7, sp, #16
    static uint32_t last_tick = 0;
    uint32_t current_tick = sys_get_tick_ms();
 8000e4a:	f000 fb07 	bl	800145c <sys_get_tick_ms>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	607b      	str	r3, [r7, #4]
    if(current_tick - last_tick >= (uint32_t)1000)
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <Polling_GSM_StateMachine+0x84>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	1ad2      	subs	r2, r2, r3
 8000e5a:	23fa      	movs	r3, #250	; 0xfa
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d32b      	bcc.n	8000eba <Polling_GSM_StateMachine+0x76>
    {
        last_tick = current_tick;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <Polling_GSM_StateMachine+0x84>)
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	601a      	str	r2, [r3, #0]
        switch (GSM_Manager.state)
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <Polling_GSM_StateMachine+0x88>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d004      	beq.n	8000e7a <Polling_GSM_StateMachine+0x36>
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d119      	bne.n	8000ea8 <Polling_GSM_StateMachine+0x64>
        {
            case GSM_STATE_RESET:
                GSM_Turn_on_Power();
 8000e74:	f000 f9f8 	bl	8001268 <GSM_Turn_on_Power>
                break;
 8000e78:	e022      	b.n	8000ec0 <Polling_GSM_StateMachine+0x7c>
            case GSM_STATE_POWER_ON:
                if(GSM_Manager.step == 0)
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <Polling_GSM_StateMachine+0x88>)
 8000e7c:	785b      	ldrb	r3, [r3, #1]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11d      	bne.n	8000ebe <Polling_GSM_StateMachine+0x7a>
                {
                    GSM_Manager.step = 1;
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <Polling_GSM_StateMachine+0x88>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	705a      	strb	r2, [r3, #1]
                    GSM_SendCommand_AT("ATV1\r\n", "OK\r\n","","","",50,5,GSM_Config_Module);
 8000e88:	4c11      	ldr	r4, [pc, #68]	; (8000ed0 <Polling_GSM_StateMachine+0x8c>)
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <Polling_GSM_StateMachine+0x8c>)
 8000e8c:	4911      	ldr	r1, [pc, #68]	; (8000ed4 <Polling_GSM_StateMachine+0x90>)
 8000e8e:	4812      	ldr	r0, [pc, #72]	; (8000ed8 <Polling_GSM_StateMachine+0x94>)
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <Polling_GSM_StateMachine+0x98>)
 8000e92:	9303      	str	r3, [sp, #12]
 8000e94:	2305      	movs	r3, #5
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	2332      	movs	r3, #50	; 0x32
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <Polling_GSM_StateMachine+0x8c>)
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	0023      	movs	r3, r4
 8000ea2:	f000 fa8b 	bl	80013bc <GSM_SendCommand_AT>
                }
                break;
 8000ea6:	e00a      	b.n	8000ebe <Polling_GSM_StateMachine+0x7a>

            default:
                SEGGER_RTT_printf(0,"Unhandled state %d.\r\n", GSM_Manager.state);
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <Polling_GSM_StateMachine+0x88>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	001a      	movs	r2, r3
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <Polling_GSM_StateMachine+0x9c>)
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 fffc 	bl	8001eb0 <SEGGER_RTT_printf>
                break;
 8000eb8:	e002      	b.n	8000ec0 <Polling_GSM_StateMachine+0x7c>
        }
    }
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	e000      	b.n	8000ec0 <Polling_GSM_StateMachine+0x7c>
                break;
 8000ebe:	46c0      	nop			; (mov r8, r8)
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b003      	add	sp, #12
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	20000094 	.word	0x20000094
 8000ecc:	20000390 	.word	0x20000390
 8000ed0:	08004e98 	.word	0x08004e98
 8000ed4:	08004e9c 	.word	0x08004e9c
 8000ed8:	08005018 	.word	0x08005018
 8000edc:	08000b49 	.word	0x08000b49
 8000ee0:	08005020 	.word	0x08005020

08000ee4 <GSM_Manager_ChangeState>:
void GSM_Manager_ChangeState(uint8_t state)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	0002      	movs	r2, r0
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	701a      	strb	r2, [r3, #0]
    GSM_Manager.state = state;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <GSM_Manager_ChangeState+0x24>)
 8000ef2:	1dfa      	adds	r2, r7, #7
 8000ef4:	7812      	ldrb	r2, [r2, #0]
 8000ef6:	701a      	strb	r2, [r3, #0]
    GSM_Manager.step = 0;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <GSM_Manager_ChangeState+0x24>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	705a      	strb	r2, [r3, #1]
}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	20000390 	.word	0x20000390

08000f0c <GMS_Hardware_Init>:
uint8_t *p_compare_end_str_error_handle;

static GSM_Hardware_atc_TypDef m_gsm_atc;

void GMS_Hardware_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	//Init SEGGER RTT Debug
	SEGGER_RTT_Init();
 8000f10:	f000 fc44 	bl	800179c <SEGGER_RTT_Init>
	// Cap phat bo nho cho RxRingBuffer
	RingBuffer_Init(&Rx_Buffer, 100);
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <GMS_Hardware_Init+0x20>)
 8000f16:	2164      	movs	r1, #100	; 0x64
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 ffe2 	bl	8001ee2 <RingBuffer_Init>
	// Set default GMS State to GMS_STATE_RESET
	GSM_Manager_ChangeState(GSM_STATE_RESET);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff ffe0 	bl	8000ee4 <GSM_Manager_ChangeState>
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	200003a4 	.word	0x200003a4

08000f30 <GSM_Hardware_Layer_Run>:
void GSM_Hardware_Layer_Run(void)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
	static uint32_t LastTick = 0;
	uint32_t Current_Tick = sys_get_tick_ms();
 8000f36:	f000 fa91 	bl	800145c <sys_get_tick_ms>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	60fb      	str	r3, [r7, #12]

	if(Current_Tick - LastTick < (uint32_t)5)
 8000f3e:	4bba      	ldr	r3, [pc, #744]	; (8001228 <GSM_Hardware_Layer_Run+0x2f8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	d800      	bhi.n	8000f4c <GSM_Hardware_Layer_Run+0x1c>
 8000f4a:	e168      	b.n	800121e <GSM_Hardware_Layer_Run+0x2ee>
	{
		return;
	}
	uint32_t diff = sys_get_tick_ms() - m_gsm_atc.atc.Last_time_send_atc_ms;
 8000f4c:	f000 fa86 	bl	800145c <sys_get_tick_ms>
 8000f50:	0002      	movs	r2, r0
 8000f52:	4bb6      	ldr	r3, [pc, #728]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	60bb      	str	r3, [r7, #8]
	if(m_gsm_atc.atc.Timeout_atc_ms && diff >= m_gsm_atc.atc.Timeout_atc_ms)
 8000f5a:	4bb4      	ldr	r3, [pc, #720]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d041      	beq.n	8000fe6 <GSM_Hardware_Layer_Run+0xb6>
 8000f62:	4bb2      	ldr	r3, [pc, #712]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d33c      	bcc.n	8000fe6 <GSM_Hardware_Layer_Run+0xb6>
	{
		if(--m_gsm_atc.atc.Retry_Count_atc <= 0)
 8000f6c:	4baf      	ldr	r3, [pc, #700]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000f6e:	7f1b      	ldrb	r3, [r3, #28]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4bad      	ldr	r3, [pc, #692]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000f76:	771a      	strb	r2, [r3, #28]
 8000f78:	4bac      	ldr	r3, [pc, #688]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000f7a:	7f1b      	ldrb	r3, [r3, #28]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d117      	bne.n	8000fb0 <GSM_Hardware_Layer_Run+0x80>
		{
			m_gsm_atc.atc.Timeout_atc_ms = 0;
 8000f80:	4baa      	ldr	r3, [pc, #680]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
			if(m_gsm_atc.atc.Send_at_Callback != NULL)
 8000f86:	4aa9      	ldr	r2, [pc, #676]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000f88:	2390      	movs	r3, #144	; 0x90
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	58d3      	ldr	r3, [r2, r3]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d006      	beq.n	8000fa0 <GSM_Hardware_Layer_Run+0x70>
			{
				m_gsm_atc.atc.Send_at_Callback(GSM_EVENT_TIMEOUT,NULL);
 8000f92:	4aa6      	ldr	r2, [pc, #664]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000f94:	2390      	movs	r3, #144	; 0x90
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	58d3      	ldr	r3, [r2, r3]
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	4798      	blx	r3
			}
			memset(&m_gsm_atc.atc.Recv_Buffer, 0, sizeof(m_gsm_atc.atc.Recv_Buffer));
 8000fa0:	2381      	movs	r3, #129	; 0x81
 8000fa2:	005a      	lsls	r2, r3, #1
 8000fa4:	4ba2      	ldr	r3, [pc, #648]	; (8001230 <GSM_Hardware_Layer_Run+0x300>)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f003 febc 	bl	8004d26 <memset>
 8000fae:	e01a      	b.n	8000fe6 <GSM_Hardware_Layer_Run+0xb6>
		}
		else
		{
			SEGGER_RTT_printf(0,"Retry send ATC %d.\r\n",m_gsm_atc.atc.Retry_Count_atc);
 8000fb0:	4b9e      	ldr	r3, [pc, #632]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000fb2:	7f1b      	ldrb	r3, [r3, #28]
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	4b9f      	ldr	r3, [pc, #636]	; (8001234 <GSM_Hardware_Layer_Run+0x304>)
 8000fb8:	0019      	movs	r1, r3
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 ff78 	bl	8001eb0 <SEGGER_RTT_printf>
			m_gsm_atc.atc.Last_time_send_atc_ms = sys_get_tick_ms();
 8000fc0:	f000 fa4c 	bl	800145c <sys_get_tick_ms>
 8000fc4:	0002      	movs	r2, r0
 8000fc6:	4b99      	ldr	r3, [pc, #612]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000fc8:	619a      	str	r2, [r3, #24]
			HAL_UART_Transmit(&huart1, (uint8_t*) m_gsm_atc.atc.cmd, strlen(m_gsm_atc.atc.cmd), 200);
 8000fca:	4b98      	ldr	r3, [pc, #608]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000fcc:	681c      	ldr	r4, [r3, #0]
 8000fce:	4b97      	ldr	r3, [pc, #604]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff f898 	bl	8000108 <strlen>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4896      	ldr	r0, [pc, #600]	; (8001238 <GSM_Hardware_Layer_Run+0x308>)
 8000fde:	23c8      	movs	r3, #200	; 0xc8
 8000fe0:	0021      	movs	r1, r4
 8000fe2:	f002 fb0d 	bl	8003600 <HAL_UART_Transmit>
		}
	}
	RingBuffer_GetBuffer(&m_gsm_atc.atc.Recv_Buffer,&Rx_Buffer);
 8000fe6:	4a95      	ldr	r2, [pc, #596]	; (800123c <GSM_Hardware_Layer_Run+0x30c>)
 8000fe8:	4b91      	ldr	r3, [pc, #580]	; (8001230 <GSM_Hardware_Layer_Run+0x300>)
 8000fea:	0011      	movs	r1, r2
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 fffd 	bl	8001fec <RingBuffer_GetBuffer>
	SEGGER_RTT_printf(0,"%d\r\n",m_gsm_atc.atc.Recv_Buffer.index);
 8000ff2:	4a8e      	ldr	r2, [pc, #568]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8000ff4:	238f      	movs	r3, #143	; 0x8f
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	5ad3      	ldrh	r3, [r2, r3]
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	4b90      	ldr	r3, [pc, #576]	; (8001240 <GSM_Hardware_Layer_Run+0x310>)
 8000ffe:	0019      	movs	r1, r3
 8001000:	2000      	movs	r0, #0
 8001002:	f000 ff55 	bl	8001eb0 <SEGGER_RTT_printf>
	for(int Count=1; Count < m_gsm_atc.atc.Recv_Buffer.index; Count++)
 8001006:	2301      	movs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	e00d      	b.n	8001028 <GSM_Hardware_Layer_Run+0xf8>
	{
		SEGGER_RTT_printf(0,"%c",(char)m_gsm_atc.atc.Recv_Buffer.u8Buffer[Count]);
 800100c:	4a87      	ldr	r2, [pc, #540]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	18d3      	adds	r3, r2, r3
 8001012:	331e      	adds	r3, #30
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	001a      	movs	r2, r3
 8001018:	4b8a      	ldr	r3, [pc, #552]	; (8001244 <GSM_Hardware_Layer_Run+0x314>)
 800101a:	0019      	movs	r1, r3
 800101c:	2000      	movs	r0, #0
 800101e:	f000 ff47 	bl	8001eb0 <SEGGER_RTT_printf>
	for(int Count=1; Count < m_gsm_atc.atc.Recv_Buffer.index; Count++)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	4a80      	ldr	r2, [pc, #512]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 800102a:	238f      	movs	r3, #143	; 0x8f
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	5ad3      	ldrh	r3, [r2, r3]
 8001030:	001a      	movs	r2, r3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	4293      	cmp	r3, r2
 8001036:	dbe9      	blt.n	800100c <GSM_Hardware_Layer_Run+0xdc>
	}
	SEGGER_RTT_printf(0,"\r\n");
 8001038:	4b83      	ldr	r3, [pc, #524]	; (8001248 <GSM_Hardware_Layer_Run+0x318>)
 800103a:	0019      	movs	r1, r3
 800103c:	2000      	movs	r0, #0
 800103e:	f000 ff37 	bl	8001eb0 <SEGGER_RTT_printf>
	uint8_t a = strstr((char*)m_gsm_atc.atc.Recv_Buffer.u8Buffer, m_gsm_atc.atc.expect_resp);
 8001042:	4b7a      	ldr	r3, [pc, #488]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	4b7a      	ldr	r3, [pc, #488]	; (8001230 <GSM_Hardware_Layer_Run+0x300>)
 8001048:	0011      	movs	r1, r2
 800104a:	0018      	movs	r0, r3
 800104c:	f003 fee4 	bl	8004e18 <strstr>
 8001050:	0003      	movs	r3, r0
 8001052:	001a      	movs	r2, r3
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	701a      	strb	r2, [r3, #0]
	uint8_t b = strstr("absbsbdsdOK\r\n",m_gsm_atc.atc.expect_resp);
 8001058:	4b74      	ldr	r3, [pc, #464]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	4b7b      	ldr	r3, [pc, #492]	; (800124c <GSM_Hardware_Layer_Run+0x31c>)
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f003 fed9 	bl	8004e18 <strstr>
 8001066:	0003      	movs	r3, r0
 8001068:	001a      	movs	r2, r3
 800106a:	1dbb      	adds	r3, r7, #6
 800106c:	701a      	strb	r2, [r3, #0]
	if(m_gsm_atc.atc.expect_resp && a)
 800106e:	4b6f      	ldr	r3, [pc, #444]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d060      	beq.n	8001138 <GSM_Hardware_Layer_Run+0x208>
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d05c      	beq.n	8001138 <GSM_Hardware_Layer_Run+0x208>
	//if(m_gsm_atc.atc.expect_resp && strstr((char*)"aOK\r\n", m_gsm_atc.atc.expect_resp))
	{
		bool do_callback = true;
 800107e:	2413      	movs	r4, #19
 8001080:	193b      	adds	r3, r7, r4
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
		if(m_gsm_atc.atc.expected_response_at_the_end)
 8001086:	4b69      	ldr	r3, [pc, #420]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d038      	beq.n	8001100 <GSM_Hardware_Layer_Run+0x1d0>
		{
			Expect_len_compare = strlen(m_gsm_atc.atc.expected_response_at_the_end);
 800108e:	4b67      	ldr	r3, [pc, #412]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff f838 	bl	8000108 <strlen>
 8001098:	0002      	movs	r2, r0
 800109a:	4b6d      	ldr	r3, [pc, #436]	; (8001250 <GSM_Hardware_Layer_Run+0x320>)
 800109c:	601a      	str	r2, [r3, #0]
			Current_Response_len = strlen((char*)m_gsm_atc.atc.Recv_Buffer.u8Buffer);
 800109e:	4b64      	ldr	r3, [pc, #400]	; (8001230 <GSM_Hardware_Layer_Run+0x300>)
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff f831 	bl	8000108 <strlen>
 80010a6:	0002      	movs	r2, r0
 80010a8:	4b6a      	ldr	r3, [pc, #424]	; (8001254 <GSM_Hardware_Layer_Run+0x324>)
 80010aa:	601a      	str	r2, [r3, #0]
			if(Expect_len_compare < Current_Response_len)
 80010ac:	4b68      	ldr	r3, [pc, #416]	; (8001250 <GSM_Hardware_Layer_Run+0x320>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b68      	ldr	r3, [pc, #416]	; (8001254 <GSM_Hardware_Layer_Run+0x324>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d21f      	bcs.n	80010f8 <GSM_Hardware_Layer_Run+0x1c8>
			{
				p_compare_end_str = &m_gsm_atc.atc.Recv_Buffer.u8Buffer[Current_Response_len - Expect_len_compare];
 80010b8:	4b66      	ldr	r3, [pc, #408]	; (8001254 <GSM_Hardware_Layer_Run+0x324>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b64      	ldr	r3, [pc, #400]	; (8001250 <GSM_Hardware_Layer_Run+0x320>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	3318      	adds	r3, #24
 80010c4:	001a      	movs	r2, r3
 80010c6:	4b59      	ldr	r3, [pc, #356]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 80010c8:	18d3      	adds	r3, r2, r3
 80010ca:	1d9a      	adds	r2, r3, #6
 80010cc:	4b62      	ldr	r3, [pc, #392]	; (8001258 <GSM_Hardware_Layer_Run+0x328>)
 80010ce:	601a      	str	r2, [r3, #0]
				if(memcmp(p_compare_end_str,m_gsm_atc.atc.expected_response_at_the_end,Expect_len_compare) == 0)
 80010d0:	4b61      	ldr	r3, [pc, #388]	; (8001258 <GSM_Hardware_Layer_Run+0x328>)
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	4b55      	ldr	r3, [pc, #340]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 80010d6:	6899      	ldr	r1, [r3, #8]
 80010d8:	4b5d      	ldr	r3, [pc, #372]	; (8001250 <GSM_Hardware_Layer_Run+0x320>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	001a      	movs	r2, r3
 80010de:	f003 fe0b 	bl	8004cf8 <memcmp>
 80010e2:	1e03      	subs	r3, r0, #0
 80010e4:	d103      	bne.n	80010ee <GSM_Hardware_Layer_Run+0x1be>
				{
					// Compare thành công đuôi Response
					do_callback = true;
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e008      	b.n	8001100 <GSM_Hardware_Layer_Run+0x1d0>
				}
				else
				{
					do_callback = false;
 80010ee:	2313      	movs	r3, #19
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e003      	b.n	8001100 <GSM_Hardware_Layer_Run+0x1d0>
				}
			}
			else
			{
				do_callback = false;
 80010f8:	2313      	movs	r3, #19
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
			}
		}
		if(do_callback == true)
 8001100:	2313      	movs	r3, #19
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d100      	bne.n	800110c <GSM_Hardware_Layer_Run+0x1dc>
 800110a:	e081      	b.n	8001210 <GSM_Hardware_Layer_Run+0x2e0>
		{
			//m_gsm_atc.atc.Last_time_send_atc_ms = 0;
			m_gsm_atc.atc.Timeout_atc_ms = 0;
 800110c:	4b47      	ldr	r3, [pc, #284]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
			m_gsm_atc.atc.Retry_Count_atc = 0;
 8001112:	4b46      	ldr	r3, [pc, #280]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8001114:	2200      	movs	r2, #0
 8001116:	771a      	strb	r2, [r3, #28]
			m_gsm_atc.atc.Send_at_Callback(GSM_EVENT_OK,m_gsm_atc.atc.Recv_Buffer.u8Buffer);
 8001118:	4a44      	ldr	r2, [pc, #272]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 800111a:	2390      	movs	r3, #144	; 0x90
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	58d3      	ldr	r3, [r2, r3]
 8001120:	4a43      	ldr	r2, [pc, #268]	; (8001230 <GSM_Hardware_Layer_Run+0x300>)
 8001122:	0011      	movs	r1, r2
 8001124:	2000      	movs	r0, #0
 8001126:	4798      	blx	r3
			memset(&m_gsm_atc.atc.Recv_Buffer, 0, sizeof(m_gsm_atc.atc.Recv_Buffer));
 8001128:	2381      	movs	r3, #129	; 0x81
 800112a:	005a      	lsls	r2, r3, #1
 800112c:	4b40      	ldr	r3, [pc, #256]	; (8001230 <GSM_Hardware_Layer_Run+0x300>)
 800112e:	2100      	movs	r1, #0
 8001130:	0018      	movs	r0, r3
 8001132:	f003 fdf8 	bl	8004d26 <memset>
	{
 8001136:	e06b      	b.n	8001210 <GSM_Hardware_Layer_Run+0x2e0>
		}

	}
	else if(m_gsm_atc.atc.expect_error && strstr((char*)m_gsm_atc.atc.Recv_Buffer.u8Buffer, m_gsm_atc.atc.expect_error))
 8001138:	4b3c      	ldr	r3, [pc, #240]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d068      	beq.n	8001212 <GSM_Hardware_Layer_Run+0x2e2>
 8001140:	4b3a      	ldr	r3, [pc, #232]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <GSM_Hardware_Layer_Run+0x300>)
 8001146:	0011      	movs	r1, r2
 8001148:	0018      	movs	r0, r3
 800114a:	f003 fe65 	bl	8004e18 <strstr>
 800114e:	1e03      	subs	r3, r0, #0
 8001150:	d05f      	beq.n	8001212 <GSM_Hardware_Layer_Run+0x2e2>
	{
		bool do_callback = true;
 8001152:	2412      	movs	r4, #18
 8001154:	193b      	adds	r3, r7, r4
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
		if(m_gsm_atc.atc.expect_error_at_the_end)
 800115a:	4b34      	ldr	r3, [pc, #208]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d038      	beq.n	80011d4 <GSM_Hardware_Layer_Run+0x2a4>
		{
			Expect_len_compare_error_handle = strlen(m_gsm_atc.atc.expect_error_at_the_end);
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	0018      	movs	r0, r3
 8001168:	f7fe ffce 	bl	8000108 <strlen>
 800116c:	0002      	movs	r2, r0
 800116e:	4b3b      	ldr	r3, [pc, #236]	; (800125c <GSM_Hardware_Layer_Run+0x32c>)
 8001170:	601a      	str	r2, [r3, #0]
			Current_Response_len_error_handle = strlen((char*)m_gsm_atc.atc.Recv_Buffer.u8Buffer);
 8001172:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <GSM_Hardware_Layer_Run+0x300>)
 8001174:	0018      	movs	r0, r3
 8001176:	f7fe ffc7 	bl	8000108 <strlen>
 800117a:	0002      	movs	r2, r0
 800117c:	4b38      	ldr	r3, [pc, #224]	; (8001260 <GSM_Hardware_Layer_Run+0x330>)
 800117e:	601a      	str	r2, [r3, #0]
			if(Expect_len_compare_error_handle < Current_Response_len_error_handle)
 8001180:	4b36      	ldr	r3, [pc, #216]	; (800125c <GSM_Hardware_Layer_Run+0x32c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b36      	ldr	r3, [pc, #216]	; (8001260 <GSM_Hardware_Layer_Run+0x330>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d21f      	bcs.n	80011cc <GSM_Hardware_Layer_Run+0x29c>
			{
				p_compare_end_str_error_handle = &m_gsm_atc.atc.Recv_Buffer.u8Buffer[Current_Response_len_error_handle - Expect_len_compare_error_handle];
 800118c:	4b34      	ldr	r3, [pc, #208]	; (8001260 <GSM_Hardware_Layer_Run+0x330>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b32      	ldr	r3, [pc, #200]	; (800125c <GSM_Hardware_Layer_Run+0x32c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	3318      	adds	r3, #24
 8001198:	001a      	movs	r2, r3
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 800119c:	18d3      	adds	r3, r2, r3
 800119e:	1d9a      	adds	r2, r3, #6
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <GSM_Hardware_Layer_Run+0x334>)
 80011a2:	601a      	str	r2, [r3, #0]
				if(memcmp(p_compare_end_str_error_handle,m_gsm_atc.atc.expect_error_at_the_end,Expect_len_compare_error_handle))
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <GSM_Hardware_Layer_Run+0x334>)
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 80011aa:	6919      	ldr	r1, [r3, #16]
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <GSM_Hardware_Layer_Run+0x32c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	001a      	movs	r2, r3
 80011b2:	f003 fda1 	bl	8004cf8 <memcmp>
 80011b6:	1e03      	subs	r3, r0, #0
 80011b8:	d003      	beq.n	80011c2 <GSM_Hardware_Layer_Run+0x292>
				{
					do_callback = true;
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	e008      	b.n	80011d4 <GSM_Hardware_Layer_Run+0x2a4>
				}
				else
				{
					do_callback = false;
 80011c2:	2312      	movs	r3, #18
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e003      	b.n	80011d4 <GSM_Hardware_Layer_Run+0x2a4>
				}
			}
			else
			{
				do_callback = false;
 80011cc:	2312      	movs	r3, #18
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
			}
		}
		if(do_callback == true)
 80011d4:	2312      	movs	r3, #18
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d019      	beq.n	8001212 <GSM_Hardware_Layer_Run+0x2e2>
		{
			m_gsm_atc.atc.Last_time_send_atc_ms = 0;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
			m_gsm_atc.atc.Timeout_atc_ms = 0;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
			m_gsm_atc.atc.Retry_Count_atc = 0;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	771a      	strb	r2, [r3, #28]
			m_gsm_atc.atc.Send_at_Callback(GSM_EVENT_ERROR,m_gsm_atc.atc.Recv_Buffer.u8Buffer);
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <GSM_Hardware_Layer_Run+0x2fc>)
 80011f2:	2390      	movs	r3, #144	; 0x90
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	58d3      	ldr	r3, [r2, r3]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <GSM_Hardware_Layer_Run+0x300>)
 80011fa:	0011      	movs	r1, r2
 80011fc:	2002      	movs	r0, #2
 80011fe:	4798      	blx	r3
			memset(&m_gsm_atc.atc.Recv_Buffer, 0, sizeof(m_gsm_atc.atc.Recv_Buffer));
 8001200:	2381      	movs	r3, #129	; 0x81
 8001202:	005a      	lsls	r2, r3, #1
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <GSM_Hardware_Layer_Run+0x300>)
 8001206:	2100      	movs	r1, #0
 8001208:	0018      	movs	r0, r3
 800120a:	f003 fd8c 	bl	8004d26 <memset>
 800120e:	e000      	b.n	8001212 <GSM_Hardware_Layer_Run+0x2e2>
	{
 8001210:	46c0      	nop			; (mov r8, r8)
		}
	}
	LastTick = sys_get_tick_ms();
 8001212:	f000 f923 	bl	800145c <sys_get_tick_ms>
 8001216:	0002      	movs	r2, r0
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <GSM_Hardware_Layer_Run+0x2f8>)
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	e000      	b.n	8001220 <GSM_Hardware_Layer_Run+0x2f0>
		return;
 800121e:	46c0      	nop			; (mov r8, r8)
}
 8001220:	46bd      	mov	sp, r7
 8001222:	b007      	add	sp, #28
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	200001bc 	.word	0x200001bc
 800122c:	20000098 	.word	0x20000098
 8001230:	200000b6 	.word	0x200000b6
 8001234:	08005038 	.word	0x08005038
 8001238:	2000030c 	.word	0x2000030c
 800123c:	200003a4 	.word	0x200003a4
 8001240:	08005050 	.word	0x08005050
 8001244:	08005058 	.word	0x08005058
 8001248:	0800505c 	.word	0x0800505c
 800124c:	08005060 	.word	0x08005060
 8001250:	20000398 	.word	0x20000398
 8001254:	2000039c 	.word	0x2000039c
 8001258:	200003b8 	.word	0x200003b8
 800125c:	20000394 	.word	0x20000394
 8001260:	200003b4 	.word	0x200003b4
 8001264:	200003a0 	.word	0x200003a0

08001268 <GSM_Turn_on_Power>:
void GSM_Turn_on_Power(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	static uint8_t step;
	SEGGER_RTT_printf(0,"GSM Hard reset step %d.\r\n", step);
 800126c:	4b4b      	ldr	r3, [pc, #300]	; (800139c <GSM_Turn_on_Power+0x134>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	001a      	movs	r2, r3
 8001272:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <GSM_Turn_on_Power+0x138>)
 8001274:	0019      	movs	r1, r3
 8001276:	2000      	movs	r0, #0
 8001278:	f000 fe1a 	bl	8001eb0 <SEGGER_RTT_printf>
	switch (step)
 800127c:	4b47      	ldr	r3, [pc, #284]	; (800139c <GSM_Turn_on_Power+0x134>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b07      	cmp	r3, #7
 8001282:	d900      	bls.n	8001286 <GSM_Turn_on_Power+0x1e>
 8001284:	e085      	b.n	8001392 <GSM_Turn_on_Power+0x12a>
 8001286:	009a      	lsls	r2, r3, #2
 8001288:	4b46      	ldr	r3, [pc, #280]	; (80013a4 <GSM_Turn_on_Power+0x13c>)
 800128a:	18d3      	adds	r3, r2, r3
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	469f      	mov	pc, r3
	{
		case 0:
			HAL_GPIO_WritePin(EN_GSM_GPIO_Port,EN_GSM_Pin,0);
 8001290:	4b45      	ldr	r3, [pc, #276]	; (80013a8 <GSM_Turn_on_Power+0x140>)
 8001292:	2200      	movs	r2, #0
 8001294:	2140      	movs	r1, #64	; 0x40
 8001296:	0018      	movs	r0, r3
 8001298:	f001 fa5a 	bl	8002750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GSM_RESET_GPIO_Port,GSM_RESET_Pin,1);
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4842      	ldr	r0, [pc, #264]	; (80013ac <GSM_Turn_on_Power+0x144>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	0019      	movs	r1, r3
 80012a6:	f001 fa53 	bl	8002750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GSM_PWKEY_GPIO_Port,GSM_PWKEY_Pin,0);
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	0059      	lsls	r1, r3, #1
 80012ae:	23a0      	movs	r3, #160	; 0xa0
 80012b0:	05db      	lsls	r3, r3, #23
 80012b2:	2200      	movs	r2, #0
 80012b4:	0018      	movs	r0, r3
 80012b6:	f001 fa4b 	bl	8002750 <HAL_GPIO_WritePin>
			step++;
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <GSM_Turn_on_Power+0x134>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <GSM_Turn_on_Power+0x134>)
 80012c4:	701a      	strb	r2, [r3, #0]
			break;
 80012c6:	e065      	b.n	8001394 <GSM_Turn_on_Power+0x12c>
		case 1:
			HAL_GPIO_WritePin(GSM_RESET_GPIO_Port,GSM_RESET_Pin,0);
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4837      	ldr	r0, [pc, #220]	; (80013ac <GSM_Turn_on_Power+0x144>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	0019      	movs	r1, r3
 80012d2:	f001 fa3d 	bl	8002750 <HAL_GPIO_WritePin>
			SEGGER_RTT_printf(0,"GSM turn on Power!\r\n");
 80012d6:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <GSM_Turn_on_Power+0x148>)
 80012d8:	0019      	movs	r1, r3
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 fde8 	bl	8001eb0 <SEGGER_RTT_printf>
			HAL_GPIO_WritePin(EN_GSM_GPIO_Port,EN_GSM_Pin,1);
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <GSM_Turn_on_Power+0x140>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	2140      	movs	r1, #64	; 0x40
 80012e6:	0018      	movs	r0, r3
 80012e8:	f001 fa32 	bl	8002750 <HAL_GPIO_WritePin>
			// Enable nguon 4.2V
			HAL_GPIO_WritePin(GSM_EN_GPIO_Port,GSM_EN_Pin,1);
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	0219      	lsls	r1, r3, #8
 80012f0:	23a0      	movs	r3, #160	; 0xa0
 80012f2:	05db      	lsls	r3, r3, #23
 80012f4:	2201      	movs	r2, #1
 80012f6:	0018      	movs	r0, r3
 80012f8:	f001 fa2a 	bl	8002750 <HAL_GPIO_WritePin>
			step++;
 80012fc:	4b27      	ldr	r3, [pc, #156]	; (800139c <GSM_Turn_on_Power+0x134>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b25      	ldr	r3, [pc, #148]	; (800139c <GSM_Turn_on_Power+0x134>)
 8001306:	701a      	strb	r2, [r3, #0]
			break;
 8001308:	e044      	b.n	8001394 <GSM_Turn_on_Power+0x12c>
		case 2:
			step++;
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <GSM_Turn_on_Power+0x134>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <GSM_Turn_on_Power+0x134>)
 8001314:	701a      	strb	r2, [r3, #0]
			break;
 8001316:	e03d      	b.n	8001394 <GSM_Turn_on_Power+0x12c>
		case 3: 
			/* Generate pulse from (1-0-1) |_| to Power On module */
			SEGGER_RTT_printf(0,"Pulse power key.\r\n");
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <GSM_Turn_on_Power+0x14c>)
 800131a:	0019      	movs	r1, r3
 800131c:	2000      	movs	r0, #0
 800131e:	f000 fdc7 	bl	8001eb0 <SEGGER_RTT_printf>
			HAL_GPIO_WritePin(GSM_PWKEY_GPIO_Port,GSM_PWKEY_Pin,1);
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	0059      	lsls	r1, r3, #1
 8001326:	23a0      	movs	r3, #160	; 0xa0
 8001328:	05db      	lsls	r3, r3, #23
 800132a:	2201      	movs	r2, #1
 800132c:	0018      	movs	r0, r3
 800132e:	f001 fa0f 	bl	8002750 <HAL_GPIO_WritePin>
			step++;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <GSM_Turn_on_Power+0x134>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <GSM_Turn_on_Power+0x134>)
 800133c:	701a      	strb	r2, [r3, #0]
			break;
 800133e:	e029      	b.n	8001394 <GSM_Turn_on_Power+0x12c>
		case 4:
			HAL_GPIO_WritePin(GSM_PWKEY_GPIO_Port,GSM_PWKEY_Pin,0);
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	0059      	lsls	r1, r3, #1
 8001344:	23a0      	movs	r3, #160	; 0xa0
 8001346:	05db      	lsls	r3, r3, #23
 8001348:	2200      	movs	r2, #0
 800134a:	0018      	movs	r0, r3
 800134c:	f001 fa00 	bl	8002750 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GSM_RESET_GPIO_Port,GSM_RESET_Pin,0);
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4815      	ldr	r0, [pc, #84]	; (80013ac <GSM_Turn_on_Power+0x144>)
 8001356:	2200      	movs	r2, #0
 8001358:	0019      	movs	r1, r3
 800135a:	f001 f9f9 	bl	8002750 <HAL_GPIO_WritePin>
			step++;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <GSM_Turn_on_Power+0x134>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <GSM_Turn_on_Power+0x134>)
 8001368:	701a      	strb	r2, [r3, #0]
			break;
 800136a:	e013      	b.n	8001394 <GSM_Turn_on_Power+0x12c>
		case 5:
		case 6:
			step++;
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <GSM_Turn_on_Power+0x134>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <GSM_Turn_on_Power+0x134>)
 8001376:	701a      	strb	r2, [r3, #0]
			break;
 8001378:	e00c      	b.n	8001394 <GSM_Turn_on_Power+0x12c>
		case 7:
			step = 0;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <GSM_Turn_on_Power+0x134>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
			SEGGER_RTT_printf(0,"GSM Hard reset DONE.\r\n");
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <GSM_Turn_on_Power+0x150>)
 8001382:	0019      	movs	r1, r3
 8001384:	2000      	movs	r0, #0
 8001386:	f000 fd93 	bl	8001eb0 <SEGGER_RTT_printf>
			GSM_Manager_ChangeState(GSM_STATE_POWER_ON); // GSM turn on Power Finish-> active GSM by AT Cmd
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff fdaa 	bl	8000ee4 <GSM_Manager_ChangeState>
			break;
 8001390:	e000      	b.n	8001394 <GSM_Turn_on_Power+0x12c>
		default:
		break;
 8001392:	46c0      	nop			; (mov r8, r8)
	}
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	200001c0 	.word	0x200001c0
 80013a0:	08005070 	.word	0x08005070
 80013a4:	0800513c 	.word	0x0800513c
 80013a8:	50000800 	.word	0x50000800
 80013ac:	50000400 	.word	0x50000400
 80013b0:	0800508c 	.word	0x0800508c
 80013b4:	080050a4 	.word	0x080050a4
 80013b8:	080050b8 	.word	0x080050b8

080013bc <GSM_SendCommand_AT>:
						 char* expect_resp_at_the_end,
						 char* expect_error,
						 char* expect_error_at_the_end,
						 uint32_t Timeout, uint8_t RetryCount,
						 GSM_Send_at_CallBack_TypDef Callback)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	603b      	str	r3, [r7, #0]
	if(Timeout == 0 || Callback == NULL)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <GSM_SendCommand_AT+0x1a>
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10b      	bne.n	80013ee <GSM_SendCommand_AT+0x32>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 200);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	0018      	movs	r0, r3
 80013da:	f7fe fe95 	bl	8000108 <strlen>
 80013de:	0003      	movs	r3, r0
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	68f9      	ldr	r1, [r7, #12]
 80013e4:	481b      	ldr	r0, [pc, #108]	; (8001454 <GSM_SendCommand_AT+0x98>)
 80013e6:	23c8      	movs	r3, #200	; 0xc8
 80013e8:	f002 f90a 	bl	8003600 <HAL_UART_Transmit>
		return;
 80013ec:	e02f      	b.n	800144e <GSM_SendCommand_AT+0x92>
	}
	if(strlen(cmd) < 64)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7fe fe89 	bl	8000108 <strlen>
	{

	}
	m_gsm_atc.atc.cmd = cmd;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <GSM_SendCommand_AT+0x9c>)
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	601a      	str	r2, [r3, #0]
	m_gsm_atc.atc.expect_resp = expect_resp;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <GSM_SendCommand_AT+0x9c>)
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	605a      	str	r2, [r3, #4]
	m_gsm_atc.atc.expected_response_at_the_end = expect_resp_at_the_end;
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <GSM_SendCommand_AT+0x9c>)
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]
	m_gsm_atc.atc.expect_error = expect_error;
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <GSM_SendCommand_AT+0x9c>)
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	60da      	str	r2, [r3, #12]
	m_gsm_atc.atc.expect_error_at_the_end = expect_error_at_the_end;
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <GSM_SendCommand_AT+0x9c>)
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	611a      	str	r2, [r3, #16]
	m_gsm_atc.atc.Timeout_atc_ms = Timeout;
 8001414:	4b10      	ldr	r3, [pc, #64]	; (8001458 <GSM_SendCommand_AT+0x9c>)
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	615a      	str	r2, [r3, #20]
	m_gsm_atc.atc.Last_time_send_atc_ms = sys_get_tick_ms();
 800141a:	f000 f81f 	bl	800145c <sys_get_tick_ms>
 800141e:	0002      	movs	r2, r0
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <GSM_SendCommand_AT+0x9c>)
 8001422:	619a      	str	r2, [r3, #24]
	m_gsm_atc.atc.Retry_Count_atc = RetryCount;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <GSM_SendCommand_AT+0x9c>)
 8001426:	2220      	movs	r2, #32
 8001428:	18ba      	adds	r2, r7, r2
 800142a:	7812      	ldrb	r2, [r2, #0]
 800142c:	771a      	strb	r2, [r3, #28]
	m_gsm_atc.atc.Send_at_Callback = Callback;
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <GSM_SendCommand_AT+0x9c>)
 8001430:	2390      	movs	r3, #144	; 0x90
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001436:	50d1      	str	r1, [r2, r3]

	HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 200);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	0018      	movs	r0, r3
 800143c:	f7fe fe64 	bl	8000108 <strlen>
 8001440:	0003      	movs	r3, r0
 8001442:	b29a      	uxth	r2, r3
 8001444:	68f9      	ldr	r1, [r7, #12]
 8001446:	4803      	ldr	r0, [pc, #12]	; (8001454 <GSM_SendCommand_AT+0x98>)
 8001448:	23c8      	movs	r3, #200	; 0xc8
 800144a:	f002 f8d9 	bl	8003600 <HAL_UART_Transmit>

}
 800144e:	46bd      	mov	sp, r7
 8001450:	b004      	add	sp, #16
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000030c 	.word	0x2000030c
 8001458:	20000098 	.word	0x20000098

0800145c <sys_get_tick_ms>:
uint32_t sys_get_tick_ms(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8001460:	f000 fe88 	bl	8002174 <HAL_GetTick>
 8001464:	0003      	movs	r3, r0
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001472:	4b22      	ldr	r3, [pc, #136]	; (80014fc <_DoInit+0x90>)
 8001474:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <_DoInit+0x94>)
 8001486:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <_DoInit+0x98>)
 800148c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2280      	movs	r2, #128	; 0x80
 8001492:	0052      	lsls	r2, r2, #1
 8001494:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a15      	ldr	r2, [pc, #84]	; (8001500 <_DoInit+0x94>)
 80014ac:	631a      	str	r2, [r3, #48]	; 0x30
  p->aDown[0].pBuffer       = _acDownBuffer;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a15      	ldr	r2, [pc, #84]	; (8001508 <_DoInit+0x9c>)
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	639a      	str	r2, [r3, #56]	; 0x38
  p->aDown[0].RdOff         = 0u;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	641a      	str	r2, [r3, #64]	; 0x40
  p->aDown[0].WrOff         = 0u;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	63da      	str	r2, [r3, #60]	; 0x3c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	645a      	str	r2, [r3, #68]	; 0x44
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1dda      	adds	r2, r3, #7
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <_DoInit+0xa0>)
 80014d2:	0010      	movs	r0, r2
 80014d4:	0019      	movs	r1, r3
 80014d6:	2304      	movs	r3, #4
 80014d8:	001a      	movs	r2, r3
 80014da:	f003 fc1b 	bl	8004d14 <memcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <_DoInit+0xa4>)
 80014e2:	0010      	movs	r0, r2
 80014e4:	0019      	movs	r1, r3
 80014e6:	2307      	movs	r3, #7
 80014e8:	001a      	movs	r2, r3
 80014ea:	f003 fc13 	bl	8004d14 <memcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2220      	movs	r2, #32
 80014f2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200003bc 	.word	0x200003bc
 8001500:	080050d0 	.word	0x080050d0
 8001504:	200001c4 	.word	0x200001c4
 8001508:	200002c4 	.word	0x200002c4
 800150c:	080050dc 	.word	0x080050dc
 8001510:	080050e0 	.word	0x080050e0

08001514 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	429a      	cmp	r2, r3
 8001536:	d905      	bls.n	8001544 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	3b01      	subs	r3, #1
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
 8001542:	e007      	b.n	8001554 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	69b9      	ldr	r1, [r7, #24]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	1acb      	subs	r3, r1, r3
 800154e:	18d3      	adds	r3, r2, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	1ad2      	subs	r2, r2, r3
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	4293      	cmp	r3, r2
 8001560:	d900      	bls.n	8001564 <_WriteBlocking+0x50>
 8001562:	0013      	movs	r3, r2
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4293      	cmp	r3, r2
 800156c:	d900      	bls.n	8001570 <_WriteBlocking+0x5c>
 800156e:	0013      	movs	r3, r2
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	18d3      	adds	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800157c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	0018      	movs	r0, r3
 8001584:	f003 fbc6 	bl	8004d14 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001588:	6a3a      	ldr	r2, [r7, #32]
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	18d3      	adds	r3, r2, r3
 800158e:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	18d3      	adds	r3, r2, r3
 8001596:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80015a0:	69fa      	ldr	r2, [r7, #28]
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	18d3      	adds	r3, r2, r3
 80015a6:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d101      	bne.n	80015b6 <_WriteBlocking+0xa2>
      WrOff = 0u;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1b3      	bne.n	800152a <_WriteBlocking+0x16>
  return NumBytesWritten;
 80015c2:	6a3b      	ldr	r3, [r7, #32]
}
 80015c4:	0018      	movs	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b00a      	add	sp, #40	; 0x28
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d910      	bls.n	8001612 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	18d3      	adds	r3, r2, r3
 80015f8:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	0018      	movs	r0, r3
 8001602:	f003 fb87 	bl	8004d14 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	18d2      	adds	r2, r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001610:	e01e      	b.n	8001650 <_WriteNoCheck+0x84>
    NumBytesAtOnce = Rem;
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	18d3      	adds	r3, r2, r3
 800161e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	68b9      	ldr	r1, [r7, #8]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	0018      	movs	r0, r3
 8001628:	f003 fb74 	bl	8004d14 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	18d1      	adds	r1, r2, r3
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	0018      	movs	r0, r3
 8001646:	f003 fb65 	bl	8004d14 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	60da      	str	r2, [r3, #12]
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b008      	add	sp, #32
 8001656:	bd80      	pop	{r7, pc}

08001658 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d808      	bhi.n	8001686 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1ad2      	subs	r2, r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	18d3      	adds	r3, r2, r3
 8001680:	3b01      	subs	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e004      	b.n	8001690 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	3b01      	subs	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001690:	697b      	ldr	r3, [r7, #20]
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b006      	add	sp, #24
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	0013      	movs	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	189b      	adds	r3, r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4a23      	ldr	r2, [pc, #140]	; (8001748 <SEGGER_RTT_WriteNoLock+0xac>)
 80016ba:	189b      	adds	r3, r3, r2
 80016bc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d02e      	beq.n	8001724 <SEGGER_RTT_WriteNoLock+0x88>
 80016c6:	d836      	bhi.n	8001736 <SEGGER_RTT_WriteNoLock+0x9a>
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <SEGGER_RTT_WriteNoLock+0x36>
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d016      	beq.n	80016fe <SEGGER_RTT_WriteNoLock+0x62>
 80016d0:	e031      	b.n	8001736 <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff ffbf 	bl	8001658 <_GetAvailWriteSpace>
 80016da:	0003      	movs	r3, r0
 80016dc:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d202      	bcs.n	80016ec <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80016ea:	e027      	b.n	800173c <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	69b9      	ldr	r1, [r7, #24]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7ff ff68 	bl	80015cc <_WriteNoCheck>
    break;
 80016fc:	e01e      	b.n	800173c <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff ffa9 	bl	8001658 <_GetAvailWriteSpace>
 8001706:	0003      	movs	r3, r0
 8001708:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4293      	cmp	r3, r2
 8001710:	d900      	bls.n	8001714 <SEGGER_RTT_WriteNoLock+0x78>
 8001712:	0013      	movs	r3, r2
 8001714:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	69b9      	ldr	r1, [r7, #24]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff ff55 	bl	80015cc <_WriteNoCheck>
    break;
 8001722:	e00b      	b.n	800173c <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	69b9      	ldr	r1, [r7, #24]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff fef2 	bl	8001514 <_WriteBlocking>
 8001730:	0003      	movs	r3, r0
 8001732:	61fb      	str	r3, [r7, #28]
    break;
 8001734:	e002      	b.n	800173c <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    break;
 800173a:	46c0      	nop			; (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 800173c:	69fb      	ldr	r3, [r7, #28]
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b008      	add	sp, #32
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	200003bc 	.word	0x200003bc

0800174c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <SEGGER_RTT_Write+0x4c>)
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <SEGGER_RTT_Write+0x1e>
 8001766:	f7ff fe81 	bl	800146c <_DoInit>
  SEGGER_RTT_LOCK();
 800176a:	f3ef 8310 	mrs	r3, PRIMASK
 800176e:	2101      	movs	r1, #1
 8001770:	f381 8810 	msr	PRIMASK, r1
 8001774:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff ff8d 	bl	800169c <SEGGER_RTT_WriteNoLock>
 8001782:	0003      	movs	r3, r0
 8001784:	617b      	str	r3, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	f383 8810 	msr	PRIMASK, r3
  return Status;
 800178c:	697b      	ldr	r3, [r7, #20]
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b008      	add	sp, #32
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	200003bc 	.word	0x200003bc

0800179c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  _DoInit();
 80017a0:	f7ff fe64 	bl	800146c <_DoInit>
}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	000a      	movs	r2, r1
 80017b4:	1cfb      	adds	r3, r7, #3
 80017b6:	701a      	strb	r2, [r3, #0]
  unsigned Cnt;

  Cnt = p->Cnt;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d80f      	bhi.n	80017ea <_StoreChar+0x40>
    *(p->pBuffer + Cnt) = c;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	18d3      	adds	r3, r2, r3
 80017d2:	1cfa      	adds	r2, r7, #3
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d115      	bne.n	8001822 <_StoreChar+0x78>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6918      	ldr	r0, [r3, #16]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	001a      	movs	r2, r3
 8001804:	f7ff ffa2 	bl	800174c <SEGGER_RTT_Write>
 8001808:	0002      	movs	r2, r0
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	429a      	cmp	r2, r3
 8001810:	d004      	beq.n	800181c <_StoreChar+0x72>
      p->ReturnValue = -1;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	4252      	negs	r2, r2
 8001818:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 800181a:	e002      	b.n	8001822 <_StoreChar+0x78>
      p->Cnt = 0u;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	46bd      	mov	sp, r7
 8001826:	b004      	add	sp, #16
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
 8001838:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800183e:	2301      	movs	r3, #1
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8001842:	2301      	movs	r3, #1
 8001844:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8001846:	e008      	b.n	800185a <_PrintUnsigned+0x2e>
    Number = (Number / Base);
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	6a38      	ldr	r0, [r7, #32]
 800184c:	f7fe fc64 	bl	8000118 <__udivsi3>
 8001850:	0003      	movs	r3, r0
 8001852:	623b      	str	r3, [r7, #32]
    Width++;
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	3301      	adds	r3, #1
 8001858:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800185a:	6a3a      	ldr	r2, [r7, #32]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	429a      	cmp	r2, r3
 8001860:	d2f2      	bcs.n	8001848 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	429a      	cmp	r2, r3
 8001868:	d901      	bls.n	800186e <_PrintUnsigned+0x42>
    Width = NumDigits;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800186e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	d12b      	bne.n	80018ce <_PrintUnsigned+0xa2>
    if (FieldWidth != 0u) {
 8001876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001878:	2b00      	cmp	r3, #0
 800187a:	d028      	beq.n	80018ce <_PrintUnsigned+0xa2>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800187c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187e:	2202      	movs	r2, #2
 8001880:	4013      	ands	r3, r2
 8001882:	d007      	beq.n	8001894 <_PrintUnsigned+0x68>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d104      	bne.n	8001894 <_PrintUnsigned+0x68>
        c = '0';
 800188a:	231b      	movs	r3, #27
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	2230      	movs	r2, #48	; 0x30
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e003      	b.n	800189c <_PrintUnsigned+0x70>
      } else {
        c = ' ';
 8001894:	231b      	movs	r3, #27
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	2220      	movs	r2, #32
 800189a:	701a      	strb	r2, [r3, #0]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800189c:	e00e      	b.n	80018bc <_PrintUnsigned+0x90>
        FieldWidth--;
 800189e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a0:	3b01      	subs	r3, #1
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80018a4:	231b      	movs	r3, #27
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	781a      	ldrb	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	0011      	movs	r1, r2
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7ff ff7b 	bl	80017aa <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db07      	blt.n	80018cc <_PrintUnsigned+0xa0>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80018bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <_PrintUnsigned+0xa2>
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d3e9      	bcc.n	800189e <_PrintUnsigned+0x72>
 80018ca:	e000      	b.n	80018ce <_PrintUnsigned+0xa2>
          break;
 80018cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db57      	blt.n	8001986 <_PrintUnsigned+0x15a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d903      	bls.n	80018e4 <_PrintUnsigned+0xb8>
        NumDigits--;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	3b01      	subs	r3, #1
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	e00a      	b.n	80018fa <_PrintUnsigned+0xce>
      } else {
        Div = v / Digit;
 80018e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018e6:	68b8      	ldr	r0, [r7, #8]
 80018e8:	f7fe fc16 	bl	8000118 <__udivsi3>
 80018ec:	0003      	movs	r3, r0
 80018ee:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d200      	bcs.n	80018fa <_PrintUnsigned+0xce>
          break;
 80018f8:	e004      	b.n	8001904 <_PrintUnsigned+0xd8>
        }
      }
      Digit *= Base;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4353      	muls	r3, r2
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8001902:	e7e8      	b.n	80018d6 <_PrintUnsigned+0xaa>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8001904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001906:	68b8      	ldr	r0, [r7, #8]
 8001908:	f7fe fc06 	bl	8000118 <__udivsi3>
 800190c:	0003      	movs	r3, r0
 800190e:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001914:	4353      	muls	r3, r2
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 800191c:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <_PrintUnsigned+0x164>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	18d3      	adds	r3, r2, r3
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	0011      	movs	r1, r2
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff ff3e 	bl	80017aa <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db09      	blt.n	800194a <_PrintUnsigned+0x11e>
        break;
      }
      Digit /= Base;
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800193a:	f7fe fbed 	bl	8000118 <__udivsi3>
 800193e:	0003      	movs	r3, r0
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1dd      	bne.n	8001904 <_PrintUnsigned+0xd8>
 8001948:	e000      	b.n	800194c <_PrintUnsigned+0x120>
        break;
 800194a:	46c0      	nop			; (mov r8, r8)
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800194c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194e:	2201      	movs	r2, #1
 8001950:	4013      	ands	r3, r2
 8001952:	d018      	beq.n	8001986 <_PrintUnsigned+0x15a>
      if (FieldWidth != 0u) {
 8001954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001956:	2b00      	cmp	r3, #0
 8001958:	d015      	beq.n	8001986 <_PrintUnsigned+0x15a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800195a:	e00b      	b.n	8001974 <_PrintUnsigned+0x148>
          FieldWidth--;
 800195c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195e:	3b01      	subs	r3, #1
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2120      	movs	r1, #32
 8001966:	0018      	movs	r0, r3
 8001968:	f7ff ff1f 	bl	80017aa <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db07      	blt.n	8001984 <_PrintUnsigned+0x158>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <_PrintUnsigned+0x15a>
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197e:	429a      	cmp	r2, r3
 8001980:	d3ec      	bcc.n	800195c <_PrintUnsigned+0x130>
          }
        }
      }
    }
  }
}
 8001982:	e000      	b.n	8001986 <_PrintUnsigned+0x15a>
            break;
 8001984:	46c0      	nop			; (mov r8, r8)
}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b00a      	add	sp, #40	; 0x28
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	080051e0 	.word	0x080051e0

08001994 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	17da      	asrs	r2, r3, #31
 80019a6:	189b      	adds	r3, r3, r2
 80019a8:	4053      	eors	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80019ac:	2301      	movs	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80019b0:	e009      	b.n	80019c6 <_PrintInt+0x32>
    Number = (Number / (int)Base);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	0019      	movs	r1, r3
 80019b6:	6938      	ldr	r0, [r7, #16]
 80019b8:	f7fe fc38 	bl	800022c <__divsi3>
 80019bc:	0003      	movs	r3, r0
 80019be:	613b      	str	r3, [r7, #16]
    Width++;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	daf1      	bge.n	80019b2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d901      	bls.n	80019da <_PrintInt+0x46>
    Width = NumDigits;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d009      	beq.n	80019f4 <_PrintInt+0x60>
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db03      	blt.n	80019ee <_PrintInt+0x5a>
 80019e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e8:	2204      	movs	r2, #4
 80019ea:	4013      	ands	r3, r2
 80019ec:	d002      	beq.n	80019f4 <_PrintInt+0x60>
    FieldWidth--;
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	3b01      	subs	r3, #1
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80019f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d002      	beq.n	8001a02 <_PrintInt+0x6e>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d01c      	beq.n	8001a3c <_PrintInt+0xa8>
 8001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a04:	2201      	movs	r2, #1
 8001a06:	4013      	ands	r3, r2
 8001a08:	d118      	bne.n	8001a3c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d015      	beq.n	8001a3c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001a10:	e00b      	b.n	8001a2a <_PrintInt+0x96>
        FieldWidth--;
 8001a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a14:	3b01      	subs	r3, #1
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff fec4 	bl	80017aa <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db07      	blt.n	8001a3a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <_PrintInt+0xa8>
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3ec      	bcc.n	8001a12 <_PrintInt+0x7e>
 8001a38:	e000      	b.n	8001a3c <_PrintInt+0xa8>
          break;
 8001a3a:	46c0      	nop			; (mov r8, r8)
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db4b      	blt.n	8001adc <_PrintInt+0x148>
    if (v < 0) {
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da08      	bge.n	8001a5c <_PrintInt+0xc8>
      v = -v;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	425b      	negs	r3, r3
 8001a4e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	212d      	movs	r1, #45	; 0x2d
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7ff fea8 	bl	80017aa <_StoreChar>
 8001a5a:	e008      	b.n	8001a6e <_PrintInt+0xda>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8001a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5e:	2204      	movs	r2, #4
 8001a60:	4013      	ands	r3, r2
 8001a62:	d004      	beq.n	8001a6e <_PrintInt+0xda>
      _StoreChar(pBufferDesc, '+');
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	212b      	movs	r1, #43	; 0x2b
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff fe9e 	bl	80017aa <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db32      	blt.n	8001adc <_PrintInt+0x148>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d01f      	beq.n	8001abe <_PrintInt+0x12a>
 8001a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a80:	2201      	movs	r2, #1
 8001a82:	4013      	ands	r3, r2
 8001a84:	d11b      	bne.n	8001abe <_PrintInt+0x12a>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d118      	bne.n	8001abe <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8001a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d015      	beq.n	8001abe <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001a92:	e00b      	b.n	8001aac <_PrintInt+0x118>
            FieldWidth--;
 8001a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a96:	3b01      	subs	r3, #1
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2130      	movs	r1, #48	; 0x30
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f7ff fe83 	bl	80017aa <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db07      	blt.n	8001abc <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <_PrintInt+0x12a>
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d3ec      	bcc.n	8001a94 <_PrintInt+0x100>
 8001aba:	e000      	b.n	8001abe <_PrintInt+0x12a>
              break;
 8001abc:	46c0      	nop			; (mov r8, r8)
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0a      	blt.n	8001adc <_PrintInt+0x148>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8001ac6:	68b9      	ldr	r1, [r7, #8]
 8001ac8:	683c      	ldr	r4, [r7, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	0023      	movs	r3, r4
 8001ad8:	f7ff fea8 	bl	800182c <_PrintUnsigned>
      }
    }
  }
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b007      	add	sp, #28
 8001ae2:	bd90      	pop	{r4, r7, pc}

08001ae4 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b0b3      	sub	sp, #204	; 0xcc
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8001af0:	2190      	movs	r1, #144	; 0x90
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	2210      	movs	r2, #16
 8001af6:	18ba      	adds	r2, r7, r2
 8001af8:	601a      	str	r2, [r3, #0]
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8001afa:	187b      	adds	r3, r7, r1
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	605a      	str	r2, [r3, #4]
  BufferDesc.Cnt            = 0u;
 8001b00:	187b      	adds	r3, r7, r1
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  BufferDesc.RTTBufferIndex = BufferIndex;
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  BufferDesc.ReturnValue    = 0;
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]

  do {
    c = *sFormat;
 8001b12:	21bf      	movs	r1, #191	; 0xbf
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	7812      	ldrb	r2, [r2, #0]
 8001b1a:	701a      	strb	r2, [r3, #0]
    sFormat++;
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d100      	bne.n	8001b2c <SEGGER_RTT_vprintf+0x48>
 8001b2a:	e19d      	b.n	8001e68 <SEGGER_RTT_vprintf+0x384>
      break;
    }
    if (c == '%') {
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b25      	cmp	r3, #37	; 0x25
 8001b32:	d000      	beq.n	8001b36 <SEGGER_RTT_vprintf+0x52>
 8001b34:	e188      	b.n	8001e48 <SEGGER_RTT_vprintf+0x364>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8001b36:	2300      	movs	r3, #0
 8001b38:	22b0      	movs	r2, #176	; 0xb0
 8001b3a:	18ba      	adds	r2, r7, r2
 8001b3c:	6013      	str	r3, [r2, #0]
      v = 1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	22b8      	movs	r2, #184	; 0xb8
 8001b42:	18ba      	adds	r2, r7, r2
 8001b44:	6013      	str	r3, [r2, #0]
      do {
        c = *sFormat;
 8001b46:	21bf      	movs	r1, #191	; 0xbf
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	701a      	strb	r2, [r3, #0]
        switch (c) {
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b30      	cmp	r3, #48	; 0x30
 8001b56:	d013      	beq.n	8001b80 <SEGGER_RTT_vprintf+0x9c>
 8001b58:	dc33      	bgt.n	8001bc2 <SEGGER_RTT_vprintf+0xde>
 8001b5a:	2b2d      	cmp	r3, #45	; 0x2d
 8001b5c:	d005      	beq.n	8001b6a <SEGGER_RTT_vprintf+0x86>
 8001b5e:	dc30      	bgt.n	8001bc2 <SEGGER_RTT_vprintf+0xde>
 8001b60:	2b23      	cmp	r3, #35	; 0x23
 8001b62:	d023      	beq.n	8001bac <SEGGER_RTT_vprintf+0xc8>
 8001b64:	2b2b      	cmp	r3, #43	; 0x2b
 8001b66:	d016      	beq.n	8001b96 <SEGGER_RTT_vprintf+0xb2>
 8001b68:	e02b      	b.n	8001bc2 <SEGGER_RTT_vprintf+0xde>
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8001b6a:	21b0      	movs	r1, #176	; 0xb0
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2201      	movs	r2, #1
 8001b72:	4313      	orrs	r3, r2
 8001b74:	187a      	adds	r2, r7, r1
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	e025      	b.n	8001bcc <SEGGER_RTT_vprintf+0xe8>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8001b80:	21b0      	movs	r1, #176	; 0xb0
 8001b82:	187b      	adds	r3, r7, r1
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2202      	movs	r2, #2
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	187a      	adds	r2, r7, r1
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3301      	adds	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	e01a      	b.n	8001bcc <SEGGER_RTT_vprintf+0xe8>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8001b96:	21b0      	movs	r1, #176	; 0xb0
 8001b98:	187b      	adds	r3, r7, r1
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	187a      	adds	r2, r7, r1
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	e00f      	b.n	8001bcc <SEGGER_RTT_vprintf+0xe8>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8001bac:	21b0      	movs	r1, #176	; 0xb0
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2208      	movs	r2, #8
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	187a      	adds	r2, r7, r1
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	e004      	b.n	8001bcc <SEGGER_RTT_vprintf+0xe8>
        default:  v = 0; break;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	22b8      	movs	r2, #184	; 0xb8
 8001bc6:	18ba      	adds	r2, r7, r2
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	46c0      	nop			; (mov r8, r8)
        }
      } while (v);
 8001bcc:	23b8      	movs	r3, #184	; 0xb8
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1b7      	bne.n	8001b46 <SEGGER_RTT_vprintf+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	22ac      	movs	r2, #172	; 0xac
 8001bda:	18ba      	adds	r2, r7, r2
 8001bdc:	6013      	str	r3, [r2, #0]
      do {
        c = *sFormat;
 8001bde:	21bf      	movs	r1, #191	; 0xbf
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	7812      	ldrb	r2, [r2, #0]
 8001be6:	701a      	strb	r2, [r3, #0]
        if ((c < '0') || (c > '9')) {
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b2f      	cmp	r3, #47	; 0x2f
 8001bee:	d915      	bls.n	8001c1c <SEGGER_RTT_vprintf+0x138>
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b39      	cmp	r3, #57	; 0x39
 8001bf6:	d811      	bhi.n	8001c1c <SEGGER_RTT_vprintf+0x138>
          break;
        }
        sFormat++;
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8001bfe:	20ac      	movs	r0, #172	; 0xac
 8001c00:	183b      	adds	r3, r7, r0
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	0013      	movs	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	189b      	adds	r3, r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	18d3      	adds	r3, r2, r3
 8001c14:	3b30      	subs	r3, #48	; 0x30
 8001c16:	183a      	adds	r2, r7, r0
 8001c18:	6013      	str	r3, [r2, #0]
        c = *sFormat;
 8001c1a:	e7e0      	b.n	8001bde <SEGGER_RTT_vprintf+0xfa>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	22b4      	movs	r2, #180	; 0xb4
 8001c20:	18ba      	adds	r2, r7, r2
 8001c22:	6013      	str	r3, [r2, #0]
      c = *sFormat;
 8001c24:	21bf      	movs	r1, #191	; 0xbf
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	7812      	ldrb	r2, [r2, #0]
 8001c2c:	701a      	strb	r2, [r3, #0]
      if (c == '.') {
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b2e      	cmp	r3, #46	; 0x2e
 8001c34:	d121      	bne.n	8001c7a <SEGGER_RTT_vprintf+0x196>
        sFormat++;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8001c3c:	21bf      	movs	r1, #191	; 0xbf
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	7812      	ldrb	r2, [r2, #0]
 8001c44:	701a      	strb	r2, [r3, #0]
          if ((c < '0') || (c > '9')) {
 8001c46:	187b      	adds	r3, r7, r1
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b2f      	cmp	r3, #47	; 0x2f
 8001c4c:	d915      	bls.n	8001c7a <SEGGER_RTT_vprintf+0x196>
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b39      	cmp	r3, #57	; 0x39
 8001c54:	d811      	bhi.n	8001c7a <SEGGER_RTT_vprintf+0x196>
            break;
          }
          sFormat++;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8001c5c:	20b4      	movs	r0, #180	; 0xb4
 8001c5e:	183b      	adds	r3, r7, r0
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	0013      	movs	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	189b      	adds	r3, r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	001a      	movs	r2, r3
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	18d3      	adds	r3, r2, r3
 8001c72:	3b30      	subs	r3, #48	; 0x30
 8001c74:	183a      	adds	r2, r7, r0
 8001c76:	6013      	str	r3, [r2, #0]
          c = *sFormat;
 8001c78:	e7e0      	b.n	8001c3c <SEGGER_RTT_vprintf+0x158>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8001c7a:	23bf      	movs	r3, #191	; 0xbf
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	7812      	ldrb	r2, [r2, #0]
 8001c82:	701a      	strb	r2, [r3, #0]
      do {
        if ((c == 'l') || (c == 'h')) {
 8001c84:	22bf      	movs	r2, #191	; 0xbf
 8001c86:	18bb      	adds	r3, r7, r2
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b6c      	cmp	r3, #108	; 0x6c
 8001c8c:	d003      	beq.n	8001c96 <SEGGER_RTT_vprintf+0x1b2>
 8001c8e:	18bb      	adds	r3, r7, r2
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b68      	cmp	r3, #104	; 0x68
 8001c94:	d108      	bne.n	8001ca8 <SEGGER_RTT_vprintf+0x1c4>
          sFormat++;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8001c9c:	23bf      	movs	r3, #191	; 0xbf
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	701a      	strb	r2, [r3, #0]
        if ((c == 'l') || (c == 'h')) {
 8001ca6:	e7ed      	b.n	8001c84 <SEGGER_RTT_vprintf+0x1a0>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8001ca8:	23bf      	movs	r3, #191	; 0xbf
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b25      	cmp	r3, #37	; 0x25
 8001cb0:	d100      	bne.n	8001cb4 <SEGGER_RTT_vprintf+0x1d0>
 8001cb2:	e0bd      	b.n	8001e30 <SEGGER_RTT_vprintf+0x34c>
 8001cb4:	da00      	bge.n	8001cb8 <SEGGER_RTT_vprintf+0x1d4>
 8001cb6:	e0c2      	b.n	8001e3e <SEGGER_RTT_vprintf+0x35a>
 8001cb8:	2b78      	cmp	r3, #120	; 0x78
 8001cba:	dd00      	ble.n	8001cbe <SEGGER_RTT_vprintf+0x1da>
 8001cbc:	e0bf      	b.n	8001e3e <SEGGER_RTT_vprintf+0x35a>
 8001cbe:	2b58      	cmp	r3, #88	; 0x58
 8001cc0:	da00      	bge.n	8001cc4 <SEGGER_RTT_vprintf+0x1e0>
 8001cc2:	e0bc      	b.n	8001e3e <SEGGER_RTT_vprintf+0x35a>
 8001cc4:	3b58      	subs	r3, #88	; 0x58
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d900      	bls.n	8001ccc <SEGGER_RTT_vprintf+0x1e8>
 8001cca:	e0b8      	b.n	8001e3e <SEGGER_RTT_vprintf+0x35a>
 8001ccc:	009a      	lsls	r2, r3, #2
 8001cce:	4b77      	ldr	r3, [pc, #476]	; (8001eac <SEGGER_RTT_vprintf+0x3c8>)
 8001cd0:	18d3      	adds	r3, r2, r3
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	469f      	mov	pc, r3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1d19      	adds	r1, r3, #4
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6011      	str	r1, [r2, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	22b8      	movs	r2, #184	; 0xb8
 8001ce4:	18b9      	adds	r1, r7, r2
 8001ce6:	600b      	str	r3, [r1, #0]
        c0 = (char)v;
 8001ce8:	21a7      	movs	r1, #167	; 0xa7
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	18ba      	adds	r2, r7, r2
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	701a      	strb	r2, [r3, #0]
        _StoreChar(&BufferDesc, c0);
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	781a      	ldrb	r2, [r3, #0]
 8001cf6:	2390      	movs	r3, #144	; 0x90
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff fd54 	bl	80017aa <_StoreChar>
        break;
 8001d02:	e09d      	b.n	8001e40 <SEGGER_RTT_vprintf+0x35c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	1d19      	adds	r1, r3, #4
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6011      	str	r1, [r2, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	21b8      	movs	r1, #184	; 0xb8
 8001d12:	187a      	adds	r2, r7, r1
 8001d14:	6013      	str	r3, [r2, #0]
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8001d16:	23b4      	movs	r3, #180	; 0xb4
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	6819      	ldr	r1, [r3, #0]
 8001d20:	2390      	movs	r3, #144	; 0x90
 8001d22:	18f8      	adds	r0, r7, r3
 8001d24:	23b0      	movs	r3, #176	; 0xb0
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	23ac      	movs	r3, #172	; 0xac
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	0013      	movs	r3, r2
 8001d36:	220a      	movs	r2, #10
 8001d38:	f7ff fe2c 	bl	8001994 <_PrintInt>
        break;
 8001d3c:	e080      	b.n	8001e40 <SEGGER_RTT_vprintf+0x35c>
      case 'u':
        v = va_arg(*pParamList, int);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	1d19      	adds	r1, r3, #4
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6011      	str	r1, [r2, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	22b8      	movs	r2, #184	; 0xb8
 8001d4c:	18b9      	adds	r1, r7, r2
 8001d4e:	600b      	str	r3, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8001d50:	18bb      	adds	r3, r7, r2
 8001d52:	6819      	ldr	r1, [r3, #0]
 8001d54:	23b4      	movs	r3, #180	; 0xb4
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	2390      	movs	r3, #144	; 0x90
 8001d5c:	18f8      	adds	r0, r7, r3
 8001d5e:	23b0      	movs	r3, #176	; 0xb0
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	23ac      	movs	r3, #172	; 0xac
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	0013      	movs	r3, r2
 8001d70:	220a      	movs	r2, #10
 8001d72:	f7ff fd5b 	bl	800182c <_PrintUnsigned>
        break;
 8001d76:	e063      	b.n	8001e40 <SEGGER_RTT_vprintf+0x35c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	1d19      	adds	r1, r3, #4
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6011      	str	r1, [r2, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	22b8      	movs	r2, #184	; 0xb8
 8001d86:	18b9      	adds	r1, r7, r2
 8001d88:	600b      	str	r3, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8001d8a:	18bb      	adds	r3, r7, r2
 8001d8c:	6819      	ldr	r1, [r3, #0]
 8001d8e:	23b4      	movs	r3, #180	; 0xb4
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2390      	movs	r3, #144	; 0x90
 8001d96:	18f8      	adds	r0, r7, r3
 8001d98:	23b0      	movs	r3, #176	; 0xb0
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	23ac      	movs	r3, #172	; 0xac
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	0013      	movs	r3, r2
 8001daa:	2210      	movs	r2, #16
 8001dac:	f7ff fd3e 	bl	800182c <_PrintUnsigned>
        break;
 8001db0:	e046      	b.n	8001e40 <SEGGER_RTT_vprintf+0x35c>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	1d19      	adds	r1, r3, #4
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6011      	str	r1, [r2, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	22a8      	movs	r2, #168	; 0xa8
 8001dc0:	18ba      	adds	r2, r7, r2
 8001dc2:	6013      	str	r3, [r2, #0]
          do {
            c = *s;
 8001dc4:	21bf      	movs	r1, #191	; 0xbf
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	20a8      	movs	r0, #168	; 0xa8
 8001dca:	183a      	adds	r2, r7, r0
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	7812      	ldrb	r2, [r2, #0]
 8001dd0:	701a      	strb	r2, [r3, #0]
            s++;
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	18bb      	adds	r3, r7, r2
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	18ba      	adds	r2, r7, r2
 8001ddc:	6013      	str	r3, [r2, #0]
            if (c == '\0') {
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00c      	beq.n	8001e00 <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	2490      	movs	r4, #144	; 0x90
 8001dec:	193b      	adds	r3, r7, r4
 8001dee:	0011      	movs	r1, r2
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff fcda 	bl	80017aa <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8001df6:	193b      	adds	r3, r7, r4
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	dae2      	bge.n	8001dc4 <SEGGER_RTT_vprintf+0x2e0>
        }
        break;
 8001dfe:	e01f      	b.n	8001e40 <SEGGER_RTT_vprintf+0x35c>
              break;
 8001e00:	46c0      	nop			; (mov r8, r8)
        break;
 8001e02:	e01d      	b.n	8001e40 <SEGGER_RTT_vprintf+0x35c>
      case 'p':
        v = va_arg(*pParamList, int);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	1d19      	adds	r1, r3, #4
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6011      	str	r1, [r2, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	22b8      	movs	r2, #184	; 0xb8
 8001e12:	18b9      	adds	r1, r7, r2
 8001e14:	600b      	str	r3, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8001e16:	18bb      	adds	r3, r7, r2
 8001e18:	6819      	ldr	r1, [r3, #0]
 8001e1a:	2390      	movs	r3, #144	; 0x90
 8001e1c:	18f8      	adds	r0, r7, r3
 8001e1e:	2300      	movs	r3, #0
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	2308      	movs	r3, #8
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2308      	movs	r3, #8
 8001e28:	2210      	movs	r2, #16
 8001e2a:	f7ff fcff 	bl	800182c <_PrintUnsigned>
        break;
 8001e2e:	e007      	b.n	8001e40 <SEGGER_RTT_vprintf+0x35c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8001e30:	2390      	movs	r3, #144	; 0x90
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	2125      	movs	r1, #37	; 0x25
 8001e36:	0018      	movs	r0, r3
 8001e38:	f7ff fcb7 	bl	80017aa <_StoreChar>
        break;
 8001e3c:	e000      	b.n	8001e40 <SEGGER_RTT_vprintf+0x35c>
      default:
        break;
 8001e3e:	46c0      	nop			; (mov r8, r8)
      }
      sFormat++;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	3301      	adds	r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	e008      	b.n	8001e5a <SEGGER_RTT_vprintf+0x376>
    } else {
      _StoreChar(&BufferDesc, c);
 8001e48:	23bf      	movs	r3, #191	; 0xbf
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	2390      	movs	r3, #144	; 0x90
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	0011      	movs	r1, r2
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7ff fca8 	bl	80017aa <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8001e5a:	2390      	movs	r3, #144	; 0x90
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db00      	blt.n	8001e66 <SEGGER_RTT_vprintf+0x382>
 8001e64:	e655      	b.n	8001b12 <SEGGER_RTT_vprintf+0x2e>
 8001e66:	e000      	b.n	8001e6a <SEGGER_RTT_vprintf+0x386>
      break;
 8001e68:	46c0      	nop			; (mov r8, r8)

  if (BufferDesc.ReturnValue > 0) {
 8001e6a:	2290      	movs	r2, #144	; 0x90
 8001e6c:	18bb      	adds	r3, r7, r2
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	dd13      	ble.n	8001e9c <SEGGER_RTT_vprintf+0x3b8>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8001e74:	18bb      	adds	r3, r7, r2
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <SEGGER_RTT_vprintf+0x3a8>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8001e7c:	18bb      	adds	r3, r7, r2
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	2310      	movs	r3, #16
 8001e82:	18f9      	adds	r1, r7, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff fc60 	bl	800174c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8001e8c:	2190      	movs	r1, #144	; 0x90
 8001e8e:	187b      	adds	r3, r7, r1
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	18d2      	adds	r2, r2, r3
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	60da      	str	r2, [r3, #12]
  }
  return BufferDesc.ReturnValue;
 8001e9c:	2390      	movs	r3, #144	; 0x90
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	68db      	ldr	r3, [r3, #12]
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b031      	add	sp, #196	; 0xc4
 8001ea8:	bd90      	pop	{r4, r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	0800515c 	.word	0x0800515c

08001eb0 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8001eb0:	b40e      	push	{r1, r2, r3}
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b085      	sub	sp, #20
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8001eba:	2320      	movs	r3, #32
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	18fa      	adds	r2, r7, r3
 8001ec4:	69f9      	ldr	r1, [r7, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff fe0b 	bl	8001ae4 <SEGGER_RTT_vprintf>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	60fb      	str	r3, [r7, #12]
  va_end(ParamList);
  return r;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b005      	add	sp, #20
 8001eda:	bc80      	pop	{r7}
 8001edc:	bc08      	pop	{r3}
 8001ede:	b003      	add	sp, #12
 8001ee0:	4718      	bx	r3

08001ee2 <RingBuffer_Init>:
#include "ringbuffer.h"


void RingBuffer_Init(RingBuffer_Types* ringbuffer, int BufferSize)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
    ringbuffer->BufferSize = BufferSize;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	601a      	str	r2, [r3, #0]
    ringbuffer->Head = 0;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	605a      	str	r2, [r3, #4]
    ringbuffer->Tail = 0;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
    ringbuffer->u8Buffer = (uint8_t*)malloc(BufferSize*sizeof(uint8_t));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f002 feef 	bl	8004ce4 <malloc>
 8001f06:	0003      	movs	r3, r0
 8001f08:	001a      	movs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	60da      	str	r2, [r3, #12]
}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b002      	add	sp, #8
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <RingBuffer_Push>:

// Day 1 Byte vào RingBuffer
uint8_t RingBuffer_Push(RingBuffer_Types* ringbuffer, uint8_t BytePush)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	000a      	movs	r2, r1
 8001f20:	1cfb      	adds	r3, r7, #3
 8001f22:	701a      	strb	r2, [r3, #0]
    if((ringbuffer->Head - ringbuffer->Tail == (ringbuffer->BufferSize - 1))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	1ad2      	subs	r2, r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d009      	beq.n	8001f4c <RingBuffer_Push+0x36>
       || (ringbuffer->Tail - ringbuffer->Head == (ringbuffer->BufferSize - 1)))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	1ad2      	subs	r2, r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d101      	bne.n	8001f50 <RingBuffer_Push+0x3a>
       {
        return E_NOT_OK; // return E_NOT_OK khi bo nho Full
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e018      	b.n	8001f82 <RingBuffer_Push+0x6c>
       }
    ringbuffer->u8Buffer[ringbuffer->Head] = BytePush;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	18d3      	adds	r3, r2, r3
 8001f5a:	1cfa      	adds	r2, r7, #3
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	701a      	strb	r2, [r3, #0]
    if(ringbuffer->Head == (ringbuffer->BufferSize - 1))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d103      	bne.n	8001f76 <RingBuffer_Push+0x60>
    {
        ringbuffer->Head = 0;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	e004      	b.n	8001f80 <RingBuffer_Push+0x6a>
    }
    else
    {
        ringbuffer->Head += 1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	605a      	str	r2, [r3, #4]
    }
    return E_OK;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	0018      	movs	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b002      	add	sp, #8
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <RingBuffer_Pop>:

// Doc 1 byte tư RingBuffer
uint8_t RingBuffer_Pop(RingBuffer_Types* ringbuffer)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
    uint8_t BytePush = 0;
 8001f92:	210f      	movs	r1, #15
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
    if(ringbuffer->Head == ringbuffer->Tail)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d102      	bne.n	8001fac <RingBuffer_Pop+0x22>
    {
        return BytePush; // Return Null khi bo nho Empty
 8001fa6:	187b      	adds	r3, r7, r1
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	e01b      	b.n	8001fe4 <RingBuffer_Pop+0x5a>
    }
    BytePush = ringbuffer->u8Buffer[ringbuffer->Tail];
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	18d2      	adds	r2, r2, r3
 8001fb6:	230f      	movs	r3, #15
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	7812      	ldrb	r2, [r2, #0]
 8001fbc:	701a      	strb	r2, [r3, #0]
    if(ringbuffer->Tail == (ringbuffer->BufferSize - 1))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d103      	bne.n	8001fd4 <RingBuffer_Pop+0x4a>
    {
        ringbuffer->Tail = 0;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	e004      	b.n	8001fde <RingBuffer_Pop+0x54>
    }
    else
    {
        ringbuffer->Tail += 1;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
    }
    return BytePush;
 8001fde:	230f      	movs	r3, #15
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	781b      	ldrb	r3, [r3, #0]
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b004      	add	sp, #16
 8001fea:	bd80      	pop	{r7, pc}

08001fec <RingBuffer_GetBuffer>:
// Doc toan bo du lieu trong RingBuffer gán vào return Buffer
void RingBuffer_GetBuffer(GSM_atc_Buffer_TypDef* retBuffer, RingBuffer_Types* ringbuffer)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
    int Num_Elements = RingBuffer_GetNumberElements(ringbuffer);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f000 f834 	bl	8002066 <RingBuffer_GetNumberElements>
 8001ffe:	0003      	movs	r3, r0
 8002000:	60bb      	str	r3, [r7, #8]
    if(Num_Elements == 0)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d02a      	beq.n	800205e <RingBuffer_GetBuffer+0x72>
    {
    	return;
    }
    for(int CountByte = retBuffer->index; CountByte < retBuffer->index + Num_Elements; CountByte ++)
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	5ad3      	ldrh	r3, [r2, r3]
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	e00d      	b.n	8002030 <RingBuffer_GetBuffer+0x44>
    {
        retBuffer->u8Buffer[CountByte] = RingBuffer_Pop(ringbuffer);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	0018      	movs	r0, r3
 8002018:	f7ff ffb7 	bl	8001f8a <RingBuffer_Pop>
 800201c:	0003      	movs	r3, r0
 800201e:	0019      	movs	r1, r3
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	18d3      	adds	r3, r2, r3
 8002026:	1c0a      	adds	r2, r1, #0
 8002028:	701a      	strb	r2, [r3, #0]
    for(int CountByte = retBuffer->index; CountByte < retBuffer->index + Num_Elements; CountByte ++)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3301      	adds	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	5ad3      	ldrh	r3, [r2, r3]
 8002038:	001a      	movs	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	18d3      	adds	r3, r2, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	429a      	cmp	r2, r3
 8002042:	dbe7      	blt.n	8002014 <RingBuffer_GetBuffer+0x28>
    }
    retBuffer->index += Num_Elements;
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	5ad2      	ldrh	r2, [r2, r3]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	b29b      	uxth	r3, r3
 8002050:	18d3      	adds	r3, r2, r3
 8002052:	b299      	uxth	r1, r3
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	52d1      	strh	r1, [r2, r3]
 800205c:	e000      	b.n	8002060 <RingBuffer_GetBuffer+0x74>
    	return;
 800205e:	46c0      	nop			; (mov r8, r8)
}
 8002060:	46bd      	mov	sp, r7
 8002062:	b004      	add	sp, #16
 8002064:	bd80      	pop	{r7, pc}

08002066 <RingBuffer_GetNumberElements>:

// Lay tong so byte du lieu trong RingBuffer
int RingBuffer_GetNumberElements(RingBuffer_Types* ringbuffer)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
    int Num_Element = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
    if (ringbuffer->Head >= ringbuffer->Tail)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	429a      	cmp	r2, r3
 800207c:	db06      	blt.n	800208c <RingBuffer_GetNumberElements+0x26>
    {
        Num_Element = ringbuffer->Head - ringbuffer->Tail;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	e008      	b.n	800209e <RingBuffer_GetNumberElements+0x38>
    }
    else
    {
        Num_Element = ringbuffer->BufferSize - ringbuffer->Tail + ringbuffer->Head;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	1ad2      	subs	r2, r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	18d3      	adds	r3, r2, r3
 800209c:	60fb      	str	r3, [r7, #12]
    }
    return Num_Element;
 800209e:	68fb      	ldr	r3, [r7, #12]
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b004      	add	sp, #16
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020ae:	1dfb      	adds	r3, r7, #7
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_Init+0x3c>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_Init+0x3c>)
 80020ba:	2140      	movs	r1, #64	; 0x40
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020c0:	2003      	movs	r0, #3
 80020c2:	f000 f811 	bl	80020e8 <HAL_InitTick>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80020ca:	1dfb      	adds	r3, r7, #7
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	e001      	b.n	80020d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020d2:	f7fe fc1f 	bl	8000914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	781b      	ldrb	r3, [r3, #0]
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b002      	add	sp, #8
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	40022000 	.word	0x40022000

080020e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_InitTick+0x5c>)
 80020f2:	681c      	ldr	r4, [r3, #0]
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_InitTick+0x60>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	0019      	movs	r1, r3
 80020fa:	23fa      	movs	r3, #250	; 0xfa
 80020fc:	0098      	lsls	r0, r3, #2
 80020fe:	f7fe f80b 	bl	8000118 <__udivsi3>
 8002102:	0003      	movs	r3, r0
 8002104:	0019      	movs	r1, r3
 8002106:	0020      	movs	r0, r4
 8002108:	f7fe f806 	bl	8000118 <__udivsi3>
 800210c:	0003      	movs	r3, r0
 800210e:	0018      	movs	r0, r3
 8002110:	f000 f90b 	bl	800232a <HAL_SYSTICK_Config>
 8002114:	1e03      	subs	r3, r0, #0
 8002116:	d001      	beq.n	800211c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e00f      	b.n	800213c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d80b      	bhi.n	800213a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	2301      	movs	r3, #1
 8002126:	425b      	negs	r3, r3
 8002128:	2200      	movs	r2, #0
 800212a:	0018      	movs	r0, r3
 800212c:	f000 f8d8 	bl	80022e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_InitTick+0x64>)
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e000      	b.n	800213c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b003      	add	sp, #12
 8002142:	bd90      	pop	{r4, r7, pc}
 8002144:	20000000 	.word	0x20000000
 8002148:	20000008 	.word	0x20000008
 800214c:	20000004 	.word	0x20000004

08002150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_IncTick+0x1c>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	001a      	movs	r2, r3
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_IncTick+0x20>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	18d2      	adds	r2, r2, r3
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_IncTick+0x20>)
 8002162:	601a      	str	r2, [r3, #0]
}
 8002164:	46c0      	nop			; (mov r8, r8)
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	20000008 	.word	0x20000008
 8002170:	20000404 	.word	0x20000404

08002174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  return uwTick;
 8002178:	4b02      	ldr	r3, [pc, #8]	; (8002184 <HAL_GetTick+0x10>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	20000404 	.word	0x20000404

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	0002      	movs	r2, r0
 8002190:	1dfb      	adds	r3, r7, #7
 8002192:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002194:	1dfb      	adds	r3, r7, #7
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b7f      	cmp	r3, #127	; 0x7f
 800219a:	d809      	bhi.n	80021b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219c:	1dfb      	adds	r3, r7, #7
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	001a      	movs	r2, r3
 80021a2:	231f      	movs	r3, #31
 80021a4:	401a      	ands	r2, r3
 80021a6:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <__NVIC_EnableIRQ+0x30>)
 80021a8:	2101      	movs	r1, #1
 80021aa:	4091      	lsls	r1, r2
 80021ac:	000a      	movs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
  }
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b002      	add	sp, #8
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	0002      	movs	r2, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	1dfb      	adds	r3, r7, #7
 80021c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	1dfb      	adds	r3, r7, #7
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b7f      	cmp	r3, #127	; 0x7f
 80021d0:	d828      	bhi.n	8002224 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021d2:	4a2f      	ldr	r2, [pc, #188]	; (8002290 <__NVIC_SetPriority+0xd4>)
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	33c0      	adds	r3, #192	; 0xc0
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	589b      	ldr	r3, [r3, r2]
 80021e2:	1dfa      	adds	r2, r7, #7
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	0011      	movs	r1, r2
 80021e8:	2203      	movs	r2, #3
 80021ea:	400a      	ands	r2, r1
 80021ec:	00d2      	lsls	r2, r2, #3
 80021ee:	21ff      	movs	r1, #255	; 0xff
 80021f0:	4091      	lsls	r1, r2
 80021f2:	000a      	movs	r2, r1
 80021f4:	43d2      	mvns	r2, r2
 80021f6:	401a      	ands	r2, r3
 80021f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	019b      	lsls	r3, r3, #6
 80021fe:	22ff      	movs	r2, #255	; 0xff
 8002200:	401a      	ands	r2, r3
 8002202:	1dfb      	adds	r3, r7, #7
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	0018      	movs	r0, r3
 8002208:	2303      	movs	r3, #3
 800220a:	4003      	ands	r3, r0
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002210:	481f      	ldr	r0, [pc, #124]	; (8002290 <__NVIC_SetPriority+0xd4>)
 8002212:	1dfb      	adds	r3, r7, #7
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b25b      	sxtb	r3, r3
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	430a      	orrs	r2, r1
 800221c:	33c0      	adds	r3, #192	; 0xc0
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002222:	e031      	b.n	8002288 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002224:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <__NVIC_SetPriority+0xd8>)
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	0019      	movs	r1, r3
 800222c:	230f      	movs	r3, #15
 800222e:	400b      	ands	r3, r1
 8002230:	3b08      	subs	r3, #8
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3306      	adds	r3, #6
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	18d3      	adds	r3, r2, r3
 800223a:	3304      	adds	r3, #4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	1dfa      	adds	r2, r7, #7
 8002240:	7812      	ldrb	r2, [r2, #0]
 8002242:	0011      	movs	r1, r2
 8002244:	2203      	movs	r2, #3
 8002246:	400a      	ands	r2, r1
 8002248:	00d2      	lsls	r2, r2, #3
 800224a:	21ff      	movs	r1, #255	; 0xff
 800224c:	4091      	lsls	r1, r2
 800224e:	000a      	movs	r2, r1
 8002250:	43d2      	mvns	r2, r2
 8002252:	401a      	ands	r2, r3
 8002254:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	019b      	lsls	r3, r3, #6
 800225a:	22ff      	movs	r2, #255	; 0xff
 800225c:	401a      	ands	r2, r3
 800225e:	1dfb      	adds	r3, r7, #7
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	0018      	movs	r0, r3
 8002264:	2303      	movs	r3, #3
 8002266:	4003      	ands	r3, r0
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800226c:	4809      	ldr	r0, [pc, #36]	; (8002294 <__NVIC_SetPriority+0xd8>)
 800226e:	1dfb      	adds	r3, r7, #7
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	001c      	movs	r4, r3
 8002274:	230f      	movs	r3, #15
 8002276:	4023      	ands	r3, r4
 8002278:	3b08      	subs	r3, #8
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	430a      	orrs	r2, r1
 800227e:	3306      	adds	r3, #6
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	18c3      	adds	r3, r0, r3
 8002284:	3304      	adds	r3, #4
 8002286:	601a      	str	r2, [r3, #0]
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b003      	add	sp, #12
 800228e:	bd90      	pop	{r4, r7, pc}
 8002290:	e000e100 	.word	0xe000e100
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1e5a      	subs	r2, r3, #1
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	045b      	lsls	r3, r3, #17
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d301      	bcc.n	80022b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ac:	2301      	movs	r3, #1
 80022ae:	e010      	b.n	80022d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <SysTick_Config+0x44>)
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	3a01      	subs	r2, #1
 80022b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b8:	2301      	movs	r3, #1
 80022ba:	425b      	negs	r3, r3
 80022bc:	2103      	movs	r1, #3
 80022be:	0018      	movs	r0, r3
 80022c0:	f7ff ff7c 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <SysTick_Config+0x44>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <SysTick_Config+0x44>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b002      	add	sp, #8
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	210f      	movs	r1, #15
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	1c02      	adds	r2, r0, #0
 80022f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	0011      	movs	r1, r2
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff ff5d 	bl	80021bc <__NVIC_SetPriority>
}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	b004      	add	sp, #16
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	0002      	movs	r2, r0
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002316:	1dfb      	adds	r3, r7, #7
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b25b      	sxtb	r3, r3
 800231c:	0018      	movs	r0, r3
 800231e:	f7ff ff33 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	46bd      	mov	sp, r7
 8002326:	b002      	add	sp, #8
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0018      	movs	r0, r3
 8002336:	f7ff ffaf 	bl	8002298 <SysTick_Config>
 800233a:	0003      	movs	r3, r0
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800234c:	230f      	movs	r3, #15
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2225      	movs	r2, #37	; 0x25
 8002358:	5c9b      	ldrb	r3, [r3, r2]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d008      	beq.n	8002372 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2204      	movs	r2, #4
 8002364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2224      	movs	r2, #36	; 0x24
 800236a:	2100      	movs	r1, #0
 800236c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e024      	b.n	80023bc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	210e      	movs	r1, #14
 800237e:	438a      	bics	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2101      	movs	r1, #1
 800238e:	438a      	bics	r2, r1
 8002390:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	221c      	movs	r2, #28
 8002398:	401a      	ands	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	2101      	movs	r1, #1
 80023a0:	4091      	lsls	r1, r2
 80023a2:	000a      	movs	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2225      	movs	r2, #37	; 0x25
 80023aa:	2101      	movs	r1, #1
 80023ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2224      	movs	r2, #36	; 0x24
 80023b2:	2100      	movs	r1, #0
 80023b4:	5499      	strb	r1, [r3, r2]

    return status;
 80023b6:	230f      	movs	r3, #15
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80023bc:	0018      	movs	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	b004      	add	sp, #16
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023cc:	210f      	movs	r1, #15
 80023ce:	187b      	adds	r3, r7, r1
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2225      	movs	r2, #37	; 0x25
 80023d8:	5c9b      	ldrb	r3, [r3, r2]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d006      	beq.n	80023ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2204      	movs	r2, #4
 80023e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023e6:	187b      	adds	r3, r7, r1
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	e02a      	b.n	8002444 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	210e      	movs	r1, #14
 80023fa:	438a      	bics	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2101      	movs	r1, #1
 800240a:	438a      	bics	r2, r1
 800240c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	221c      	movs	r2, #28
 8002414:	401a      	ands	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	2101      	movs	r1, #1
 800241c:	4091      	lsls	r1, r2
 800241e:	000a      	movs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2225      	movs	r2, #37	; 0x25
 8002426:	2101      	movs	r1, #1
 8002428:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2224      	movs	r2, #36	; 0x24
 800242e:	2100      	movs	r1, #0
 8002430:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	0010      	movs	r0, r2
 8002442:	4798      	blx	r3
    }
  }
  return status;
 8002444:	230f      	movs	r3, #15
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	781b      	ldrb	r3, [r3, #0]
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b004      	add	sp, #16
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800246a:	e155      	b.n	8002718 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4091      	lsls	r1, r2
 8002476:	000a      	movs	r2, r1
 8002478:	4013      	ands	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d100      	bne.n	8002484 <HAL_GPIO_Init+0x30>
 8002482:	e146      	b.n	8002712 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2203      	movs	r2, #3
 800248a:	4013      	ands	r3, r2
 800248c:	2b01      	cmp	r3, #1
 800248e:	d005      	beq.n	800249c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002498:	2b02      	cmp	r3, #2
 800249a:	d130      	bne.n	80024fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	409a      	lsls	r2, r3
 80024aa:	0013      	movs	r3, r2
 80024ac:	43da      	mvns	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	409a      	lsls	r2, r3
 80024be:	0013      	movs	r3, r2
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d2:	2201      	movs	r2, #1
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	409a      	lsls	r2, r3
 80024d8:	0013      	movs	r3, r2
 80024da:	43da      	mvns	r2, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	2201      	movs	r2, #1
 80024ea:	401a      	ands	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
 80024f0:	0013      	movs	r3, r2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2203      	movs	r2, #3
 8002504:	4013      	ands	r3, r2
 8002506:	2b03      	cmp	r3, #3
 8002508:	d017      	beq.n	800253a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	409a      	lsls	r2, r3
 8002518:	0013      	movs	r3, r2
 800251a:	43da      	mvns	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	409a      	lsls	r2, r3
 800252c:	0013      	movs	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2203      	movs	r2, #3
 8002540:	4013      	ands	r3, r2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d123      	bne.n	800258e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	08da      	lsrs	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3208      	adds	r2, #8
 800254e:	0092      	lsls	r2, r2, #2
 8002550:	58d3      	ldr	r3, [r2, r3]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2207      	movs	r2, #7
 8002558:	4013      	ands	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	409a      	lsls	r2, r3
 8002560:	0013      	movs	r3, r2
 8002562:	43da      	mvns	r2, r3
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2107      	movs	r1, #7
 8002572:	400b      	ands	r3, r1
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	08da      	lsrs	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3208      	adds	r2, #8
 8002588:	0092      	lsls	r2, r2, #2
 800258a:	6939      	ldr	r1, [r7, #16]
 800258c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	2203      	movs	r2, #3
 800259a:	409a      	lsls	r2, r3
 800259c:	0013      	movs	r3, r2
 800259e:	43da      	mvns	r2, r3
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2203      	movs	r2, #3
 80025ac:	401a      	ands	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	409a      	lsls	r2, r3
 80025b4:	0013      	movs	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	23c0      	movs	r3, #192	; 0xc0
 80025c8:	029b      	lsls	r3, r3, #10
 80025ca:	4013      	ands	r3, r2
 80025cc:	d100      	bne.n	80025d0 <HAL_GPIO_Init+0x17c>
 80025ce:	e0a0      	b.n	8002712 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d0:	4b57      	ldr	r3, [pc, #348]	; (8002730 <HAL_GPIO_Init+0x2dc>)
 80025d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d4:	4b56      	ldr	r3, [pc, #344]	; (8002730 <HAL_GPIO_Init+0x2dc>)
 80025d6:	2101      	movs	r1, #1
 80025d8:	430a      	orrs	r2, r1
 80025da:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80025dc:	4a55      	ldr	r2, [pc, #340]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3302      	adds	r3, #2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	589b      	ldr	r3, [r3, r2]
 80025e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2203      	movs	r2, #3
 80025ee:	4013      	ands	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	220f      	movs	r2, #15
 80025f4:	409a      	lsls	r2, r3
 80025f6:	0013      	movs	r3, r2
 80025f8:	43da      	mvns	r2, r3
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	23a0      	movs	r3, #160	; 0xa0
 8002604:	05db      	lsls	r3, r3, #23
 8002606:	429a      	cmp	r2, r3
 8002608:	d01f      	beq.n	800264a <HAL_GPIO_Init+0x1f6>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4a      	ldr	r2, [pc, #296]	; (8002738 <HAL_GPIO_Init+0x2e4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d019      	beq.n	8002646 <HAL_GPIO_Init+0x1f2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a49      	ldr	r2, [pc, #292]	; (800273c <HAL_GPIO_Init+0x2e8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_GPIO_Init+0x1ee>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a48      	ldr	r2, [pc, #288]	; (8002740 <HAL_GPIO_Init+0x2ec>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00d      	beq.n	800263e <HAL_GPIO_Init+0x1ea>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a47      	ldr	r2, [pc, #284]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <HAL_GPIO_Init+0x1e6>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a46      	ldr	r2, [pc, #280]	; (8002748 <HAL_GPIO_Init+0x2f4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_GPIO_Init+0x1e2>
 8002632:	2305      	movs	r3, #5
 8002634:	e00a      	b.n	800264c <HAL_GPIO_Init+0x1f8>
 8002636:	2306      	movs	r3, #6
 8002638:	e008      	b.n	800264c <HAL_GPIO_Init+0x1f8>
 800263a:	2304      	movs	r3, #4
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x1f8>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <HAL_GPIO_Init+0x1f8>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x1f8>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_GPIO_Init+0x1f8>
 800264a:	2300      	movs	r3, #0
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	2103      	movs	r1, #3
 8002650:	400a      	ands	r2, r1
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4093      	lsls	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265c:	4935      	ldr	r1, [pc, #212]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800266a:	4b38      	ldr	r3, [pc, #224]	; (800274c <HAL_GPIO_Init+0x2f8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43da      	mvns	r2, r3
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	025b      	lsls	r3, r3, #9
 8002682:	4013      	ands	r3, r2
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800268e:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_GPIO_Init+0x2f8>)
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002694:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_GPIO_Init+0x2f8>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	43da      	mvns	r2, r3
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	029b      	lsls	r3, r3, #10
 80026ac:	4013      	ands	r3, r2
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_GPIO_Init+0x2f8>)
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_GPIO_Init+0x2f8>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43da      	mvns	r2, r3
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	035b      	lsls	r3, r3, #13
 80026d6:	4013      	ands	r3, r2
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_GPIO_Init+0x2f8>)
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_GPIO_Init+0x2f8>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43da      	mvns	r2, r3
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	039b      	lsls	r3, r3, #14
 8002700:	4013      	ands	r3, r2
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_GPIO_Init+0x2f8>)
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	40da      	lsrs	r2, r3
 8002720:	1e13      	subs	r3, r2, #0
 8002722:	d000      	beq.n	8002726 <HAL_GPIO_Init+0x2d2>
 8002724:	e6a2      	b.n	800246c <HAL_GPIO_Init+0x18>
  }
}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b006      	add	sp, #24
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000
 8002734:	40010000 	.word	0x40010000
 8002738:	50000400 	.word	0x50000400
 800273c:	50000800 	.word	0x50000800
 8002740:	50000c00 	.word	0x50000c00
 8002744:	50001000 	.word	0x50001000
 8002748:	50001c00 	.word	0x50001c00
 800274c:	40010400 	.word	0x40010400

08002750 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	0008      	movs	r0, r1
 800275a:	0011      	movs	r1, r2
 800275c:	1cbb      	adds	r3, r7, #2
 800275e:	1c02      	adds	r2, r0, #0
 8002760:	801a      	strh	r2, [r3, #0]
 8002762:	1c7b      	adds	r3, r7, #1
 8002764:	1c0a      	adds	r2, r1, #0
 8002766:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002768:	1c7b      	adds	r3, r7, #1
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002770:	1cbb      	adds	r3, r7, #2
 8002772:	881a      	ldrh	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002778:	e003      	b.n	8002782 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800277a:	1cbb      	adds	r3, r7, #2
 800277c:	881a      	ldrh	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	46bd      	mov	sp, r7
 8002786:	b002      	add	sp, #8
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b5b0      	push	{r4, r5, r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d102      	bne.n	80027a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	f000 fb6c 	bl	8002e78 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a0:	4bc8      	ldr	r3, [pc, #800]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	220c      	movs	r2, #12
 80027a6:	4013      	ands	r3, r2
 80027a8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027aa:	4bc6      	ldr	r3, [pc, #792]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	025b      	lsls	r3, r3, #9
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2201      	movs	r2, #1
 80027bc:	4013      	ands	r3, r2
 80027be:	d100      	bne.n	80027c2 <HAL_RCC_OscConfig+0x36>
 80027c0:	e07d      	b.n	80028be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d007      	beq.n	80027d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d112      	bne.n	80027f4 <HAL_RCC_OscConfig+0x68>
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	025b      	lsls	r3, r3, #9
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d10d      	bne.n	80027f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	4bba      	ldr	r3, [pc, #744]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	029b      	lsls	r3, r3, #10
 80027e0:	4013      	ands	r3, r2
 80027e2:	d100      	bne.n	80027e6 <HAL_RCC_OscConfig+0x5a>
 80027e4:	e06a      	b.n	80028bc <HAL_RCC_OscConfig+0x130>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d166      	bne.n	80028bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f000 fb42 	bl	8002e78 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	025b      	lsls	r3, r3, #9
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_OscConfig+0x84>
 8002800:	4bb0      	ldr	r3, [pc, #704]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4baf      	ldr	r3, [pc, #700]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002806:	2180      	movs	r1, #128	; 0x80
 8002808:	0249      	lsls	r1, r1, #9
 800280a:	430a      	orrs	r2, r1
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e027      	b.n	8002860 <HAL_RCC_OscConfig+0xd4>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	23a0      	movs	r3, #160	; 0xa0
 8002816:	02db      	lsls	r3, r3, #11
 8002818:	429a      	cmp	r2, r3
 800281a:	d10e      	bne.n	800283a <HAL_RCC_OscConfig+0xae>
 800281c:	4ba9      	ldr	r3, [pc, #676]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4ba8      	ldr	r3, [pc, #672]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	02c9      	lsls	r1, r1, #11
 8002826:	430a      	orrs	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	4ba6      	ldr	r3, [pc, #664]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4ba5      	ldr	r3, [pc, #660]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	0249      	lsls	r1, r1, #9
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e012      	b.n	8002860 <HAL_RCC_OscConfig+0xd4>
 800283a:	4ba2      	ldr	r3, [pc, #648]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4ba1      	ldr	r3, [pc, #644]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002840:	49a1      	ldr	r1, [pc, #644]	; (8002ac8 <HAL_RCC_OscConfig+0x33c>)
 8002842:	400a      	ands	r2, r1
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	4b9f      	ldr	r3, [pc, #636]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	025b      	lsls	r3, r3, #9
 800284e:	4013      	ands	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4b9b      	ldr	r3, [pc, #620]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b9a      	ldr	r3, [pc, #616]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 800285a:	499c      	ldr	r1, [pc, #624]	; (8002acc <HAL_RCC_OscConfig+0x340>)
 800285c:	400a      	ands	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d014      	beq.n	8002892 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7ff fc84 	bl	8002174 <HAL_GetTick>
 800286c:	0003      	movs	r3, r0
 800286e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002872:	f7ff fc7f 	bl	8002174 <HAL_GetTick>
 8002876:	0002      	movs	r2, r0
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b64      	cmp	r3, #100	; 0x64
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e2f9      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002884:	4b8f      	ldr	r3, [pc, #572]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	029b      	lsls	r3, r3, #10
 800288c:	4013      	ands	r3, r2
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0xe6>
 8002890:	e015      	b.n	80028be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7ff fc6f 	bl	8002174 <HAL_GetTick>
 8002896:	0003      	movs	r3, r0
 8002898:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289c:	f7ff fc6a 	bl	8002174 <HAL_GetTick>
 80028a0:	0002      	movs	r2, r0
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e2e4      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028ae:	4b85      	ldr	r3, [pc, #532]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	029b      	lsls	r3, r3, #10
 80028b6:	4013      	ands	r3, r2
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x110>
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2202      	movs	r2, #2
 80028c4:	4013      	ands	r3, r2
 80028c6:	d100      	bne.n	80028ca <HAL_RCC_OscConfig+0x13e>
 80028c8:	e099      	b.n	80029fe <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	2220      	movs	r2, #32
 80028d4:	4013      	ands	r3, r2
 80028d6:	d009      	beq.n	80028ec <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80028d8:	4b7a      	ldr	r3, [pc, #488]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b79      	ldr	r3, [pc, #484]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 80028de:	2120      	movs	r1, #32
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	2220      	movs	r2, #32
 80028e8:	4393      	bics	r3, r2
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d005      	beq.n	80028fe <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	2b0c      	cmp	r3, #12
 80028f6:	d13e      	bne.n	8002976 <HAL_RCC_OscConfig+0x1ea>
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d13b      	bne.n	8002976 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80028fe:	4b71      	ldr	r3, [pc, #452]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2204      	movs	r2, #4
 8002904:	4013      	ands	r3, r2
 8002906:	d004      	beq.n	8002912 <HAL_RCC_OscConfig+0x186>
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e2b2      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b6c      	ldr	r3, [pc, #432]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4a6e      	ldr	r2, [pc, #440]	; (8002ad0 <HAL_RCC_OscConfig+0x344>)
 8002918:	4013      	ands	r3, r2
 800291a:	0019      	movs	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	021a      	lsls	r2, r3, #8
 8002922:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002924:	430a      	orrs	r2, r1
 8002926:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002928:	4b66      	ldr	r3, [pc, #408]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2209      	movs	r2, #9
 800292e:	4393      	bics	r3, r2
 8002930:	0019      	movs	r1, r3
 8002932:	4b64      	ldr	r3, [pc, #400]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002936:	430a      	orrs	r2, r1
 8002938:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800293a:	f000 fbeb 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 800293e:	0001      	movs	r1, r0
 8002940:	4b60      	ldr	r3, [pc, #384]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	220f      	movs	r2, #15
 8002948:	4013      	ands	r3, r2
 800294a:	4a62      	ldr	r2, [pc, #392]	; (8002ad4 <HAL_RCC_OscConfig+0x348>)
 800294c:	5cd3      	ldrb	r3, [r2, r3]
 800294e:	000a      	movs	r2, r1
 8002950:	40da      	lsrs	r2, r3
 8002952:	4b61      	ldr	r3, [pc, #388]	; (8002ad8 <HAL_RCC_OscConfig+0x34c>)
 8002954:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002956:	4b61      	ldr	r3, [pc, #388]	; (8002adc <HAL_RCC_OscConfig+0x350>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2513      	movs	r5, #19
 800295c:	197c      	adds	r4, r7, r5
 800295e:	0018      	movs	r0, r3
 8002960:	f7ff fbc2 	bl	80020e8 <HAL_InitTick>
 8002964:	0003      	movs	r3, r0
 8002966:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002968:	197b      	adds	r3, r7, r5
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d046      	beq.n	80029fe <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002970:	197b      	adds	r3, r7, r5
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	e280      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	2b00      	cmp	r3, #0
 800297a:	d027      	beq.n	80029cc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800297c:	4b51      	ldr	r3, [pc, #324]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2209      	movs	r2, #9
 8002982:	4393      	bics	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	4b4f      	ldr	r3, [pc, #316]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	430a      	orrs	r2, r1
 800298c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7ff fbf1 	bl	8002174 <HAL_GetTick>
 8002992:	0003      	movs	r3, r0
 8002994:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002998:	f7ff fbec 	bl	8002174 <HAL_GetTick>
 800299c:	0002      	movs	r2, r0
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e266      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029aa:	4b46      	ldr	r3, [pc, #280]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2204      	movs	r2, #4
 80029b0:	4013      	ands	r3, r2
 80029b2:	d0f1      	beq.n	8002998 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a45      	ldr	r2, [pc, #276]	; (8002ad0 <HAL_RCC_OscConfig+0x344>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	0019      	movs	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	021a      	lsls	r2, r3, #8
 80029c4:	4b3f      	ldr	r3, [pc, #252]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	e018      	b.n	80029fe <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029cc:	4b3d      	ldr	r3, [pc, #244]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b3c      	ldr	r3, [pc, #240]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 80029d2:	2101      	movs	r1, #1
 80029d4:	438a      	bics	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7ff fbcc 	bl	8002174 <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e2:	f7ff fbc7 	bl	8002174 <HAL_GetTick>
 80029e6:	0002      	movs	r2, r0
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e241      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029f4:	4b33      	ldr	r3, [pc, #204]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2204      	movs	r2, #4
 80029fa:	4013      	ands	r3, r2
 80029fc:	d1f1      	bne.n	80029e2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2210      	movs	r2, #16
 8002a04:	4013      	ands	r3, r2
 8002a06:	d100      	bne.n	8002a0a <HAL_RCC_OscConfig+0x27e>
 8002a08:	e0a1      	b.n	8002b4e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d140      	bne.n	8002a92 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a10:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_OscConfig+0x29c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e227      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a28:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ae0 <HAL_RCC_OscConfig+0x354>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1a      	ldr	r2, [r3, #32]
 8002a36:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	0a19      	lsrs	r1, r3, #8
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	061a      	lsls	r2, r3, #24
 8002a4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	0b5b      	lsrs	r3, r3, #13
 8002a56:	3301      	adds	r3, #1
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	0212      	lsls	r2, r2, #8
 8002a5c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a5e:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	210f      	movs	r1, #15
 8002a66:	400b      	ands	r3, r1
 8002a68:	491a      	ldr	r1, [pc, #104]	; (8002ad4 <HAL_RCC_OscConfig+0x348>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <HAL_RCC_OscConfig+0x34c>)
 8002a70:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002a72:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <HAL_RCC_OscConfig+0x350>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2513      	movs	r5, #19
 8002a78:	197c      	adds	r4, r7, r5
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7ff fb34 	bl	80020e8 <HAL_InitTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002a84:	197b      	adds	r3, r7, r5
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d060      	beq.n	8002b4e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002a8c:	197b      	adds	r3, r7, r5
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	e1f2      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d03f      	beq.n	8002b1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_OscConfig+0x338>)
 8002aa0:	2180      	movs	r1, #128	; 0x80
 8002aa2:	0049      	lsls	r1, r1, #1
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff fb64 	bl	8002174 <HAL_GetTick>
 8002aac:	0003      	movs	r3, r0
 8002aae:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ab0:	e018      	b.n	8002ae4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ab2:	f7ff fb5f 	bl	8002174 <HAL_GetTick>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d911      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e1d9      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	fffeffff 	.word	0xfffeffff
 8002acc:	fffbffff 	.word	0xfffbffff
 8002ad0:	ffffe0ff 	.word	0xffffe0ff
 8002ad4:	080050e8 	.word	0x080050e8
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000004 	.word	0x20000004
 8002ae0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ae4:	4bc9      	ldr	r3, [pc, #804]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4013      	ands	r3, r2
 8002aee:	d0e0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af0:	4bc6      	ldr	r3, [pc, #792]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4ac6      	ldr	r2, [pc, #792]	; (8002e10 <HAL_RCC_OscConfig+0x684>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	0019      	movs	r1, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	4bc3      	ldr	r3, [pc, #780]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b04:	4bc1      	ldr	r3, [pc, #772]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	0a19      	lsrs	r1, r3, #8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	061a      	lsls	r2, r3, #24
 8002b12:	4bbe      	ldr	r3, [pc, #760]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	e019      	b.n	8002b4e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b1a:	4bbc      	ldr	r3, [pc, #752]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4bbb      	ldr	r3, [pc, #748]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002b20:	49bc      	ldr	r1, [pc, #752]	; (8002e14 <HAL_RCC_OscConfig+0x688>)
 8002b22:	400a      	ands	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7ff fb25 	bl	8002174 <HAL_GetTick>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b30:	f7ff fb20 	bl	8002174 <HAL_GetTick>
 8002b34:	0002      	movs	r2, r0
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e19a      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b42:	4bb2      	ldr	r3, [pc, #712]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2208      	movs	r2, #8
 8002b54:	4013      	ands	r3, r2
 8002b56:	d036      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d019      	beq.n	8002b94 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b60:	4baa      	ldr	r3, [pc, #680]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002b62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b64:	4ba9      	ldr	r3, [pc, #676]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002b66:	2101      	movs	r1, #1
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6c:	f7ff fb02 	bl	8002174 <HAL_GetTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b76:	f7ff fafd 	bl	8002174 <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e177      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b88:	4ba0      	ldr	r3, [pc, #640]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d0f1      	beq.n	8002b76 <HAL_RCC_OscConfig+0x3ea>
 8002b92:	e018      	b.n	8002bc6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b94:	4b9d      	ldr	r3, [pc, #628]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002b96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b98:	4b9c      	ldr	r3, [pc, #624]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	438a      	bics	r2, r1
 8002b9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba0:	f7ff fae8 	bl	8002174 <HAL_GetTick>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002baa:	f7ff fae3 	bl	8002174 <HAL_GetTick>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e15d      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bbc:	4b93      	ldr	r3, [pc, #588]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d1f1      	bne.n	8002baa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2204      	movs	r2, #4
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d100      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x446>
 8002bd0:	e0ae      	b.n	8002d30 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd2:	2023      	movs	r0, #35	; 0x23
 8002bd4:	183b      	adds	r3, r7, r0
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bda:	4b8c      	ldr	r3, [pc, #560]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	055b      	lsls	r3, r3, #21
 8002be2:	4013      	ands	r3, r2
 8002be4:	d109      	bne.n	8002bfa <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	4b89      	ldr	r3, [pc, #548]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bea:	4b88      	ldr	r3, [pc, #544]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002bec:	2180      	movs	r1, #128	; 0x80
 8002bee:	0549      	lsls	r1, r1, #21
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002bf4:	183b      	adds	r3, r7, r0
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfa:	4b87      	ldr	r3, [pc, #540]	; (8002e18 <HAL_RCC_OscConfig+0x68c>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	d11a      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c06:	4b84      	ldr	r3, [pc, #528]	; (8002e18 <HAL_RCC_OscConfig+0x68c>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b83      	ldr	r3, [pc, #524]	; (8002e18 <HAL_RCC_OscConfig+0x68c>)
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	0049      	lsls	r1, r1, #1
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c14:	f7ff faae 	bl	8002174 <HAL_GetTick>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1e:	f7ff faa9 	bl	8002174 <HAL_GetTick>
 8002c22:	0002      	movs	r2, r0
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b64      	cmp	r3, #100	; 0x64
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e123      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	4b79      	ldr	r3, [pc, #484]	; (8002e18 <HAL_RCC_OscConfig+0x68c>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4cc>
 8002c48:	4b70      	ldr	r3, [pc, #448]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c4c:	4b6f      	ldr	r3, [pc, #444]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	0049      	lsls	r1, r1, #1
 8002c52:	430a      	orrs	r2, r1
 8002c54:	651a      	str	r2, [r3, #80]	; 0x50
 8002c56:	e031      	b.n	8002cbc <HAL_RCC_OscConfig+0x530>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x4ee>
 8002c60:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002c62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c64:	4b69      	ldr	r3, [pc, #420]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002c66:	496b      	ldr	r1, [pc, #428]	; (8002e14 <HAL_RCC_OscConfig+0x688>)
 8002c68:	400a      	ands	r2, r1
 8002c6a:	651a      	str	r2, [r3, #80]	; 0x50
 8002c6c:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002c6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c70:	4b66      	ldr	r3, [pc, #408]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002c72:	496a      	ldr	r1, [pc, #424]	; (8002e1c <HAL_RCC_OscConfig+0x690>)
 8002c74:	400a      	ands	r2, r1
 8002c76:	651a      	str	r2, [r3, #80]	; 0x50
 8002c78:	e020      	b.n	8002cbc <HAL_RCC_OscConfig+0x530>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	23a0      	movs	r3, #160	; 0xa0
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d10e      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x518>
 8002c86:	4b61      	ldr	r3, [pc, #388]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002c88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c8a:	4b60      	ldr	r3, [pc, #384]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	00c9      	lsls	r1, r1, #3
 8002c90:	430a      	orrs	r2, r1
 8002c92:	651a      	str	r2, [r3, #80]	; 0x50
 8002c94:	4b5d      	ldr	r3, [pc, #372]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002c96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c98:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	0049      	lsls	r1, r1, #1
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0x530>
 8002ca4:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002ca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ca8:	4b58      	ldr	r3, [pc, #352]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002caa:	495a      	ldr	r1, [pc, #360]	; (8002e14 <HAL_RCC_OscConfig+0x688>)
 8002cac:	400a      	ands	r2, r1
 8002cae:	651a      	str	r2, [r3, #80]	; 0x50
 8002cb0:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002cb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cb4:	4b55      	ldr	r3, [pc, #340]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002cb6:	4959      	ldr	r1, [pc, #356]	; (8002e1c <HAL_RCC_OscConfig+0x690>)
 8002cb8:	400a      	ands	r2, r1
 8002cba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d015      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc4:	f7ff fa56 	bl	8002174 <HAL_GetTick>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ccc:	e009      	b.n	8002ce2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7ff fa51 	bl	8002174 <HAL_GetTick>
 8002cd2:	0002      	movs	r2, r0
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	4a51      	ldr	r2, [pc, #324]	; (8002e20 <HAL_RCC_OscConfig+0x694>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0ca      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ce2:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4013      	ands	r3, r2
 8002cec:	d0ef      	beq.n	8002cce <HAL_RCC_OscConfig+0x542>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf0:	f7ff fa40 	bl	8002174 <HAL_GetTick>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cf8:	e009      	b.n	8002d0e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7ff fa3b 	bl	8002174 <HAL_GetTick>
 8002cfe:	0002      	movs	r2, r0
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	4a46      	ldr	r2, [pc, #280]	; (8002e20 <HAL_RCC_OscConfig+0x694>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0b4      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d0e:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002d10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4013      	ands	r3, r2
 8002d18:	d1ef      	bne.n	8002cfa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d1a:	2323      	movs	r3, #35	; 0x23
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d105      	bne.n	8002d30 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d24:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d28:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002d2a:	493e      	ldr	r1, [pc, #248]	; (8002e24 <HAL_RCC_OscConfig+0x698>)
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d100      	bne.n	8002d3a <HAL_RCC_OscConfig+0x5ae>
 8002d38:	e09d      	b.n	8002e76 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d100      	bne.n	8002d42 <HAL_RCC_OscConfig+0x5b6>
 8002d40:	e076      	b.n	8002e30 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d145      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002d50:	4935      	ldr	r1, [pc, #212]	; (8002e28 <HAL_RCC_OscConfig+0x69c>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d56:	f7ff fa0d 	bl	8002174 <HAL_GetTick>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d60:	f7ff fa08 	bl	8002174 <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e082      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	049b      	lsls	r3, r3, #18
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d7e:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <HAL_RCC_OscConfig+0x6a0>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	431a      	orrs	r2, r3
 8002d98:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	0449      	lsls	r1, r1, #17
 8002da8:	430a      	orrs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7ff f9e2 	bl	8002174 <HAL_GetTick>
 8002db0:	0003      	movs	r3, r0
 8002db2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db6:	f7ff f9dd 	bl	8002174 <HAL_GetTick>
 8002dba:	0002      	movs	r2, r0
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e057      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	049b      	lsls	r3, r3, #18
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x62a>
 8002dd4:	e04f      	b.n	8002e76 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002ddc:	4912      	ldr	r1, [pc, #72]	; (8002e28 <HAL_RCC_OscConfig+0x69c>)
 8002dde:	400a      	ands	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7ff f9c7 	bl	8002174 <HAL_GetTick>
 8002de6:	0003      	movs	r3, r0
 8002de8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7ff f9c2 	bl	8002174 <HAL_GetTick>
 8002df0:	0002      	movs	r2, r0
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e03c      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dfe:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_RCC_OscConfig+0x680>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	049b      	lsls	r3, r3, #18
 8002e06:	4013      	ands	r3, r2
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x660>
 8002e0a:	e034      	b.n	8002e76 <HAL_RCC_OscConfig+0x6ea>
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	ffff1fff 	.word	0xffff1fff
 8002e14:	fffffeff 	.word	0xfffffeff
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	fffffbff 	.word	0xfffffbff
 8002e20:	00001388 	.word	0x00001388
 8002e24:	efffffff 	.word	0xefffffff
 8002e28:	feffffff 	.word	0xfeffffff
 8002e2c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e01d      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e3c:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_RCC_OscConfig+0x6f4>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	025b      	lsls	r3, r3, #9
 8002e48:	401a      	ands	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d10f      	bne.n	8002e72 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	23f0      	movs	r3, #240	; 0xf0
 8002e56:	039b      	lsls	r3, r3, #14
 8002e58:	401a      	ands	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	23c0      	movs	r3, #192	; 0xc0
 8002e66:	041b      	lsls	r3, r3, #16
 8002e68:	401a      	ands	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b00a      	add	sp, #40	; 0x28
 8002e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e80:	40021000 	.word	0x40021000

08002e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e84:	b5b0      	push	{r4, r5, r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e128      	b.n	80030ea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e98:	4b96      	ldr	r3, [pc, #600]	; (80030f4 <HAL_RCC_ClockConfig+0x270>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d91e      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b93      	ldr	r3, [pc, #588]	; (80030f4 <HAL_RCC_ClockConfig+0x270>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4393      	bics	r3, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	4b90      	ldr	r3, [pc, #576]	; (80030f4 <HAL_RCC_ClockConfig+0x270>)
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002eb8:	f7ff f95c 	bl	8002174 <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec0:	e009      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec2:	f7ff f957 	bl	8002174 <HAL_GetTick>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	4a8a      	ldr	r2, [pc, #552]	; (80030f8 <HAL_RCC_ClockConfig+0x274>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e109      	b.n	80030ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b87      	ldr	r3, [pc, #540]	; (80030f4 <HAL_RCC_ClockConfig+0x270>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2201      	movs	r2, #1
 8002edc:	4013      	ands	r3, r2
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1ee      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d009      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eee:	4b83      	ldr	r3, [pc, #524]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	22f0      	movs	r2, #240	; 0xf0
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	4b7f      	ldr	r3, [pc, #508]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 8002efe:	430a      	orrs	r2, r1
 8002f00:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2201      	movs	r2, #1
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d100      	bne.n	8002f0e <HAL_RCC_ClockConfig+0x8a>
 8002f0c:	e089      	b.n	8003022 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f16:	4b79      	ldr	r3, [pc, #484]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	029b      	lsls	r3, r3, #10
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d120      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0e1      	b.n	80030ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f2e:	4b73      	ldr	r3, [pc, #460]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	049b      	lsls	r3, r3, #18
 8002f36:	4013      	ands	r3, r2
 8002f38:	d114      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0d5      	b.n	80030ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d106      	bne.n	8002f54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f46:	4b6d      	ldr	r3, [pc, #436]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d109      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0ca      	b.n	80030ea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f54:	4b69      	ldr	r3, [pc, #420]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0c2      	b.n	80030ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f64:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2203      	movs	r2, #3
 8002f6a:	4393      	bics	r3, r2
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	4b62      	ldr	r3, [pc, #392]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 8002f74:	430a      	orrs	r2, r1
 8002f76:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f78:	f7ff f8fc 	bl	8002174 <HAL_GetTick>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d111      	bne.n	8002fac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f88:	e009      	b.n	8002f9e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8a:	f7ff f8f3 	bl	8002174 <HAL_GetTick>
 8002f8e:	0002      	movs	r2, r0
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <HAL_RCC_ClockConfig+0x274>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0a5      	b.n	80030ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f9e:	4b57      	ldr	r3, [pc, #348]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d1ef      	bne.n	8002f8a <HAL_RCC_ClockConfig+0x106>
 8002faa:	e03a      	b.n	8003022 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d111      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb4:	e009      	b.n	8002fca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb6:	f7ff f8dd 	bl	8002174 <HAL_GetTick>
 8002fba:	0002      	movs	r2, r0
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	4a4d      	ldr	r2, [pc, #308]	; (80030f8 <HAL_RCC_ClockConfig+0x274>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e08f      	b.n	80030ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fca:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	220c      	movs	r2, #12
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d1ef      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0x132>
 8002fd6:	e024      	b.n	8003022 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d11b      	bne.n	8003018 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe0:	e009      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe2:	f7ff f8c7 	bl	8002174 <HAL_GetTick>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	4a42      	ldr	r2, [pc, #264]	; (80030f8 <HAL_RCC_ClockConfig+0x274>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e079      	b.n	80030ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ff6:	4b41      	ldr	r3, [pc, #260]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	220c      	movs	r2, #12
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d1ef      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0x15e>
 8003002:	e00e      	b.n	8003022 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7ff f8b6 	bl	8002174 <HAL_GetTick>
 8003008:	0002      	movs	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	4a3a      	ldr	r2, [pc, #232]	; (80030f8 <HAL_RCC_ClockConfig+0x274>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e068      	b.n	80030ea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003018:	4b38      	ldr	r3, [pc, #224]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	220c      	movs	r2, #12
 800301e:	4013      	ands	r3, r2
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003022:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <HAL_RCC_ClockConfig+0x270>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2201      	movs	r2, #1
 8003028:	4013      	ands	r3, r2
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d21e      	bcs.n	800306e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003030:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <HAL_RCC_ClockConfig+0x270>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2201      	movs	r2, #1
 8003036:	4393      	bics	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <HAL_RCC_ClockConfig+0x270>)
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003042:	f7ff f897 	bl	8002174 <HAL_GetTick>
 8003046:	0003      	movs	r3, r0
 8003048:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	e009      	b.n	8003060 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7ff f892 	bl	8002174 <HAL_GetTick>
 8003050:	0002      	movs	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	4a28      	ldr	r2, [pc, #160]	; (80030f8 <HAL_RCC_ClockConfig+0x274>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e044      	b.n	80030ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_RCC_ClockConfig+0x270>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2201      	movs	r2, #1
 8003066:	4013      	ands	r3, r2
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d1ee      	bne.n	800304c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2204      	movs	r2, #4
 8003074:	4013      	ands	r3, r2
 8003076:	d009      	beq.n	800308c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4a20      	ldr	r2, [pc, #128]	; (8003100 <HAL_RCC_ClockConfig+0x27c>)
 800307e:	4013      	ands	r3, r2
 8003080:	0019      	movs	r1, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2208      	movs	r2, #8
 8003092:	4013      	ands	r3, r2
 8003094:	d00a      	beq.n	80030ac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003096:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	4a1a      	ldr	r2, [pc, #104]	; (8003104 <HAL_RCC_ClockConfig+0x280>)
 800309c:	4013      	ands	r3, r2
 800309e:	0019      	movs	r1, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	00da      	lsls	r2, r3, #3
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 80030a8:	430a      	orrs	r2, r1
 80030aa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ac:	f000 f832 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80030b0:	0001      	movs	r1, r0
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_ClockConfig+0x278>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	220f      	movs	r2, #15
 80030ba:	4013      	ands	r3, r2
 80030bc:	4a12      	ldr	r2, [pc, #72]	; (8003108 <HAL_RCC_ClockConfig+0x284>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	000a      	movs	r2, r1
 80030c2:	40da      	lsrs	r2, r3
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_RCC_ClockConfig+0x288>)
 80030c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_RCC_ClockConfig+0x28c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	250b      	movs	r5, #11
 80030ce:	197c      	adds	r4, r7, r5
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff f809 	bl	80020e8 <HAL_InitTick>
 80030d6:	0003      	movs	r3, r0
 80030d8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80030da:	197b      	adds	r3, r7, r5
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80030e2:	197b      	adds	r3, r7, r5
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	e000      	b.n	80030ea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	0018      	movs	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b004      	add	sp, #16
 80030f0:	bdb0      	pop	{r4, r5, r7, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	40022000 	.word	0x40022000
 80030f8:	00001388 	.word	0x00001388
 80030fc:	40021000 	.word	0x40021000
 8003100:	fffff8ff 	.word	0xfffff8ff
 8003104:	ffffc7ff 	.word	0xffffc7ff
 8003108:	080050e8 	.word	0x080050e8
 800310c:	20000000 	.word	0x20000000
 8003110:	20000004 	.word	0x20000004

08003114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003114:	b5b0      	push	{r4, r5, r7, lr}
 8003116:	b08e      	sub	sp, #56	; 0x38
 8003118:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800311a:	4b4c      	ldr	r3, [pc, #304]	; (800324c <HAL_RCC_GetSysClockFreq+0x138>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003122:	230c      	movs	r3, #12
 8003124:	4013      	ands	r3, r2
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d014      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x40>
 800312a:	d900      	bls.n	800312e <HAL_RCC_GetSysClockFreq+0x1a>
 800312c:	e07b      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x112>
 800312e:	2b04      	cmp	r3, #4
 8003130:	d002      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x24>
 8003132:	2b08      	cmp	r3, #8
 8003134:	d00b      	beq.n	800314e <HAL_RCC_GetSysClockFreq+0x3a>
 8003136:	e076      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003138:	4b44      	ldr	r3, [pc, #272]	; (800324c <HAL_RCC_GetSysClockFreq+0x138>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2210      	movs	r2, #16
 800313e:	4013      	ands	r3, r2
 8003140:	d002      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003142:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003144:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003146:	e07c      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003148:	4b42      	ldr	r3, [pc, #264]	; (8003254 <HAL_RCC_GetSysClockFreq+0x140>)
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800314c:	e079      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800314e:	4b42      	ldr	r3, [pc, #264]	; (8003258 <HAL_RCC_GetSysClockFreq+0x144>)
 8003150:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003152:	e076      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	0c9a      	lsrs	r2, r3, #18
 8003158:	230f      	movs	r3, #15
 800315a:	401a      	ands	r2, r3
 800315c:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCC_GetSysClockFreq+0x148>)
 800315e:	5c9b      	ldrb	r3, [r3, r2]
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003164:	0d9a      	lsrs	r2, r3, #22
 8003166:	2303      	movs	r3, #3
 8003168:	4013      	ands	r3, r2
 800316a:	3301      	adds	r3, #1
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800316e:	4b37      	ldr	r3, [pc, #220]	; (800324c <HAL_RCC_GetSysClockFreq+0x138>)
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	025b      	lsls	r3, r3, #9
 8003176:	4013      	ands	r3, r2
 8003178:	d01a      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	4a35      	ldr	r2, [pc, #212]	; (8003258 <HAL_RCC_GetSysClockFreq+0x144>)
 8003184:	2300      	movs	r3, #0
 8003186:	69b8      	ldr	r0, [r7, #24]
 8003188:	69f9      	ldr	r1, [r7, #28]
 800318a:	f7fd f95b 	bl	8000444 <__aeabi_lmul>
 800318e:	0002      	movs	r2, r0
 8003190:	000b      	movs	r3, r1
 8003192:	0010      	movs	r0, r2
 8003194:	0019      	movs	r1, r3
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f7fd f92f 	bl	8000404 <__aeabi_uldivmod>
 80031a6:	0002      	movs	r2, r0
 80031a8:	000b      	movs	r3, r1
 80031aa:	0013      	movs	r3, r2
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
 80031ae:	e037      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80031b0:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_RCC_GetSysClockFreq+0x138>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2210      	movs	r2, #16
 80031b6:	4013      	ands	r3, r2
 80031b8:	d01a      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	4a23      	ldr	r2, [pc, #140]	; (8003250 <HAL_RCC_GetSysClockFreq+0x13c>)
 80031c4:	2300      	movs	r3, #0
 80031c6:	68b8      	ldr	r0, [r7, #8]
 80031c8:	68f9      	ldr	r1, [r7, #12]
 80031ca:	f7fd f93b 	bl	8000444 <__aeabi_lmul>
 80031ce:	0002      	movs	r2, r0
 80031d0:	000b      	movs	r3, r1
 80031d2:	0010      	movs	r0, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	603b      	str	r3, [r7, #0]
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f7fd f90f 	bl	8000404 <__aeabi_uldivmod>
 80031e6:	0002      	movs	r2, r0
 80031e8:	000b      	movs	r3, r1
 80031ea:	0013      	movs	r3, r2
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
 80031ee:	e017      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	0018      	movs	r0, r3
 80031f4:	2300      	movs	r3, #0
 80031f6:	0019      	movs	r1, r3
 80031f8:	4a16      	ldr	r2, [pc, #88]	; (8003254 <HAL_RCC_GetSysClockFreq+0x140>)
 80031fa:	2300      	movs	r3, #0
 80031fc:	f7fd f922 	bl	8000444 <__aeabi_lmul>
 8003200:	0002      	movs	r2, r0
 8003202:	000b      	movs	r3, r1
 8003204:	0010      	movs	r0, r2
 8003206:	0019      	movs	r1, r3
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	001c      	movs	r4, r3
 800320c:	2300      	movs	r3, #0
 800320e:	001d      	movs	r5, r3
 8003210:	0022      	movs	r2, r4
 8003212:	002b      	movs	r3, r5
 8003214:	f7fd f8f6 	bl	8000404 <__aeabi_uldivmod>
 8003218:	0002      	movs	r2, r0
 800321a:	000b      	movs	r3, r1
 800321c:	0013      	movs	r3, r2
 800321e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003222:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003224:	e00d      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCC_GetSysClockFreq+0x138>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	0b5b      	lsrs	r3, r3, #13
 800322c:	2207      	movs	r2, #7
 800322e:	4013      	ands	r3, r2
 8003230:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	3301      	adds	r3, #1
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	0212      	lsls	r2, r2, #8
 800323a:	409a      	lsls	r2, r3
 800323c:	0013      	movs	r3, r2
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003240:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003244:	0018      	movs	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	b00e      	add	sp, #56	; 0x38
 800324a:	bdb0      	pop	{r4, r5, r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	003d0900 	.word	0x003d0900
 8003254:	00f42400 	.word	0x00f42400
 8003258:	007a1200 	.word	0x007a1200
 800325c:	08005100 	.word	0x08005100

08003260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b02      	ldr	r3, [pc, #8]	; (8003270 <HAL_RCC_GetHCLKFreq+0x10>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	20000000 	.word	0x20000000

08003274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003278:	f7ff fff2 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 800327c:	0001      	movs	r1, r0
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	2207      	movs	r2, #7
 8003286:	4013      	ands	r3, r2
 8003288:	4a04      	ldr	r2, [pc, #16]	; (800329c <HAL_RCC_GetPCLK1Freq+0x28>)
 800328a:	5cd3      	ldrb	r3, [r2, r3]
 800328c:	40d9      	lsrs	r1, r3
 800328e:	000b      	movs	r3, r1
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	40021000 	.word	0x40021000
 800329c:	080050f8 	.word	0x080050f8

080032a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032a4:	f7ff ffdc 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032a8:	0001      	movs	r1, r0
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	0adb      	lsrs	r3, r3, #11
 80032b0:	2207      	movs	r2, #7
 80032b2:	4013      	ands	r3, r2
 80032b4:	4a04      	ldr	r2, [pc, #16]	; (80032c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032b6:	5cd3      	ldrb	r3, [r2, r3]
 80032b8:	40d9      	lsrs	r1, r3
 80032ba:	000b      	movs	r3, r1
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	40021000 	.word	0x40021000
 80032c8:	080050f8 	.word	0x080050f8

080032cc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80032d4:	2017      	movs	r0, #23
 80032d6:	183b      	adds	r3, r7, r0
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2220      	movs	r2, #32
 80032e2:	4013      	ands	r3, r2
 80032e4:	d100      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80032e6:	e0c2      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e8:	4b91      	ldr	r3, [pc, #580]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	055b      	lsls	r3, r3, #21
 80032f0:	4013      	ands	r3, r2
 80032f2:	d109      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f4:	4b8e      	ldr	r3, [pc, #568]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f8:	4b8d      	ldr	r3, [pc, #564]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032fa:	2180      	movs	r1, #128	; 0x80
 80032fc:	0549      	lsls	r1, r1, #21
 80032fe:	430a      	orrs	r2, r1
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003302:	183b      	adds	r3, r7, r0
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	4b8a      	ldr	r3, [pc, #552]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4013      	ands	r3, r2
 8003312:	d11a      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003314:	4b87      	ldr	r3, [pc, #540]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b86      	ldr	r3, [pc, #536]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800331a:	2180      	movs	r1, #128	; 0x80
 800331c:	0049      	lsls	r1, r1, #1
 800331e:	430a      	orrs	r2, r1
 8003320:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003322:	f7fe ff27 	bl	8002174 <HAL_GetTick>
 8003326:	0003      	movs	r3, r0
 8003328:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	e008      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800332c:	f7fe ff22 	bl	8002174 <HAL_GetTick>
 8003330:	0002      	movs	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0f3      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333e:	4b7d      	ldr	r3, [pc, #500]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4013      	ands	r3, r2
 8003348:	d0f0      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800334a:	4b79      	ldr	r3, [pc, #484]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	23c0      	movs	r3, #192	; 0xc0
 8003350:	039b      	lsls	r3, r3, #14
 8003352:	4013      	ands	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	23c0      	movs	r3, #192	; 0xc0
 800335c:	039b      	lsls	r3, r3, #14
 800335e:	4013      	ands	r3, r2
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	429a      	cmp	r2, r3
 8003364:	d013      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	23c0      	movs	r3, #192	; 0xc0
 800336c:	029b      	lsls	r3, r3, #10
 800336e:	401a      	ands	r2, r3
 8003370:	23c0      	movs	r3, #192	; 0xc0
 8003372:	029b      	lsls	r3, r3, #10
 8003374:	429a      	cmp	r2, r3
 8003376:	d10a      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003378:	4b6d      	ldr	r3, [pc, #436]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	029b      	lsls	r3, r3, #10
 8003380:	401a      	ands	r2, r3
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	029b      	lsls	r3, r3, #10
 8003386:	429a      	cmp	r2, r3
 8003388:	d101      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e0cb      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800338e:	4b68      	ldr	r3, [pc, #416]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003392:	23c0      	movs	r3, #192	; 0xc0
 8003394:	029b      	lsls	r3, r3, #10
 8003396:	4013      	ands	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d03b      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	23c0      	movs	r3, #192	; 0xc0
 80033a6:	029b      	lsls	r3, r3, #10
 80033a8:	4013      	ands	r3, r2
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d033      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2220      	movs	r2, #32
 80033b6:	4013      	ands	r3, r2
 80033b8:	d02e      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80033ba:	4b5d      	ldr	r3, [pc, #372]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033be:	4a5e      	ldr	r2, [pc, #376]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033c4:	4b5a      	ldr	r3, [pc, #360]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033c8:	4b59      	ldr	r3, [pc, #356]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	0309      	lsls	r1, r1, #12
 80033ce:	430a      	orrs	r2, r1
 80033d0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033d2:	4b57      	ldr	r3, [pc, #348]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033d6:	4b56      	ldr	r3, [pc, #344]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033d8:	4958      	ldr	r1, [pc, #352]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80033da:	400a      	ands	r2, r1
 80033dc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80033de:	4b54      	ldr	r3, [pc, #336]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4013      	ands	r3, r2
 80033ec:	d014      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7fe fec1 	bl	8002174 <HAL_GetTick>
 80033f2:	0003      	movs	r3, r0
 80033f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033f6:	e009      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fe febc 	bl	8002174 <HAL_GetTick>
 80033fc:	0002      	movs	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	4a4f      	ldr	r2, [pc, #316]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d901      	bls.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e08c      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800340c:	4b48      	ldr	r3, [pc, #288]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800340e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4013      	ands	r3, r2
 8003416:	d0ef      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	23c0      	movs	r3, #192	; 0xc0
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	401a      	ands	r2, r3
 8003422:	23c0      	movs	r3, #192	; 0xc0
 8003424:	029b      	lsls	r3, r3, #10
 8003426:	429a      	cmp	r2, r3
 8003428:	d10c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800342a:	4b41      	ldr	r3, [pc, #260]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a45      	ldr	r2, [pc, #276]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003430:	4013      	ands	r3, r2
 8003432:	0019      	movs	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	23c0      	movs	r3, #192	; 0xc0
 800343a:	039b      	lsls	r3, r3, #14
 800343c:	401a      	ands	r2, r3
 800343e:	4b3c      	ldr	r3, [pc, #240]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003440:	430a      	orrs	r2, r1
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	4b3a      	ldr	r3, [pc, #232]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003446:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	23c0      	movs	r3, #192	; 0xc0
 800344e:	029b      	lsls	r3, r3, #10
 8003450:	401a      	ands	r2, r3
 8003452:	4b37      	ldr	r3, [pc, #220]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003454:	430a      	orrs	r2, r1
 8003456:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003458:	2317      	movs	r3, #23
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003462:	4b33      	ldr	r3, [pc, #204]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003466:	4b32      	ldr	r3, [pc, #200]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003468:	4937      	ldr	r1, [pc, #220]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800346a:	400a      	ands	r2, r1
 800346c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2201      	movs	r2, #1
 8003474:	4013      	ands	r3, r2
 8003476:	d009      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003478:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800347a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347c:	2203      	movs	r2, #3
 800347e:	4393      	bics	r3, r2
 8003480:	0019      	movs	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003488:	430a      	orrs	r2, r1
 800348a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2202      	movs	r2, #2
 8003492:	4013      	ands	r3, r2
 8003494:	d009      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003496:	4b26      	ldr	r3, [pc, #152]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	220c      	movs	r2, #12
 800349c:	4393      	bics	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	4b22      	ldr	r3, [pc, #136]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034a6:	430a      	orrs	r2, r1
 80034a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2204      	movs	r2, #4
 80034b0:	4013      	ands	r3, r2
 80034b2:	d009      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034b4:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b8:	4a24      	ldr	r2, [pc, #144]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	0019      	movs	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034c4:	430a      	orrs	r2, r1
 80034c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2208      	movs	r2, #8
 80034ce:	4013      	ands	r3, r2
 80034d0:	d009      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034d2:	4b17      	ldr	r3, [pc, #92]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80034d8:	4013      	ands	r3, r2
 80034da:	0019      	movs	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	4b13      	ldr	r3, [pc, #76]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034e2:	430a      	orrs	r2, r1
 80034e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4013      	ands	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	4a10      	ldr	r2, [pc, #64]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	0019      	movs	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003502:	430a      	orrs	r2, r1
 8003504:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	4013      	ands	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003514:	4a0f      	ldr	r2, [pc, #60]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003516:	4013      	ands	r3, r2
 8003518:	0019      	movs	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	4b04      	ldr	r3, [pc, #16]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003520:	430a      	orrs	r2, r1
 8003522:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b006      	add	sp, #24
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	40021000 	.word	0x40021000
 8003534:	40007000 	.word	0x40007000
 8003538:	fffcffff 	.word	0xfffcffff
 800353c:	fff7ffff 	.word	0xfff7ffff
 8003540:	00001388 	.word	0x00001388
 8003544:	ffcfffff 	.word	0xffcfffff
 8003548:	efffffff 	.word	0xefffffff
 800354c:	fffff3ff 	.word	0xfffff3ff
 8003550:	ffffcfff 	.word	0xffffcfff
 8003554:	fff3ffff 	.word	0xfff3ffff

08003558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e044      	b.n	80035f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800356e:	2b00      	cmp	r3, #0
 8003570:	d107      	bne.n	8003582 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2274      	movs	r2, #116	; 0x74
 8003576:	2100      	movs	r1, #0
 8003578:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	0018      	movs	r0, r3
 800357e:	f7fd fa6d 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2224      	movs	r2, #36	; 0x24
 8003586:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2101      	movs	r1, #1
 8003594:	438a      	bics	r2, r1
 8003596:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	0018      	movs	r0, r3
 800359c:	f000 fc36 	bl	8003e0c <UART_SetConfig>
 80035a0:	0003      	movs	r3, r0
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e024      	b.n	80035f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 fee7 	bl	8004388 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	490d      	ldr	r1, [pc, #52]	; (80035fc <HAL_UART_Init+0xa4>)
 80035c6:	400a      	ands	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	212a      	movs	r1, #42	; 0x2a
 80035d6:	438a      	bics	r2, r1
 80035d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2101      	movs	r1, #1
 80035e6:	430a      	orrs	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f000 ff7f 	bl	80044f0 <UART_CheckIdleState>
 80035f2:	0003      	movs	r3, r0
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	ffffb7ff 	.word	0xffffb7ff

08003600 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	1dbb      	adds	r3, r7, #6
 800360e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003614:	2b20      	cmp	r3, #32
 8003616:	d000      	beq.n	800361a <HAL_UART_Transmit+0x1a>
 8003618:	e095      	b.n	8003746 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_UART_Transmit+0x28>
 8003620:	1dbb      	adds	r3, r7, #6
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e08d      	b.n	8003748 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	015b      	lsls	r3, r3, #5
 8003634:	429a      	cmp	r2, r3
 8003636:	d109      	bne.n	800364c <HAL_UART_Transmit+0x4c>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2201      	movs	r2, #1
 8003644:	4013      	ands	r3, r2
 8003646:	d001      	beq.n	800364c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e07d      	b.n	8003748 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2274      	movs	r2, #116	; 0x74
 8003650:	5c9b      	ldrb	r3, [r3, r2]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_UART_Transmit+0x5a>
 8003656:	2302      	movs	r3, #2
 8003658:	e076      	b.n	8003748 <HAL_UART_Transmit+0x148>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2274      	movs	r2, #116	; 0x74
 800365e:	2101      	movs	r1, #1
 8003660:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	2100      	movs	r1, #0
 8003668:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2221      	movs	r2, #33	; 0x21
 800366e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003670:	f7fe fd80 	bl	8002174 <HAL_GetTick>
 8003674:	0003      	movs	r3, r0
 8003676:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1dba      	adds	r2, r7, #6
 800367c:	2150      	movs	r1, #80	; 0x50
 800367e:	8812      	ldrh	r2, [r2, #0]
 8003680:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1dba      	adds	r2, r7, #6
 8003686:	2152      	movs	r1, #82	; 0x52
 8003688:	8812      	ldrh	r2, [r2, #0]
 800368a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	015b      	lsls	r3, r3, #5
 8003694:	429a      	cmp	r2, r3
 8003696:	d108      	bne.n	80036aa <HAL_UART_Transmit+0xaa>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d104      	bne.n	80036aa <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	e003      	b.n	80036b2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2274      	movs	r2, #116	; 0x74
 80036b6:	2100      	movs	r1, #0
 80036b8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80036ba:	e02c      	b.n	8003716 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	0013      	movs	r3, r2
 80036c6:	2200      	movs	r2, #0
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	f000 ff59 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 80036ce:	1e03      	subs	r3, r0, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e038      	b.n	8003748 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10b      	bne.n	80036f4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	001a      	movs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	05d2      	lsls	r2, r2, #23
 80036e8:	0dd2      	lsrs	r2, r2, #23
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	3302      	adds	r3, #2
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	e007      	b.n	8003704 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	781a      	ldrb	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3301      	adds	r3, #1
 8003702:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2252      	movs	r2, #82	; 0x52
 8003708:	5a9b      	ldrh	r3, [r3, r2]
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b299      	uxth	r1, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2252      	movs	r2, #82	; 0x52
 8003714:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2252      	movs	r2, #82	; 0x52
 800371a:	5a9b      	ldrh	r3, [r3, r2]
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1cc      	bne.n	80036bc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	0013      	movs	r3, r2
 800372c:	2200      	movs	r2, #0
 800372e:	2140      	movs	r1, #64	; 0x40
 8003730:	f000 ff26 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d001      	beq.n	800373c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e005      	b.n	8003748 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
  }
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b008      	add	sp, #32
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	1dbb      	adds	r3, r7, #6
 800375c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003762:	2b20      	cmp	r3, #32
 8003764:	d155      	bne.n	8003812 <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_UART_Receive_IT+0x24>
 800376c:	1dbb      	adds	r3, r7, #6
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e04d      	b.n	8003814 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	015b      	lsls	r3, r3, #5
 8003780:	429a      	cmp	r2, r3
 8003782:	d109      	bne.n	8003798 <HAL_UART_Receive_IT+0x48>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d105      	bne.n	8003798 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2201      	movs	r2, #1
 8003790:	4013      	ands	r3, r2
 8003792:	d001      	beq.n	8003798 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e03d      	b.n	8003814 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2274      	movs	r2, #116	; 0x74
 800379c:	5c9b      	ldrb	r3, [r3, r2]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Receive_IT+0x56>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e036      	b.n	8003814 <HAL_UART_Receive_IT+0xc4>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2274      	movs	r2, #116	; 0x74
 80037aa:	2101      	movs	r1, #1
 80037ac:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a18      	ldr	r2, [pc, #96]	; (800381c <HAL_UART_Receive_IT+0xcc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d020      	beq.n	8003800 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	4013      	ands	r3, r2
 80037ca:	d019      	beq.n	8003800 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037cc:	f3ef 8310 	mrs	r3, PRIMASK
 80037d0:	613b      	str	r3, [r7, #16]
  return(result);
 80037d2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	2301      	movs	r3, #1
 80037d8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f383 8810 	msr	PRIMASK, r3
}
 80037e0:	46c0      	nop			; (mov r8, r8)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2180      	movs	r1, #128	; 0x80
 80037ee:	04c9      	lsls	r1, r1, #19
 80037f0:	430a      	orrs	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	f383 8810 	msr	PRIMASK, r3
}
 80037fe:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003800:	1dbb      	adds	r3, r7, #6
 8003802:	881a      	ldrh	r2, [r3, #0]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	0018      	movs	r0, r3
 800380a:	f000 ff7d 	bl	8004708 <UART_Start_Receive_IT>
 800380e:	0003      	movs	r3, r0
 8003810:	e000      	b.n	8003814 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
  }
}
 8003814:	0018      	movs	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	b008      	add	sp, #32
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40004800 	.word	0x40004800

08003820 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003820:	b590      	push	{r4, r7, lr}
 8003822:	b0ab      	sub	sp, #172	; 0xac
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	22a4      	movs	r2, #164	; 0xa4
 8003830:	18b9      	adds	r1, r7, r2
 8003832:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	20a0      	movs	r0, #160	; 0xa0
 800383c:	1839      	adds	r1, r7, r0
 800383e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	219c      	movs	r1, #156	; 0x9c
 8003848:	1879      	adds	r1, r7, r1
 800384a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800384c:	0011      	movs	r1, r2
 800384e:	18bb      	adds	r3, r7, r2
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a99      	ldr	r2, [pc, #612]	; (8003ab8 <HAL_UART_IRQHandler+0x298>)
 8003854:	4013      	ands	r3, r2
 8003856:	2298      	movs	r2, #152	; 0x98
 8003858:	18bc      	adds	r4, r7, r2
 800385a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800385c:	18bb      	adds	r3, r7, r2
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d114      	bne.n	800388e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003864:	187b      	adds	r3, r7, r1
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2220      	movs	r2, #32
 800386a:	4013      	ands	r3, r2
 800386c:	d00f      	beq.n	800388e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800386e:	183b      	adds	r3, r7, r0
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2220      	movs	r2, #32
 8003874:	4013      	ands	r3, r2
 8003876:	d00a      	beq.n	800388e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800387c:	2b00      	cmp	r3, #0
 800387e:	d100      	bne.n	8003882 <HAL_UART_IRQHandler+0x62>
 8003880:	e298      	b.n	8003db4 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	0010      	movs	r0, r2
 800388a:	4798      	blx	r3
      }
      return;
 800388c:	e292      	b.n	8003db4 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800388e:	2398      	movs	r3, #152	; 0x98
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d100      	bne.n	800389a <HAL_UART_IRQHandler+0x7a>
 8003898:	e114      	b.n	8003ac4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800389a:	239c      	movs	r3, #156	; 0x9c
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2201      	movs	r2, #1
 80038a2:	4013      	ands	r3, r2
 80038a4:	d106      	bne.n	80038b4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038a6:	23a0      	movs	r3, #160	; 0xa0
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a83      	ldr	r2, [pc, #524]	; (8003abc <HAL_UART_IRQHandler+0x29c>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	d100      	bne.n	80038b4 <HAL_UART_IRQHandler+0x94>
 80038b2:	e107      	b.n	8003ac4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038b4:	23a4      	movs	r3, #164	; 0xa4
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2201      	movs	r2, #1
 80038bc:	4013      	ands	r3, r2
 80038be:	d012      	beq.n	80038e6 <HAL_UART_IRQHandler+0xc6>
 80038c0:	23a0      	movs	r3, #160	; 0xa0
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	2380      	movs	r3, #128	; 0x80
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4013      	ands	r3, r2
 80038cc:	d00b      	beq.n	80038e6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2201      	movs	r2, #1
 80038d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2280      	movs	r2, #128	; 0x80
 80038da:	589b      	ldr	r3, [r3, r2]
 80038dc:	2201      	movs	r2, #1
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038e6:	23a4      	movs	r3, #164	; 0xa4
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2202      	movs	r2, #2
 80038ee:	4013      	ands	r3, r2
 80038f0:	d011      	beq.n	8003916 <HAL_UART_IRQHandler+0xf6>
 80038f2:	239c      	movs	r3, #156	; 0x9c
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2201      	movs	r2, #1
 80038fa:	4013      	ands	r3, r2
 80038fc:	d00b      	beq.n	8003916 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2202      	movs	r2, #2
 8003904:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	589b      	ldr	r3, [r3, r2]
 800390c:	2204      	movs	r2, #4
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2180      	movs	r1, #128	; 0x80
 8003914:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003916:	23a4      	movs	r3, #164	; 0xa4
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2204      	movs	r2, #4
 800391e:	4013      	ands	r3, r2
 8003920:	d011      	beq.n	8003946 <HAL_UART_IRQHandler+0x126>
 8003922:	239c      	movs	r3, #156	; 0x9c
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2201      	movs	r2, #1
 800392a:	4013      	ands	r3, r2
 800392c:	d00b      	beq.n	8003946 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2204      	movs	r2, #4
 8003934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2280      	movs	r2, #128	; 0x80
 800393a:	589b      	ldr	r3, [r3, r2]
 800393c:	2202      	movs	r2, #2
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003946:	23a4      	movs	r3, #164	; 0xa4
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2208      	movs	r2, #8
 800394e:	4013      	ands	r3, r2
 8003950:	d017      	beq.n	8003982 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003952:	23a0      	movs	r3, #160	; 0xa0
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2220      	movs	r2, #32
 800395a:	4013      	ands	r3, r2
 800395c:	d105      	bne.n	800396a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800395e:	239c      	movs	r3, #156	; 0x9c
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2201      	movs	r2, #1
 8003966:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003968:	d00b      	beq.n	8003982 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2208      	movs	r2, #8
 8003970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	589b      	ldr	r3, [r3, r2]
 8003978:	2208      	movs	r2, #8
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2180      	movs	r1, #128	; 0x80
 8003980:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003982:	23a4      	movs	r3, #164	; 0xa4
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	4013      	ands	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_UART_IRQHandler+0x198>
 8003990:	23a0      	movs	r3, #160	; 0xa0
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	04db      	lsls	r3, r3, #19
 800399a:	4013      	ands	r3, r2
 800399c:	d00c      	beq.n	80039b8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2280      	movs	r2, #128	; 0x80
 80039ac:	589b      	ldr	r3, [r3, r2]
 80039ae:	2220      	movs	r2, #32
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2180      	movs	r1, #128	; 0x80
 80039b6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2280      	movs	r2, #128	; 0x80
 80039bc:	589b      	ldr	r3, [r3, r2]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d100      	bne.n	80039c4 <HAL_UART_IRQHandler+0x1a4>
 80039c2:	e1f9      	b.n	8003db8 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039c4:	23a4      	movs	r3, #164	; 0xa4
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2220      	movs	r2, #32
 80039cc:	4013      	ands	r3, r2
 80039ce:	d00e      	beq.n	80039ee <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039d0:	23a0      	movs	r3, #160	; 0xa0
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2220      	movs	r2, #32
 80039d8:	4013      	ands	r3, r2
 80039da:	d008      	beq.n	80039ee <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d004      	beq.n	80039ee <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	0010      	movs	r0, r2
 80039ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2280      	movs	r2, #128	; 0x80
 80039f2:	589b      	ldr	r3, [r3, r2]
 80039f4:	2194      	movs	r1, #148	; 0x94
 80039f6:	187a      	adds	r2, r7, r1
 80039f8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2240      	movs	r2, #64	; 0x40
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d004      	beq.n	8003a12 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a08:	187b      	adds	r3, r7, r1
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2228      	movs	r2, #40	; 0x28
 8003a0e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a10:	d047      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f000 ff27 	bl	8004868 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2240      	movs	r2, #64	; 0x40
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	d137      	bne.n	8003a98 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a28:	f3ef 8310 	mrs	r3, PRIMASK
 8003a2c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a30:	2090      	movs	r0, #144	; 0x90
 8003a32:	183a      	adds	r2, r7, r0
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	2301      	movs	r3, #1
 8003a38:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a3c:	f383 8810 	msr	PRIMASK, r3
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2140      	movs	r1, #64	; 0x40
 8003a4e:	438a      	bics	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	183b      	adds	r3, r7, r0
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a5a:	f383 8810 	msr	PRIMASK, r3
}
 8003a5e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d012      	beq.n	8003a8e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	4a14      	ldr	r2, [pc, #80]	; (8003ac0 <HAL_UART_IRQHandler+0x2a0>)
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7fe fca5 	bl	80023c4 <HAL_DMA_Abort_IT>
 8003a7a:	1e03      	subs	r3, r0, #0
 8003a7c:	d01a      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	0018      	movs	r0, r3
 8003a8a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	e012      	b.n	8003ab4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f000 f9a7 	bl	8003de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a96:	e00d      	b.n	8003ab4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f000 f9a2 	bl	8003de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa0:	e008      	b.n	8003ab4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f000 f99d 	bl	8003de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2280      	movs	r2, #128	; 0x80
 8003aae:	2100      	movs	r1, #0
 8003ab0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003ab2:	e181      	b.n	8003db8 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab4:	46c0      	nop			; (mov r8, r8)
    return;
 8003ab6:	e17f      	b.n	8003db8 <HAL_UART_IRQHandler+0x598>
 8003ab8:	0000080f 	.word	0x0000080f
 8003abc:	04000120 	.word	0x04000120
 8003ac0:	0800492d 	.word	0x0800492d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d000      	beq.n	8003ace <HAL_UART_IRQHandler+0x2ae>
 8003acc:	e133      	b.n	8003d36 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ace:	23a4      	movs	r3, #164	; 0xa4
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d100      	bne.n	8003adc <HAL_UART_IRQHandler+0x2bc>
 8003ada:	e12c      	b.n	8003d36 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003adc:	23a0      	movs	r3, #160	; 0xa0
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d100      	bne.n	8003aea <HAL_UART_IRQHandler+0x2ca>
 8003ae8:	e125      	b.n	8003d36 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2210      	movs	r2, #16
 8003af0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2240      	movs	r2, #64	; 0x40
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d000      	beq.n	8003b02 <HAL_UART_IRQHandler+0x2e2>
 8003b00:	e09d      	b.n	8003c3e <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	217e      	movs	r1, #126	; 0x7e
 8003b0c:	187b      	adds	r3, r7, r1
 8003b0e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d100      	bne.n	8003b1a <HAL_UART_IRQHandler+0x2fa>
 8003b18:	e150      	b.n	8003dbc <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2258      	movs	r2, #88	; 0x58
 8003b1e:	5a9b      	ldrh	r3, [r3, r2]
 8003b20:	187a      	adds	r2, r7, r1
 8003b22:	8812      	ldrh	r2, [r2, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d300      	bcc.n	8003b2a <HAL_UART_IRQHandler+0x30a>
 8003b28:	e148      	b.n	8003dbc <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	187a      	adds	r2, r7, r1
 8003b2e:	215a      	movs	r1, #90	; 0x5a
 8003b30:	8812      	ldrh	r2, [r2, #0]
 8003b32:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d16e      	bne.n	8003c20 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b42:	f3ef 8310 	mrs	r3, PRIMASK
 8003b46:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b52:	f383 8810 	msr	PRIMASK, r3
}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	499a      	ldr	r1, [pc, #616]	; (8003dcc <HAL_UART_IRQHandler+0x5ac>)
 8003b64:	400a      	ands	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6e:	f383 8810 	msr	PRIMASK, r3
}
 8003b72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b74:	f3ef 8310 	mrs	r3, PRIMASK
 8003b78:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7c:	677b      	str	r3, [r7, #116]	; 0x74
 8003b7e:	2301      	movs	r3, #1
 8003b80:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b84:	f383 8810 	msr	PRIMASK, r3
}
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2101      	movs	r1, #1
 8003b96:	438a      	bics	r2, r1
 8003b98:	609a      	str	r2, [r3, #8]
 8003b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b9c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba0:	f383 8810 	msr	PRIMASK, r3
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8003baa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bae:	673b      	str	r3, [r7, #112]	; 0x70
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb6:	f383 8810 	msr	PRIMASK, r3
}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2140      	movs	r1, #64	; 0x40
 8003bc8:	438a      	bics	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]
 8003bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bce:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be4:	f3ef 8310 	mrs	r3, PRIMASK
 8003be8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bee:	2301      	movs	r3, #1
 8003bf0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf4:	f383 8810 	msr	PRIMASK, r3
}
 8003bf8:	46c0      	nop			; (mov r8, r8)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2110      	movs	r1, #16
 8003c06:	438a      	bics	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c10:	f383 8810 	msr	PRIMASK, r3
}
 8003c14:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f7fe fb92 	bl	8002344 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2258      	movs	r2, #88	; 0x58
 8003c24:	5a9a      	ldrh	r2, [r3, r2]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	215a      	movs	r1, #90	; 0x5a
 8003c2a:	5a5b      	ldrh	r3, [r3, r1]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	0011      	movs	r1, r2
 8003c36:	0018      	movs	r0, r3
 8003c38:	f000 f8dc 	bl	8003df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c3c:	e0be      	b.n	8003dbc <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2258      	movs	r2, #88	; 0x58
 8003c42:	5a99      	ldrh	r1, [r3, r2]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	225a      	movs	r2, #90	; 0x5a
 8003c48:	5a9b      	ldrh	r3, [r3, r2]
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	208e      	movs	r0, #142	; 0x8e
 8003c4e:	183b      	adds	r3, r7, r0
 8003c50:	1a8a      	subs	r2, r1, r2
 8003c52:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	225a      	movs	r2, #90	; 0x5a
 8003c58:	5a9b      	ldrh	r3, [r3, r2]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d100      	bne.n	8003c62 <HAL_UART_IRQHandler+0x442>
 8003c60:	e0ae      	b.n	8003dc0 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8003c62:	183b      	adds	r3, r7, r0
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d100      	bne.n	8003c6c <HAL_UART_IRQHandler+0x44c>
 8003c6a:	e0a9      	b.n	8003dc0 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c72:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c74:	2488      	movs	r4, #136	; 0x88
 8003c76:	193a      	adds	r2, r7, r4
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f383 8810 	msr	PRIMASK, r3
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	494f      	ldr	r1, [pc, #316]	; (8003dd0 <HAL_UART_IRQHandler+0x5b0>)
 8003c92:	400a      	ands	r2, r1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	193b      	adds	r3, r7, r4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ca2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca8:	61bb      	str	r3, [r7, #24]
  return(result);
 8003caa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cac:	2484      	movs	r4, #132	; 0x84
 8003cae:	193a      	adds	r2, r7, r4
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f383 8810 	msr	PRIMASK, r3
}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	438a      	bics	r2, r1
 8003ccc:	609a      	str	r2, [r3, #8]
 8003cce:	193b      	adds	r3, r7, r4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	f383 8810 	msr	PRIMASK, r3
}
 8003cda:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cee:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf6:	2480      	movs	r4, #128	; 0x80
 8003cf8:	193a      	adds	r2, r7, r4
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	f383 8810 	msr	PRIMASK, r3
}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2110      	movs	r1, #16
 8003d14:	438a      	bics	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	193b      	adds	r3, r7, r4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	f383 8810 	msr	PRIMASK, r3
}
 8003d24:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d26:	183b      	adds	r3, r7, r0
 8003d28:	881a      	ldrh	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0011      	movs	r1, r2
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f000 f860 	bl	8003df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d34:	e044      	b.n	8003dc0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d36:	23a4      	movs	r3, #164	; 0xa4
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	035b      	lsls	r3, r3, #13
 8003d40:	4013      	ands	r3, r2
 8003d42:	d010      	beq.n	8003d66 <HAL_UART_IRQHandler+0x546>
 8003d44:	239c      	movs	r3, #156	; 0x9c
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	03db      	lsls	r3, r3, #15
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d009      	beq.n	8003d66 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2280      	movs	r2, #128	; 0x80
 8003d58:	0352      	lsls	r2, r2, #13
 8003d5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f000 ff8e 	bl	8004c80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d64:	e02f      	b.n	8003dc6 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d66:	23a4      	movs	r3, #164	; 0xa4
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2280      	movs	r2, #128	; 0x80
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d00f      	beq.n	8003d92 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d72:	23a0      	movs	r3, #160	; 0xa0
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2280      	movs	r2, #128	; 0x80
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d009      	beq.n	8003d92 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01e      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	0010      	movs	r0, r2
 8003d8e:	4798      	blx	r3
    }
    return;
 8003d90:	e018      	b.n	8003dc4 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d92:	23a4      	movs	r3, #164	; 0xa4
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2240      	movs	r2, #64	; 0x40
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x5a6>
 8003d9e:	23a0      	movs	r3, #160	; 0xa0
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2240      	movs	r2, #64	; 0x40
 8003da6:	4013      	ands	r3, r2
 8003da8:	d00d      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f000 fdd4 	bl	800495a <UART_EndTransmit_IT>
    return;
 8003db2:	e008      	b.n	8003dc6 <HAL_UART_IRQHandler+0x5a6>
      return;
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	e006      	b.n	8003dc6 <HAL_UART_IRQHandler+0x5a6>
    return;
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	e004      	b.n	8003dc6 <HAL_UART_IRQHandler+0x5a6>
      return;
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	e002      	b.n	8003dc6 <HAL_UART_IRQHandler+0x5a6>
      return;
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	e000      	b.n	8003dc6 <HAL_UART_IRQHandler+0x5a6>
    return;
 8003dc4:	46c0      	nop			; (mov r8, r8)
  }

}
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b02b      	add	sp, #172	; 0xac
 8003dca:	bd90      	pop	{r4, r7, pc}
 8003dcc:	fffffeff 	.word	0xfffffeff
 8003dd0:	fffffedf 	.word	0xfffffedf

08003dd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dec:	46c0      	nop			; (mov r8, r8)
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b002      	add	sp, #8
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	000a      	movs	r2, r1
 8003dfe:	1cbb      	adds	r3, r7, #2
 8003e00:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b002      	add	sp, #8
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e0c:	b5b0      	push	{r4, r5, r7, lr}
 8003e0e:	b08e      	sub	sp, #56	; 0x38
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e14:	231a      	movs	r3, #26
 8003e16:	2218      	movs	r2, #24
 8003e18:	4694      	mov	ip, r2
 8003e1a:	44bc      	add	ip, r7
 8003e1c:	4463      	add	r3, ip
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4ab0      	ldr	r2, [pc, #704]	; (8004104 <UART_SetConfig+0x2f8>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	0019      	movs	r1, r3
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4aac      	ldr	r2, [pc, #688]	; (8004108 <UART_SetConfig+0x2fc>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4aa6      	ldr	r2, [pc, #664]	; (800410c <UART_SetConfig+0x300>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4aa1      	ldr	r2, [pc, #644]	; (8004110 <UART_SetConfig+0x304>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	0019      	movs	r1, r3
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e94:	430a      	orrs	r2, r1
 8003e96:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a9d      	ldr	r2, [pc, #628]	; (8004114 <UART_SetConfig+0x308>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d136      	bne.n	8003f10 <UART_SetConfig+0x104>
 8003ea2:	4b9d      	ldr	r3, [pc, #628]	; (8004118 <UART_SetConfig+0x30c>)
 8003ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d020      	beq.n	8003ef0 <UART_SetConfig+0xe4>
 8003eae:	d827      	bhi.n	8003f00 <UART_SetConfig+0xf4>
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d00d      	beq.n	8003ed0 <UART_SetConfig+0xc4>
 8003eb4:	d824      	bhi.n	8003f00 <UART_SetConfig+0xf4>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <UART_SetConfig+0xb4>
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d010      	beq.n	8003ee0 <UART_SetConfig+0xd4>
 8003ebe:	e01f      	b.n	8003f00 <UART_SetConfig+0xf4>
 8003ec0:	231b      	movs	r3, #27
 8003ec2:	2218      	movs	r2, #24
 8003ec4:	4694      	mov	ip, r2
 8003ec6:	44bc      	add	ip, r7
 8003ec8:	4463      	add	r3, ip
 8003eca:	2201      	movs	r2, #1
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e0c5      	b.n	800405c <UART_SetConfig+0x250>
 8003ed0:	231b      	movs	r3, #27
 8003ed2:	2218      	movs	r2, #24
 8003ed4:	4694      	mov	ip, r2
 8003ed6:	44bc      	add	ip, r7
 8003ed8:	4463      	add	r3, ip
 8003eda:	2202      	movs	r2, #2
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	e0bd      	b.n	800405c <UART_SetConfig+0x250>
 8003ee0:	231b      	movs	r3, #27
 8003ee2:	2218      	movs	r2, #24
 8003ee4:	4694      	mov	ip, r2
 8003ee6:	44bc      	add	ip, r7
 8003ee8:	4463      	add	r3, ip
 8003eea:	2204      	movs	r2, #4
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e0b5      	b.n	800405c <UART_SetConfig+0x250>
 8003ef0:	231b      	movs	r3, #27
 8003ef2:	2218      	movs	r2, #24
 8003ef4:	4694      	mov	ip, r2
 8003ef6:	44bc      	add	ip, r7
 8003ef8:	4463      	add	r3, ip
 8003efa:	2208      	movs	r2, #8
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	e0ad      	b.n	800405c <UART_SetConfig+0x250>
 8003f00:	231b      	movs	r3, #27
 8003f02:	2218      	movs	r2, #24
 8003f04:	4694      	mov	ip, r2
 8003f06:	44bc      	add	ip, r7
 8003f08:	4463      	add	r3, ip
 8003f0a:	2210      	movs	r2, #16
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e0a5      	b.n	800405c <UART_SetConfig+0x250>
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a81      	ldr	r2, [pc, #516]	; (800411c <UART_SetConfig+0x310>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d136      	bne.n	8003f88 <UART_SetConfig+0x17c>
 8003f1a:	4b7f      	ldr	r3, [pc, #508]	; (8004118 <UART_SetConfig+0x30c>)
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1e:	220c      	movs	r2, #12
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b0c      	cmp	r3, #12
 8003f24:	d020      	beq.n	8003f68 <UART_SetConfig+0x15c>
 8003f26:	d827      	bhi.n	8003f78 <UART_SetConfig+0x16c>
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d00d      	beq.n	8003f48 <UART_SetConfig+0x13c>
 8003f2c:	d824      	bhi.n	8003f78 <UART_SetConfig+0x16c>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <UART_SetConfig+0x12c>
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d010      	beq.n	8003f58 <UART_SetConfig+0x14c>
 8003f36:	e01f      	b.n	8003f78 <UART_SetConfig+0x16c>
 8003f38:	231b      	movs	r3, #27
 8003f3a:	2218      	movs	r2, #24
 8003f3c:	4694      	mov	ip, r2
 8003f3e:	44bc      	add	ip, r7
 8003f40:	4463      	add	r3, ip
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e089      	b.n	800405c <UART_SetConfig+0x250>
 8003f48:	231b      	movs	r3, #27
 8003f4a:	2218      	movs	r2, #24
 8003f4c:	4694      	mov	ip, r2
 8003f4e:	44bc      	add	ip, r7
 8003f50:	4463      	add	r3, ip
 8003f52:	2202      	movs	r2, #2
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	e081      	b.n	800405c <UART_SetConfig+0x250>
 8003f58:	231b      	movs	r3, #27
 8003f5a:	2218      	movs	r2, #24
 8003f5c:	4694      	mov	ip, r2
 8003f5e:	44bc      	add	ip, r7
 8003f60:	4463      	add	r3, ip
 8003f62:	2204      	movs	r2, #4
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	e079      	b.n	800405c <UART_SetConfig+0x250>
 8003f68:	231b      	movs	r3, #27
 8003f6a:	2218      	movs	r2, #24
 8003f6c:	4694      	mov	ip, r2
 8003f6e:	44bc      	add	ip, r7
 8003f70:	4463      	add	r3, ip
 8003f72:	2208      	movs	r2, #8
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	e071      	b.n	800405c <UART_SetConfig+0x250>
 8003f78:	231b      	movs	r3, #27
 8003f7a:	2218      	movs	r2, #24
 8003f7c:	4694      	mov	ip, r2
 8003f7e:	44bc      	add	ip, r7
 8003f80:	4463      	add	r3, ip
 8003f82:	2210      	movs	r2, #16
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	e069      	b.n	800405c <UART_SetConfig+0x250>
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a64      	ldr	r2, [pc, #400]	; (8004120 <UART_SetConfig+0x314>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d107      	bne.n	8003fa2 <UART_SetConfig+0x196>
 8003f92:	231b      	movs	r3, #27
 8003f94:	2218      	movs	r2, #24
 8003f96:	4694      	mov	ip, r2
 8003f98:	44bc      	add	ip, r7
 8003f9a:	4463      	add	r3, ip
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	e05c      	b.n	800405c <UART_SetConfig+0x250>
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a5f      	ldr	r2, [pc, #380]	; (8004124 <UART_SetConfig+0x318>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d107      	bne.n	8003fbc <UART_SetConfig+0x1b0>
 8003fac:	231b      	movs	r3, #27
 8003fae:	2218      	movs	r2, #24
 8003fb0:	4694      	mov	ip, r2
 8003fb2:	44bc      	add	ip, r7
 8003fb4:	4463      	add	r3, ip
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	e04f      	b.n	800405c <UART_SetConfig+0x250>
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a52      	ldr	r2, [pc, #328]	; (800410c <UART_SetConfig+0x300>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d143      	bne.n	800404e <UART_SetConfig+0x242>
 8003fc6:	4b54      	ldr	r3, [pc, #336]	; (8004118 <UART_SetConfig+0x30c>)
 8003fc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fca:	23c0      	movs	r3, #192	; 0xc0
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	4013      	ands	r3, r2
 8003fd0:	22c0      	movs	r2, #192	; 0xc0
 8003fd2:	0112      	lsls	r2, r2, #4
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d02a      	beq.n	800402e <UART_SetConfig+0x222>
 8003fd8:	22c0      	movs	r2, #192	; 0xc0
 8003fda:	0112      	lsls	r2, r2, #4
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d82e      	bhi.n	800403e <UART_SetConfig+0x232>
 8003fe0:	2280      	movs	r2, #128	; 0x80
 8003fe2:	0112      	lsls	r2, r2, #4
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d012      	beq.n	800400e <UART_SetConfig+0x202>
 8003fe8:	2280      	movs	r2, #128	; 0x80
 8003fea:	0112      	lsls	r2, r2, #4
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d826      	bhi.n	800403e <UART_SetConfig+0x232>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d004      	beq.n	8003ffe <UART_SetConfig+0x1f2>
 8003ff4:	2280      	movs	r2, #128	; 0x80
 8003ff6:	00d2      	lsls	r2, r2, #3
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d010      	beq.n	800401e <UART_SetConfig+0x212>
 8003ffc:	e01f      	b.n	800403e <UART_SetConfig+0x232>
 8003ffe:	231b      	movs	r3, #27
 8004000:	2218      	movs	r2, #24
 8004002:	4694      	mov	ip, r2
 8004004:	44bc      	add	ip, r7
 8004006:	4463      	add	r3, ip
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e026      	b.n	800405c <UART_SetConfig+0x250>
 800400e:	231b      	movs	r3, #27
 8004010:	2218      	movs	r2, #24
 8004012:	4694      	mov	ip, r2
 8004014:	44bc      	add	ip, r7
 8004016:	4463      	add	r3, ip
 8004018:	2202      	movs	r2, #2
 800401a:	701a      	strb	r2, [r3, #0]
 800401c:	e01e      	b.n	800405c <UART_SetConfig+0x250>
 800401e:	231b      	movs	r3, #27
 8004020:	2218      	movs	r2, #24
 8004022:	4694      	mov	ip, r2
 8004024:	44bc      	add	ip, r7
 8004026:	4463      	add	r3, ip
 8004028:	2204      	movs	r2, #4
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e016      	b.n	800405c <UART_SetConfig+0x250>
 800402e:	231b      	movs	r3, #27
 8004030:	2218      	movs	r2, #24
 8004032:	4694      	mov	ip, r2
 8004034:	44bc      	add	ip, r7
 8004036:	4463      	add	r3, ip
 8004038:	2208      	movs	r2, #8
 800403a:	701a      	strb	r2, [r3, #0]
 800403c:	e00e      	b.n	800405c <UART_SetConfig+0x250>
 800403e:	231b      	movs	r3, #27
 8004040:	2218      	movs	r2, #24
 8004042:	4694      	mov	ip, r2
 8004044:	44bc      	add	ip, r7
 8004046:	4463      	add	r3, ip
 8004048:	2210      	movs	r2, #16
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	e006      	b.n	800405c <UART_SetConfig+0x250>
 800404e:	231b      	movs	r3, #27
 8004050:	2218      	movs	r2, #24
 8004052:	4694      	mov	ip, r2
 8004054:	44bc      	add	ip, r7
 8004056:	4463      	add	r3, ip
 8004058:	2210      	movs	r2, #16
 800405a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a2a      	ldr	r2, [pc, #168]	; (800410c <UART_SetConfig+0x300>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d000      	beq.n	8004068 <UART_SetConfig+0x25c>
 8004066:	e09e      	b.n	80041a6 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004068:	231b      	movs	r3, #27
 800406a:	2218      	movs	r2, #24
 800406c:	4694      	mov	ip, r2
 800406e:	44bc      	add	ip, r7
 8004070:	4463      	add	r3, ip
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d01d      	beq.n	80040b4 <UART_SetConfig+0x2a8>
 8004078:	dc20      	bgt.n	80040bc <UART_SetConfig+0x2b0>
 800407a:	2b04      	cmp	r3, #4
 800407c:	d015      	beq.n	80040aa <UART_SetConfig+0x29e>
 800407e:	dc1d      	bgt.n	80040bc <UART_SetConfig+0x2b0>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <UART_SetConfig+0x27e>
 8004084:	2b02      	cmp	r3, #2
 8004086:	d005      	beq.n	8004094 <UART_SetConfig+0x288>
 8004088:	e018      	b.n	80040bc <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800408a:	f7ff f8f3 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 800408e:	0003      	movs	r3, r0
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004092:	e01d      	b.n	80040d0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004094:	4b20      	ldr	r3, [pc, #128]	; (8004118 <UART_SetConfig+0x30c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2210      	movs	r2, #16
 800409a:	4013      	ands	r3, r2
 800409c:	d002      	beq.n	80040a4 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800409e:	4b22      	ldr	r3, [pc, #136]	; (8004128 <UART_SetConfig+0x31c>)
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80040a2:	e015      	b.n	80040d0 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 80040a4:	4b21      	ldr	r3, [pc, #132]	; (800412c <UART_SetConfig+0x320>)
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040a8:	e012      	b.n	80040d0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040aa:	f7ff f833 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80040ae:	0003      	movs	r3, r0
 80040b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040b2:	e00d      	b.n	80040d0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040ba:	e009      	b.n	80040d0 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80040c0:	231a      	movs	r3, #26
 80040c2:	2218      	movs	r2, #24
 80040c4:	4694      	mov	ip, r2
 80040c6:	44bc      	add	ip, r7
 80040c8:	4463      	add	r3, ip
 80040ca:	2201      	movs	r2, #1
 80040cc:	701a      	strb	r2, [r3, #0]
        break;
 80040ce:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d100      	bne.n	80040d8 <UART_SetConfig+0x2cc>
 80040d6:	e13c      	b.n	8004352 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	0013      	movs	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	189b      	adds	r3, r3, r2
 80040e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d305      	bcc.n	80040f4 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d91d      	bls.n	8004130 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 80040f4:	231a      	movs	r3, #26
 80040f6:	2218      	movs	r2, #24
 80040f8:	4694      	mov	ip, r2
 80040fa:	44bc      	add	ip, r7
 80040fc:	4463      	add	r3, ip
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e126      	b.n	8004352 <UART_SetConfig+0x546>
 8004104:	efff69f3 	.word	0xefff69f3
 8004108:	ffffcfff 	.word	0xffffcfff
 800410c:	40004800 	.word	0x40004800
 8004110:	fffff4ff 	.word	0xfffff4ff
 8004114:	40013800 	.word	0x40013800
 8004118:	40021000 	.word	0x40021000
 800411c:	40004400 	.word	0x40004400
 8004120:	40004c00 	.word	0x40004c00
 8004124:	40005000 	.word	0x40005000
 8004128:	003d0900 	.word	0x003d0900
 800412c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	6939      	ldr	r1, [r7, #16]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	000b      	movs	r3, r1
 800413e:	0e1b      	lsrs	r3, r3, #24
 8004140:	0010      	movs	r0, r2
 8004142:	0205      	lsls	r5, r0, #8
 8004144:	431d      	orrs	r5, r3
 8004146:	000b      	movs	r3, r1
 8004148:	021c      	lsls	r4, r3, #8
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	085b      	lsrs	r3, r3, #1
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	68b8      	ldr	r0, [r7, #8]
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	1900      	adds	r0, r0, r4
 800415c:	4169      	adcs	r1, r5
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	2300      	movs	r3, #0
 8004166:	607b      	str	r3, [r7, #4]
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f7fc f94a 	bl	8000404 <__aeabi_uldivmod>
 8004170:	0002      	movs	r2, r0
 8004172:	000b      	movs	r3, r1
 8004174:	0013      	movs	r3, r2
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417a:	23c0      	movs	r3, #192	; 0xc0
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	429a      	cmp	r2, r3
 8004180:	d309      	bcc.n	8004196 <UART_SetConfig+0x38a>
 8004182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	035b      	lsls	r3, r3, #13
 8004188:	429a      	cmp	r2, r3
 800418a:	d204      	bcs.n	8004196 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004192:	60da      	str	r2, [r3, #12]
 8004194:	e0dd      	b.n	8004352 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004196:	231a      	movs	r3, #26
 8004198:	2218      	movs	r2, #24
 800419a:	4694      	mov	ip, r2
 800419c:	44bc      	add	ip, r7
 800419e:	4463      	add	r3, ip
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e0d5      	b.n	8004352 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	69da      	ldr	r2, [r3, #28]
 80041aa:	2380      	movs	r3, #128	; 0x80
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d000      	beq.n	80041b4 <UART_SetConfig+0x3a8>
 80041b2:	e074      	b.n	800429e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 80041b4:	231b      	movs	r3, #27
 80041b6:	2218      	movs	r2, #24
 80041b8:	4694      	mov	ip, r2
 80041ba:	44bc      	add	ip, r7
 80041bc:	4463      	add	r3, ip
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d822      	bhi.n	800420a <UART_SetConfig+0x3fe>
 80041c4:	009a      	lsls	r2, r3, #2
 80041c6:	4b6b      	ldr	r3, [pc, #428]	; (8004374 <UART_SetConfig+0x568>)
 80041c8:	18d3      	adds	r3, r2, r3
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ce:	f7ff f851 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 80041d2:	0003      	movs	r3, r0
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041d6:	e022      	b.n	800421e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041d8:	f7ff f862 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 80041dc:	0003      	movs	r3, r0
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041e0:	e01d      	b.n	800421e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041e2:	4b65      	ldr	r3, [pc, #404]	; (8004378 <UART_SetConfig+0x56c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2210      	movs	r2, #16
 80041e8:	4013      	ands	r3, r2
 80041ea:	d002      	beq.n	80041f2 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80041ec:	4b63      	ldr	r3, [pc, #396]	; (800437c <UART_SetConfig+0x570>)
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80041f0:	e015      	b.n	800421e <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 80041f2:	4b63      	ldr	r3, [pc, #396]	; (8004380 <UART_SetConfig+0x574>)
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041f6:	e012      	b.n	800421e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041f8:	f7fe ff8c 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80041fc:	0003      	movs	r3, r0
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004200:	e00d      	b.n	800421e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004208:	e009      	b.n	800421e <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800420e:	231a      	movs	r3, #26
 8004210:	2218      	movs	r2, #24
 8004212:	4694      	mov	ip, r2
 8004214:	44bc      	add	ip, r7
 8004216:	4463      	add	r3, ip
 8004218:	2201      	movs	r2, #1
 800421a:	701a      	strb	r2, [r3, #0]
        break;
 800421c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d100      	bne.n	8004226 <UART_SetConfig+0x41a>
 8004224:	e095      	b.n	8004352 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	005a      	lsls	r2, r3, #1
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	18d2      	adds	r2, r2, r3
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	0019      	movs	r1, r3
 8004238:	0010      	movs	r0, r2
 800423a:	f7fb ff6d 	bl	8000118 <__udivsi3>
 800423e:	0003      	movs	r3, r0
 8004240:	b29b      	uxth	r3, r3
 8004242:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	2b0f      	cmp	r3, #15
 8004248:	d921      	bls.n	800428e <UART_SetConfig+0x482>
 800424a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	025b      	lsls	r3, r3, #9
 8004250:	429a      	cmp	r2, r3
 8004252:	d21c      	bcs.n	800428e <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	b29a      	uxth	r2, r3
 8004258:	200e      	movs	r0, #14
 800425a:	2418      	movs	r4, #24
 800425c:	193b      	adds	r3, r7, r4
 800425e:	181b      	adds	r3, r3, r0
 8004260:	210f      	movs	r1, #15
 8004262:	438a      	bics	r2, r1
 8004264:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	b29b      	uxth	r3, r3
 800426c:	2207      	movs	r2, #7
 800426e:	4013      	ands	r3, r2
 8004270:	b299      	uxth	r1, r3
 8004272:	193b      	adds	r3, r7, r4
 8004274:	181b      	adds	r3, r3, r0
 8004276:	193a      	adds	r2, r7, r4
 8004278:	1812      	adds	r2, r2, r0
 800427a:	8812      	ldrh	r2, [r2, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	193a      	adds	r2, r7, r4
 8004286:	1812      	adds	r2, r2, r0
 8004288:	8812      	ldrh	r2, [r2, #0]
 800428a:	60da      	str	r2, [r3, #12]
 800428c:	e061      	b.n	8004352 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800428e:	231a      	movs	r3, #26
 8004290:	2218      	movs	r2, #24
 8004292:	4694      	mov	ip, r2
 8004294:	44bc      	add	ip, r7
 8004296:	4463      	add	r3, ip
 8004298:	2201      	movs	r2, #1
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e059      	b.n	8004352 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800429e:	231b      	movs	r3, #27
 80042a0:	2218      	movs	r2, #24
 80042a2:	4694      	mov	ip, r2
 80042a4:	44bc      	add	ip, r7
 80042a6:	4463      	add	r3, ip
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d822      	bhi.n	80042f4 <UART_SetConfig+0x4e8>
 80042ae:	009a      	lsls	r2, r3, #2
 80042b0:	4b34      	ldr	r3, [pc, #208]	; (8004384 <UART_SetConfig+0x578>)
 80042b2:	18d3      	adds	r3, r2, r3
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b8:	f7fe ffdc 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 80042bc:	0003      	movs	r3, r0
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042c0:	e022      	b.n	8004308 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c2:	f7fe ffed 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 80042c6:	0003      	movs	r3, r0
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042ca:	e01d      	b.n	8004308 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042cc:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <UART_SetConfig+0x56c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2210      	movs	r2, #16
 80042d2:	4013      	ands	r3, r2
 80042d4:	d002      	beq.n	80042dc <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80042d6:	4b29      	ldr	r3, [pc, #164]	; (800437c <UART_SetConfig+0x570>)
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042da:	e015      	b.n	8004308 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 80042dc:	4b28      	ldr	r3, [pc, #160]	; (8004380 <UART_SetConfig+0x574>)
 80042de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042e0:	e012      	b.n	8004308 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e2:	f7fe ff17 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80042e6:	0003      	movs	r3, r0
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042ea:	e00d      	b.n	8004308 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042f2:	e009      	b.n	8004308 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80042f8:	231a      	movs	r3, #26
 80042fa:	2218      	movs	r2, #24
 80042fc:	4694      	mov	ip, r2
 80042fe:	44bc      	add	ip, r7
 8004300:	4463      	add	r3, ip
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
        break;
 8004306:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	2b00      	cmp	r3, #0
 800430c:	d021      	beq.n	8004352 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	085a      	lsrs	r2, r3, #1
 8004314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004316:	18d2      	adds	r2, r2, r3
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	0019      	movs	r1, r3
 800431e:	0010      	movs	r0, r2
 8004320:	f7fb fefa 	bl	8000118 <__udivsi3>
 8004324:	0003      	movs	r3, r0
 8004326:	b29b      	uxth	r3, r3
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	2b0f      	cmp	r3, #15
 800432e:	d909      	bls.n	8004344 <UART_SetConfig+0x538>
 8004330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	025b      	lsls	r3, r3, #9
 8004336:	429a      	cmp	r2, r3
 8004338:	d204      	bcs.n	8004344 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004340:	60da      	str	r2, [r3, #12]
 8004342:	e006      	b.n	8004352 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004344:	231a      	movs	r3, #26
 8004346:	2218      	movs	r2, #24
 8004348:	4694      	mov	ip, r2
 800434a:	44bc      	add	ip, r7
 800434c:	4463      	add	r3, ip
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2200      	movs	r2, #0
 8004356:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	2200      	movs	r2, #0
 800435c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800435e:	231a      	movs	r3, #26
 8004360:	2218      	movs	r2, #24
 8004362:	4694      	mov	ip, r2
 8004364:	44bc      	add	ip, r7
 8004366:	4463      	add	r3, ip
 8004368:	781b      	ldrb	r3, [r3, #0]
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b00e      	add	sp, #56	; 0x38
 8004370:	bdb0      	pop	{r4, r5, r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	080051f0 	.word	0x080051f0
 8004378:	40021000 	.word	0x40021000
 800437c:	003d0900 	.word	0x003d0900
 8004380:	00f42400 	.word	0x00f42400
 8004384:	08005214 	.word	0x08005214

08004388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	2201      	movs	r2, #1
 8004396:	4013      	ands	r3, r2
 8004398:	d00b      	beq.n	80043b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4a4a      	ldr	r2, [pc, #296]	; (80044cc <UART_AdvFeatureConfig+0x144>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	0019      	movs	r1, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2202      	movs	r2, #2
 80043b8:	4013      	ands	r3, r2
 80043ba:	d00b      	beq.n	80043d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4a43      	ldr	r2, [pc, #268]	; (80044d0 <UART_AdvFeatureConfig+0x148>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	2204      	movs	r2, #4
 80043da:	4013      	ands	r3, r2
 80043dc:	d00b      	beq.n	80043f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4a3b      	ldr	r2, [pc, #236]	; (80044d4 <UART_AdvFeatureConfig+0x14c>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	0019      	movs	r1, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	2208      	movs	r2, #8
 80043fc:	4013      	ands	r3, r2
 80043fe:	d00b      	beq.n	8004418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4a34      	ldr	r2, [pc, #208]	; (80044d8 <UART_AdvFeatureConfig+0x150>)
 8004408:	4013      	ands	r3, r2
 800440a:	0019      	movs	r1, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	2210      	movs	r2, #16
 800441e:	4013      	ands	r3, r2
 8004420:	d00b      	beq.n	800443a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a2c      	ldr	r2, [pc, #176]	; (80044dc <UART_AdvFeatureConfig+0x154>)
 800442a:	4013      	ands	r3, r2
 800442c:	0019      	movs	r1, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2220      	movs	r2, #32
 8004440:	4013      	ands	r3, r2
 8004442:	d00b      	beq.n	800445c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	4a25      	ldr	r2, [pc, #148]	; (80044e0 <UART_AdvFeatureConfig+0x158>)
 800444c:	4013      	ands	r3, r2
 800444e:	0019      	movs	r1, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	2240      	movs	r2, #64	; 0x40
 8004462:	4013      	ands	r3, r2
 8004464:	d01d      	beq.n	80044a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <UART_AdvFeatureConfig+0x15c>)
 800446e:	4013      	ands	r3, r2
 8004470:	0019      	movs	r1, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	035b      	lsls	r3, r3, #13
 8004486:	429a      	cmp	r2, r3
 8004488:	d10b      	bne.n	80044a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <UART_AdvFeatureConfig+0x160>)
 8004492:	4013      	ands	r3, r2
 8004494:	0019      	movs	r1, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2280      	movs	r2, #128	; 0x80
 80044a8:	4013      	ands	r3, r2
 80044aa:	d00b      	beq.n	80044c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4a0e      	ldr	r2, [pc, #56]	; (80044ec <UART_AdvFeatureConfig+0x164>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	0019      	movs	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	605a      	str	r2, [r3, #4]
  }
}
 80044c4:	46c0      	nop			; (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b002      	add	sp, #8
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	fffdffff 	.word	0xfffdffff
 80044d0:	fffeffff 	.word	0xfffeffff
 80044d4:	fffbffff 	.word	0xfffbffff
 80044d8:	ffff7fff 	.word	0xffff7fff
 80044dc:	ffffefff 	.word	0xffffefff
 80044e0:	ffffdfff 	.word	0xffffdfff
 80044e4:	ffefffff 	.word	0xffefffff
 80044e8:	ff9fffff 	.word	0xff9fffff
 80044ec:	fff7ffff 	.word	0xfff7ffff

080044f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2280      	movs	r2, #128	; 0x80
 80044fc:	2100      	movs	r1, #0
 80044fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004500:	f7fd fe38 	bl	8002174 <HAL_GetTick>
 8004504:	0003      	movs	r3, r0
 8004506:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2208      	movs	r2, #8
 8004510:	4013      	ands	r3, r2
 8004512:	2b08      	cmp	r3, #8
 8004514:	d10c      	bne.n	8004530 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2280      	movs	r2, #128	; 0x80
 800451a:	0391      	lsls	r1, r2, #14
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4a17      	ldr	r2, [pc, #92]	; (800457c <UART_CheckIdleState+0x8c>)
 8004520:	9200      	str	r2, [sp, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	f000 f82c 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 8004528:	1e03      	subs	r3, r0, #0
 800452a:	d001      	beq.n	8004530 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e021      	b.n	8004574 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2204      	movs	r2, #4
 8004538:	4013      	ands	r3, r2
 800453a:	2b04      	cmp	r3, #4
 800453c:	d10c      	bne.n	8004558 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2280      	movs	r2, #128	; 0x80
 8004542:	03d1      	lsls	r1, r2, #15
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4a0d      	ldr	r2, [pc, #52]	; (800457c <UART_CheckIdleState+0x8c>)
 8004548:	9200      	str	r2, [sp, #0]
 800454a:	2200      	movs	r2, #0
 800454c:	f000 f818 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 8004550:	1e03      	subs	r3, r0, #0
 8004552:	d001      	beq.n	8004558 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e00d      	b.n	8004574 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2274      	movs	r2, #116	; 0x74
 800456e:	2100      	movs	r1, #0
 8004570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b004      	add	sp, #16
 800457a:	bd80      	pop	{r7, pc}
 800457c:	01ffffff 	.word	0x01ffffff

08004580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b094      	sub	sp, #80	; 0x50
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	1dfb      	adds	r3, r7, #7
 800458e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004590:	e0a3      	b.n	80046da <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004594:	3301      	adds	r3, #1
 8004596:	d100      	bne.n	800459a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004598:	e09f      	b.n	80046da <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fd fdeb 	bl	8002174 <HAL_GetTick>
 800459e:	0002      	movs	r2, r0
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d13d      	bne.n	800462c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b0:	f3ef 8310 	mrs	r3, PRIMASK
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045b8:	647b      	str	r3, [r7, #68]	; 0x44
 80045ba:	2301      	movs	r3, #1
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	f383 8810 	msr	PRIMASK, r3
}
 80045c4:	46c0      	nop			; (mov r8, r8)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	494c      	ldr	r1, [pc, #304]	; (8004704 <UART_WaitOnFlagUntilTimeout+0x184>)
 80045d2:	400a      	ands	r2, r1
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	f383 8810 	msr	PRIMASK, r3
}
 80045e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e2:	f3ef 8310 	mrs	r3, PRIMASK
 80045e6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ea:	643b      	str	r3, [r7, #64]	; 0x40
 80045ec:	2301      	movs	r3, #1
 80045ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	f383 8810 	msr	PRIMASK, r3
}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2101      	movs	r1, #1
 8004604:	438a      	bics	r2, r1
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460e:	f383 8810 	msr	PRIMASK, r3
}
 8004612:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2274      	movs	r2, #116	; 0x74
 8004624:	2100      	movs	r1, #0
 8004626:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e067      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2204      	movs	r2, #4
 8004634:	4013      	ands	r3, r2
 8004636:	d050      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69da      	ldr	r2, [r3, #28]
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	401a      	ands	r2, r3
 8004644:	2380      	movs	r3, #128	; 0x80
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	429a      	cmp	r2, r3
 800464a:	d146      	bne.n	80046da <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2280      	movs	r2, #128	; 0x80
 8004652:	0112      	lsls	r2, r2, #4
 8004654:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004656:	f3ef 8310 	mrs	r3, PRIMASK
 800465a:	613b      	str	r3, [r7, #16]
  return(result);
 800465c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800465e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004660:	2301      	movs	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f383 8810 	msr	PRIMASK, r3
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4923      	ldr	r1, [pc, #140]	; (8004704 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004678:	400a      	ands	r2, r1
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f383 8810 	msr	PRIMASK, r3
}
 8004686:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004688:	f3ef 8310 	mrs	r3, PRIMASK
 800468c:	61fb      	str	r3, [r7, #28]
  return(result);
 800468e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004690:	64bb      	str	r3, [r7, #72]	; 0x48
 8004692:	2301      	movs	r3, #1
 8004694:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	f383 8810 	msr	PRIMASK, r3
}
 800469c:	46c0      	nop			; (mov r8, r8)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2101      	movs	r1, #1
 80046aa:	438a      	bics	r2, r1
 80046ac:	609a      	str	r2, [r3, #8]
 80046ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	f383 8810 	msr	PRIMASK, r3
}
 80046b8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2280      	movs	r2, #128	; 0x80
 80046ca:	2120      	movs	r1, #32
 80046cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2274      	movs	r2, #116	; 0x74
 80046d2:	2100      	movs	r1, #0
 80046d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e010      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	4013      	ands	r3, r2
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	425a      	negs	r2, r3
 80046ea:	4153      	adcs	r3, r2
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	001a      	movs	r2, r3
 80046f0:	1dfb      	adds	r3, r7, #7
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d100      	bne.n	80046fa <UART_WaitOnFlagUntilTimeout+0x17a>
 80046f8:	e74b      	b.n	8004592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	0018      	movs	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	b014      	add	sp, #80	; 0x50
 8004702:	bd80      	pop	{r7, pc}
 8004704:	fffffe5f 	.word	0xfffffe5f

08004708 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08c      	sub	sp, #48	; 0x30
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	1dbb      	adds	r3, r7, #6
 8004714:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1dba      	adds	r2, r7, #6
 8004720:	2158      	movs	r1, #88	; 0x58
 8004722:	8812      	ldrh	r2, [r2, #0]
 8004724:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1dba      	adds	r2, r7, #6
 800472a:	215a      	movs	r1, #90	; 0x5a
 800472c:	8812      	ldrh	r2, [r2, #0]
 800472e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	015b      	lsls	r3, r3, #5
 800473e:	429a      	cmp	r2, r3
 8004740:	d10d      	bne.n	800475e <UART_Start_Receive_IT+0x56>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d104      	bne.n	8004754 <UART_Start_Receive_IT+0x4c>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	225c      	movs	r2, #92	; 0x5c
 800474e:	4943      	ldr	r1, [pc, #268]	; (800485c <UART_Start_Receive_IT+0x154>)
 8004750:	5299      	strh	r1, [r3, r2]
 8004752:	e02e      	b.n	80047b2 <UART_Start_Receive_IT+0xaa>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	225c      	movs	r2, #92	; 0x5c
 8004758:	21ff      	movs	r1, #255	; 0xff
 800475a:	5299      	strh	r1, [r3, r2]
 800475c:	e029      	b.n	80047b2 <UART_Start_Receive_IT+0xaa>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10d      	bne.n	8004782 <UART_Start_Receive_IT+0x7a>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <UART_Start_Receive_IT+0x70>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	225c      	movs	r2, #92	; 0x5c
 8004772:	21ff      	movs	r1, #255	; 0xff
 8004774:	5299      	strh	r1, [r3, r2]
 8004776:	e01c      	b.n	80047b2 <UART_Start_Receive_IT+0xaa>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	225c      	movs	r2, #92	; 0x5c
 800477c:	217f      	movs	r1, #127	; 0x7f
 800477e:	5299      	strh	r1, [r3, r2]
 8004780:	e017      	b.n	80047b2 <UART_Start_Receive_IT+0xaa>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	2380      	movs	r3, #128	; 0x80
 8004788:	055b      	lsls	r3, r3, #21
 800478a:	429a      	cmp	r2, r3
 800478c:	d10d      	bne.n	80047aa <UART_Start_Receive_IT+0xa2>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <UART_Start_Receive_IT+0x98>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	225c      	movs	r2, #92	; 0x5c
 800479a:	217f      	movs	r1, #127	; 0x7f
 800479c:	5299      	strh	r1, [r3, r2]
 800479e:	e008      	b.n	80047b2 <UART_Start_Receive_IT+0xaa>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	225c      	movs	r2, #92	; 0x5c
 80047a4:	213f      	movs	r1, #63	; 0x3f
 80047a6:	5299      	strh	r1, [r3, r2]
 80047a8:	e003      	b.n	80047b2 <UART_Start_Receive_IT+0xaa>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	225c      	movs	r2, #92	; 0x5c
 80047ae:	2100      	movs	r1, #0
 80047b0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2280      	movs	r2, #128	; 0x80
 80047b6:	2100      	movs	r1, #0
 80047b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2222      	movs	r2, #34	; 0x22
 80047be:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c0:	f3ef 8310 	mrs	r3, PRIMASK
 80047c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80047c6:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ca:	2301      	movs	r3, #1
 80047cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	f383 8810 	msr	PRIMASK, r3
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2101      	movs	r1, #1
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	f383 8810 	msr	PRIMASK, r3
}
 80047f0:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	2380      	movs	r3, #128	; 0x80
 80047f8:	015b      	lsls	r3, r3, #5
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d107      	bne.n	800480e <UART_Start_Receive_IT+0x106>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4a15      	ldr	r2, [pc, #84]	; (8004860 <UART_Start_Receive_IT+0x158>)
 800480a:	665a      	str	r2, [r3, #100]	; 0x64
 800480c:	e002      	b.n	8004814 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4a14      	ldr	r2, [pc, #80]	; (8004864 <UART_Start_Receive_IT+0x15c>)
 8004812:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2274      	movs	r2, #116	; 0x74
 8004818:	2100      	movs	r1, #0
 800481a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800481c:	f3ef 8310 	mrs	r3, PRIMASK
 8004820:	613b      	str	r3, [r7, #16]
  return(result);
 8004822:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
 8004826:	2301      	movs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f383 8810 	msr	PRIMASK, r3
}
 8004830:	46c0      	nop			; (mov r8, r8)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2190      	movs	r1, #144	; 0x90
 800483e:	0049      	lsls	r1, r1, #1
 8004840:	430a      	orrs	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f383 8810 	msr	PRIMASK, r3
}
 800484e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	0018      	movs	r0, r3
 8004854:	46bd      	mov	sp, r7
 8004856:	b00c      	add	sp, #48	; 0x30
 8004858:	bd80      	pop	{r7, pc}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	000001ff 	.word	0x000001ff
 8004860:	08004b19 	.word	0x08004b19
 8004864:	080049b1 	.word	0x080049b1

08004868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	; 0x38
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004870:	f3ef 8310 	mrs	r3, PRIMASK
 8004874:	617b      	str	r3, [r7, #20]
  return(result);
 8004876:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
 800487a:	2301      	movs	r3, #1
 800487c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	f383 8810 	msr	PRIMASK, r3
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4925      	ldr	r1, [pc, #148]	; (8004928 <UART_EndRxTransfer+0xc0>)
 8004892:	400a      	ands	r2, r1
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004898:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f383 8810 	msr	PRIMASK, r3
}
 80048a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a2:	f3ef 8310 	mrs	r3, PRIMASK
 80048a6:	623b      	str	r3, [r7, #32]
  return(result);
 80048a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048aa:	633b      	str	r3, [r7, #48]	; 0x30
 80048ac:	2301      	movs	r3, #1
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	f383 8810 	msr	PRIMASK, r3
}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2101      	movs	r1, #1
 80048c4:	438a      	bics	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	f383 8810 	msr	PRIMASK, r3
}
 80048d2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d118      	bne.n	800490e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048dc:	f3ef 8310 	mrs	r3, PRIMASK
 80048e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80048e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048e6:	2301      	movs	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f383 8810 	msr	PRIMASK, r3
}
 80048f0:	46c0      	nop			; (mov r8, r8)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2110      	movs	r1, #16
 80048fe:	438a      	bics	r2, r1
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f383 8810 	msr	PRIMASK, r3
}
 800490c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004920:	46c0      	nop			; (mov r8, r8)
 8004922:	46bd      	mov	sp, r7
 8004924:	b00e      	add	sp, #56	; 0x38
 8004926:	bd80      	pop	{r7, pc}
 8004928:	fffffedf 	.word	0xfffffedf

0800492c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	225a      	movs	r2, #90	; 0x5a
 800493e:	2100      	movs	r1, #0
 8004940:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2252      	movs	r2, #82	; 0x52
 8004946:	2100      	movs	r1, #0
 8004948:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	0018      	movs	r0, r3
 800494e:	f7ff fa49 	bl	8003de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b004      	add	sp, #16
 8004958:	bd80      	pop	{r7, pc}

0800495a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004962:	f3ef 8310 	mrs	r3, PRIMASK
 8004966:	60bb      	str	r3, [r7, #8]
  return(result);
 8004968:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	2301      	movs	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f383 8810 	msr	PRIMASK, r3
}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2140      	movs	r1, #64	; 0x40
 8004984:	438a      	bics	r2, r1
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f383 8810 	msr	PRIMASK, r3
}
 8004992:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	0018      	movs	r0, r3
 80049a4:	f7ff fa16 	bl	8003dd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b006      	add	sp, #24
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b090      	sub	sp, #64	; 0x40
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80049b8:	203e      	movs	r0, #62	; 0x3e
 80049ba:	183b      	adds	r3, r7, r0
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	215c      	movs	r1, #92	; 0x5c
 80049c0:	5a52      	ldrh	r2, [r2, r1]
 80049c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c8:	2b22      	cmp	r3, #34	; 0x22
 80049ca:	d000      	beq.n	80049ce <UART_RxISR_8BIT+0x1e>
 80049cc:	e095      	b.n	8004afa <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d4:	213c      	movs	r1, #60	; 0x3c
 80049d6:	187b      	adds	r3, r7, r1
 80049d8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049da:	187b      	adds	r3, r7, r1
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	183b      	adds	r3, r7, r0
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b2d9      	uxtb	r1, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	400a      	ands	r2, r1
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	225a      	movs	r2, #90	; 0x5a
 80049fe:	5a9b      	ldrh	r3, [r3, r2]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b299      	uxth	r1, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	225a      	movs	r2, #90	; 0x5a
 8004a0a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	225a      	movs	r2, #90	; 0x5a
 8004a10:	5a9b      	ldrh	r3, [r3, r2]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d178      	bne.n	8004b0a <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a18:	f3ef 8310 	mrs	r3, PRIMASK
 8004a1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a1e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a22:	2301      	movs	r3, #1
 8004a24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f383 8810 	msr	PRIMASK, r3
}
 8004a2c:	46c0      	nop			; (mov r8, r8)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4936      	ldr	r1, [pc, #216]	; (8004b14 <UART_RxISR_8BIT+0x164>)
 8004a3a:	400a      	ands	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	f383 8810 	msr	PRIMASK, r3
}
 8004a48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a52:	637b      	str	r3, [r7, #52]	; 0x34
 8004a54:	2301      	movs	r3, #1
 8004a56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	f383 8810 	msr	PRIMASK, r3
}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	438a      	bics	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	f383 8810 	msr	PRIMASK, r3
}
 8004a7a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d12f      	bne.n	8004af0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a96:	f3ef 8310 	mrs	r3, PRIMASK
 8004a9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a9c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f383 8810 	msr	PRIMASK, r3
}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2110      	movs	r1, #16
 8004ab8:	438a      	bics	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f383 8810 	msr	PRIMASK, r3
}
 8004ac6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	2210      	movs	r2, #16
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d103      	bne.n	8004ade <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2210      	movs	r2, #16
 8004adc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2258      	movs	r2, #88	; 0x58
 8004ae2:	5a9a      	ldrh	r2, [r3, r2]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	0011      	movs	r1, r2
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7ff f983 	bl	8003df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004aee:	e00c      	b.n	8004b0a <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7fb fdc4 	bl	8000680 <HAL_UART_RxCpltCallback>
}
 8004af8:	e007      	b.n	8004b0a <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699a      	ldr	r2, [r3, #24]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2108      	movs	r1, #8
 8004b06:	430a      	orrs	r2, r1
 8004b08:	619a      	str	r2, [r3, #24]
}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b010      	add	sp, #64	; 0x40
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	fffffedf 	.word	0xfffffedf

08004b18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b090      	sub	sp, #64	; 0x40
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b20:	203e      	movs	r0, #62	; 0x3e
 8004b22:	183b      	adds	r3, r7, r0
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	215c      	movs	r1, #92	; 0x5c
 8004b28:	5a52      	ldrh	r2, [r2, r1]
 8004b2a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b30:	2b22      	cmp	r3, #34	; 0x22
 8004b32:	d000      	beq.n	8004b36 <UART_RxISR_16BIT+0x1e>
 8004b34:	e095      	b.n	8004c62 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3c:	213c      	movs	r1, #60	; 0x3c
 8004b3e:	187b      	adds	r3, r7, r1
 8004b40:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b46:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004b48:	187b      	adds	r3, r7, r1
 8004b4a:	183a      	adds	r2, r7, r0
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	8812      	ldrh	r2, [r2, #0]
 8004b50:	4013      	ands	r3, r2
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5c:	1c9a      	adds	r2, r3, #2
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	225a      	movs	r2, #90	; 0x5a
 8004b66:	5a9b      	ldrh	r3, [r3, r2]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b299      	uxth	r1, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	225a      	movs	r2, #90	; 0x5a
 8004b72:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	225a      	movs	r2, #90	; 0x5a
 8004b78:	5a9b      	ldrh	r3, [r3, r2]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d178      	bne.n	8004c72 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b80:	f3ef 8310 	mrs	r3, PRIMASK
 8004b84:	617b      	str	r3, [r7, #20]
  return(result);
 8004b86:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b88:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	f383 8810 	msr	PRIMASK, r3
}
 8004b94:	46c0      	nop			; (mov r8, r8)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4936      	ldr	r1, [pc, #216]	; (8004c7c <UART_RxISR_16BIT+0x164>)
 8004ba2:	400a      	ands	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f383 8810 	msr	PRIMASK, r3
}
 8004bb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb6:	623b      	str	r3, [r7, #32]
  return(result);
 8004bb8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bba:	633b      	str	r3, [r7, #48]	; 0x30
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	f383 8810 	msr	PRIMASK, r3
}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	438a      	bics	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	f383 8810 	msr	PRIMASK, r3
}
 8004be2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d12f      	bne.n	8004c58 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8004c02:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c04:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c08:	2301      	movs	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f383 8810 	msr	PRIMASK, r3
}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2110      	movs	r1, #16
 8004c20:	438a      	bics	r2, r1
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f383 8810 	msr	PRIMASK, r3
}
 8004c2e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	2210      	movs	r2, #16
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d103      	bne.n	8004c46 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2210      	movs	r2, #16
 8004c44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2258      	movs	r2, #88	; 0x58
 8004c4a:	5a9a      	ldrh	r2, [r3, r2]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	0011      	movs	r1, r2
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7ff f8cf 	bl	8003df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c56:	e00c      	b.n	8004c72 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f7fb fd10 	bl	8000680 <HAL_UART_RxCpltCallback>
}
 8004c60:	e007      	b.n	8004c72 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699a      	ldr	r2, [r3, #24]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2108      	movs	r1, #8
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	619a      	str	r2, [r3, #24]
}
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b010      	add	sp, #64	; 0x40
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	fffffedf 	.word	0xfffffedf

08004c80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c88:	46c0      	nop			; (mov r8, r8)
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b002      	add	sp, #8
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <__errno>:
 8004c90:	4b01      	ldr	r3, [pc, #4]	; (8004c98 <__errno+0x8>)
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	4770      	bx	lr
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	2000000c 	.word	0x2000000c

08004c9c <__libc_init_array>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	2600      	movs	r6, #0
 8004ca0:	4d0c      	ldr	r5, [pc, #48]	; (8004cd4 <__libc_init_array+0x38>)
 8004ca2:	4c0d      	ldr	r4, [pc, #52]	; (8004cd8 <__libc_init_array+0x3c>)
 8004ca4:	1b64      	subs	r4, r4, r5
 8004ca6:	10a4      	asrs	r4, r4, #2
 8004ca8:	42a6      	cmp	r6, r4
 8004caa:	d109      	bne.n	8004cc0 <__libc_init_array+0x24>
 8004cac:	2600      	movs	r6, #0
 8004cae:	f000 f8db 	bl	8004e68 <_init>
 8004cb2:	4d0a      	ldr	r5, [pc, #40]	; (8004cdc <__libc_init_array+0x40>)
 8004cb4:	4c0a      	ldr	r4, [pc, #40]	; (8004ce0 <__libc_init_array+0x44>)
 8004cb6:	1b64      	subs	r4, r4, r5
 8004cb8:	10a4      	asrs	r4, r4, #2
 8004cba:	42a6      	cmp	r6, r4
 8004cbc:	d105      	bne.n	8004cca <__libc_init_array+0x2e>
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	00b3      	lsls	r3, r6, #2
 8004cc2:	58eb      	ldr	r3, [r5, r3]
 8004cc4:	4798      	blx	r3
 8004cc6:	3601      	adds	r6, #1
 8004cc8:	e7ee      	b.n	8004ca8 <__libc_init_array+0xc>
 8004cca:	00b3      	lsls	r3, r6, #2
 8004ccc:	58eb      	ldr	r3, [r5, r3]
 8004cce:	4798      	blx	r3
 8004cd0:	3601      	adds	r6, #1
 8004cd2:	e7f2      	b.n	8004cba <__libc_init_array+0x1e>
 8004cd4:	08005240 	.word	0x08005240
 8004cd8:	08005240 	.word	0x08005240
 8004cdc:	08005240 	.word	0x08005240
 8004ce0:	08005244 	.word	0x08005244

08004ce4 <malloc>:
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <malloc+0x10>)
 8004ce8:	0001      	movs	r1, r0
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	f000 f824 	bl	8004d38 <_malloc_r>
 8004cf0:	bd10      	pop	{r4, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	2000000c 	.word	0x2000000c

08004cf8 <memcmp>:
 8004cf8:	b530      	push	{r4, r5, lr}
 8004cfa:	2400      	movs	r4, #0
 8004cfc:	3901      	subs	r1, #1
 8004cfe:	42a2      	cmp	r2, r4
 8004d00:	d101      	bne.n	8004d06 <memcmp+0xe>
 8004d02:	2000      	movs	r0, #0
 8004d04:	e005      	b.n	8004d12 <memcmp+0x1a>
 8004d06:	5d03      	ldrb	r3, [r0, r4]
 8004d08:	3401      	adds	r4, #1
 8004d0a:	5d0d      	ldrb	r5, [r1, r4]
 8004d0c:	42ab      	cmp	r3, r5
 8004d0e:	d0f6      	beq.n	8004cfe <memcmp+0x6>
 8004d10:	1b58      	subs	r0, r3, r5
 8004d12:	bd30      	pop	{r4, r5, pc}

08004d14 <memcpy>:
 8004d14:	2300      	movs	r3, #0
 8004d16:	b510      	push	{r4, lr}
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d100      	bne.n	8004d1e <memcpy+0xa>
 8004d1c:	bd10      	pop	{r4, pc}
 8004d1e:	5ccc      	ldrb	r4, [r1, r3]
 8004d20:	54c4      	strb	r4, [r0, r3]
 8004d22:	3301      	adds	r3, #1
 8004d24:	e7f8      	b.n	8004d18 <memcpy+0x4>

08004d26 <memset>:
 8004d26:	0003      	movs	r3, r0
 8004d28:	1882      	adds	r2, r0, r2
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d100      	bne.n	8004d30 <memset+0xa>
 8004d2e:	4770      	bx	lr
 8004d30:	7019      	strb	r1, [r3, #0]
 8004d32:	3301      	adds	r3, #1
 8004d34:	e7f9      	b.n	8004d2a <memset+0x4>
	...

08004d38 <_malloc_r>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	1ccd      	adds	r5, r1, #3
 8004d3e:	439d      	bics	r5, r3
 8004d40:	3508      	adds	r5, #8
 8004d42:	0006      	movs	r6, r0
 8004d44:	2d0c      	cmp	r5, #12
 8004d46:	d21f      	bcs.n	8004d88 <_malloc_r+0x50>
 8004d48:	250c      	movs	r5, #12
 8004d4a:	42a9      	cmp	r1, r5
 8004d4c:	d81e      	bhi.n	8004d8c <_malloc_r+0x54>
 8004d4e:	0030      	movs	r0, r6
 8004d50:	f000 f878 	bl	8004e44 <__malloc_lock>
 8004d54:	4925      	ldr	r1, [pc, #148]	; (8004dec <_malloc_r+0xb4>)
 8004d56:	680a      	ldr	r2, [r1, #0]
 8004d58:	0014      	movs	r4, r2
 8004d5a:	2c00      	cmp	r4, #0
 8004d5c:	d11a      	bne.n	8004d94 <_malloc_r+0x5c>
 8004d5e:	4f24      	ldr	r7, [pc, #144]	; (8004df0 <_malloc_r+0xb8>)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <_malloc_r+0x38>
 8004d66:	0021      	movs	r1, r4
 8004d68:	0030      	movs	r0, r6
 8004d6a:	f000 f843 	bl	8004df4 <_sbrk_r>
 8004d6e:	6038      	str	r0, [r7, #0]
 8004d70:	0029      	movs	r1, r5
 8004d72:	0030      	movs	r0, r6
 8004d74:	f000 f83e 	bl	8004df4 <_sbrk_r>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d12b      	bne.n	8004dd4 <_malloc_r+0x9c>
 8004d7c:	230c      	movs	r3, #12
 8004d7e:	0030      	movs	r0, r6
 8004d80:	6033      	str	r3, [r6, #0]
 8004d82:	f000 f867 	bl	8004e54 <__malloc_unlock>
 8004d86:	e003      	b.n	8004d90 <_malloc_r+0x58>
 8004d88:	2d00      	cmp	r5, #0
 8004d8a:	dade      	bge.n	8004d4a <_malloc_r+0x12>
 8004d8c:	230c      	movs	r3, #12
 8004d8e:	6033      	str	r3, [r6, #0]
 8004d90:	2000      	movs	r0, #0
 8004d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	1b5b      	subs	r3, r3, r5
 8004d98:	d419      	bmi.n	8004dce <_malloc_r+0x96>
 8004d9a:	2b0b      	cmp	r3, #11
 8004d9c:	d903      	bls.n	8004da6 <_malloc_r+0x6e>
 8004d9e:	6023      	str	r3, [r4, #0]
 8004da0:	18e4      	adds	r4, r4, r3
 8004da2:	6025      	str	r5, [r4, #0]
 8004da4:	e003      	b.n	8004dae <_malloc_r+0x76>
 8004da6:	6863      	ldr	r3, [r4, #4]
 8004da8:	42a2      	cmp	r2, r4
 8004daa:	d10e      	bne.n	8004dca <_malloc_r+0x92>
 8004dac:	600b      	str	r3, [r1, #0]
 8004dae:	0030      	movs	r0, r6
 8004db0:	f000 f850 	bl	8004e54 <__malloc_unlock>
 8004db4:	0020      	movs	r0, r4
 8004db6:	2207      	movs	r2, #7
 8004db8:	300b      	adds	r0, #11
 8004dba:	1d23      	adds	r3, r4, #4
 8004dbc:	4390      	bics	r0, r2
 8004dbe:	1ac2      	subs	r2, r0, r3
 8004dc0:	4298      	cmp	r0, r3
 8004dc2:	d0e6      	beq.n	8004d92 <_malloc_r+0x5a>
 8004dc4:	1a1b      	subs	r3, r3, r0
 8004dc6:	50a3      	str	r3, [r4, r2]
 8004dc8:	e7e3      	b.n	8004d92 <_malloc_r+0x5a>
 8004dca:	6053      	str	r3, [r2, #4]
 8004dcc:	e7ef      	b.n	8004dae <_malloc_r+0x76>
 8004dce:	0022      	movs	r2, r4
 8004dd0:	6864      	ldr	r4, [r4, #4]
 8004dd2:	e7c2      	b.n	8004d5a <_malloc_r+0x22>
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	1cc4      	adds	r4, r0, #3
 8004dd8:	439c      	bics	r4, r3
 8004dda:	42a0      	cmp	r0, r4
 8004ddc:	d0e1      	beq.n	8004da2 <_malloc_r+0x6a>
 8004dde:	1a21      	subs	r1, r4, r0
 8004de0:	0030      	movs	r0, r6
 8004de2:	f000 f807 	bl	8004df4 <_sbrk_r>
 8004de6:	1c43      	adds	r3, r0, #1
 8004de8:	d1db      	bne.n	8004da2 <_malloc_r+0x6a>
 8004dea:	e7c7      	b.n	8004d7c <_malloc_r+0x44>
 8004dec:	20000304 	.word	0x20000304
 8004df0:	20000308 	.word	0x20000308

08004df4 <_sbrk_r>:
 8004df4:	2300      	movs	r3, #0
 8004df6:	b570      	push	{r4, r5, r6, lr}
 8004df8:	4d06      	ldr	r5, [pc, #24]	; (8004e14 <_sbrk_r+0x20>)
 8004dfa:	0004      	movs	r4, r0
 8004dfc:	0008      	movs	r0, r1
 8004dfe:	602b      	str	r3, [r5, #0]
 8004e00:	f7fb fdc0 	bl	8000984 <_sbrk>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d103      	bne.n	8004e10 <_sbrk_r+0x1c>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d000      	beq.n	8004e10 <_sbrk_r+0x1c>
 8004e0e:	6023      	str	r3, [r4, #0]
 8004e10:	bd70      	pop	{r4, r5, r6, pc}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	20000408 	.word	0x20000408

08004e18 <strstr>:
 8004e18:	780a      	ldrb	r2, [r1, #0]
 8004e1a:	b530      	push	{r4, r5, lr}
 8004e1c:	2a00      	cmp	r2, #0
 8004e1e:	d10c      	bne.n	8004e3a <strstr+0x22>
 8004e20:	bd30      	pop	{r4, r5, pc}
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d108      	bne.n	8004e38 <strstr+0x20>
 8004e26:	2301      	movs	r3, #1
 8004e28:	5ccc      	ldrb	r4, [r1, r3]
 8004e2a:	2c00      	cmp	r4, #0
 8004e2c:	d0f8      	beq.n	8004e20 <strstr+0x8>
 8004e2e:	5cc5      	ldrb	r5, [r0, r3]
 8004e30:	42a5      	cmp	r5, r4
 8004e32:	d101      	bne.n	8004e38 <strstr+0x20>
 8004e34:	3301      	adds	r3, #1
 8004e36:	e7f7      	b.n	8004e28 <strstr+0x10>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	7803      	ldrb	r3, [r0, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1f0      	bne.n	8004e22 <strstr+0xa>
 8004e40:	0018      	movs	r0, r3
 8004e42:	e7ed      	b.n	8004e20 <strstr+0x8>

08004e44 <__malloc_lock>:
 8004e44:	b510      	push	{r4, lr}
 8004e46:	4802      	ldr	r0, [pc, #8]	; (8004e50 <__malloc_lock+0xc>)
 8004e48:	f000 f80c 	bl	8004e64 <__retarget_lock_acquire_recursive>
 8004e4c:	bd10      	pop	{r4, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	20000410 	.word	0x20000410

08004e54 <__malloc_unlock>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	4802      	ldr	r0, [pc, #8]	; (8004e60 <__malloc_unlock+0xc>)
 8004e58:	f000 f805 	bl	8004e66 <__retarget_lock_release_recursive>
 8004e5c:	bd10      	pop	{r4, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	20000410 	.word	0x20000410

08004e64 <__retarget_lock_acquire_recursive>:
 8004e64:	4770      	bx	lr

08004e66 <__retarget_lock_release_recursive>:
 8004e66:	4770      	bx	lr

08004e68 <_init>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr

08004e74 <_fini>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr
